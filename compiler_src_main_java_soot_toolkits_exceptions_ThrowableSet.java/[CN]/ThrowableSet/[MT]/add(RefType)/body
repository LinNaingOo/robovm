{
  if (INSTRUMENTING) {
    Manager.v().addsOfRefType++;
  }
  if (this.exceptionsIncluded.contains(e)) {
    if (INSTRUMENTING) {
      Manager.v().addsInclusionFromMap++;
      Manager.v().addsExclusionWithoutSearch++;
    }
    return this;
  }
 else {
    ThrowableSet result=getMemoizedAdds(e);
    if (result != null) {
      if (INSTRUMENTING) {
        Manager.v().addsInclusionFromMemo++;
        Manager.v().addsExclusionWithoutSearch++;
      }
      return result;
    }
 else {
      if (INSTRUMENTING) {
        Manager.v().addsInclusionFromSearch++;
        if (exceptionsExcluded.size() != 0) {
          Manager.v().addsExclusionWithSearch++;
        }
 else {
          Manager.v().addsExclusionWithoutSearch++;
        }
      }
      FastHierarchy hierarchy=Scene.v().getOrMakeFastHierarchy();
      for (Iterator i=exceptionsExcluded.iterator(); i.hasNext(); ) {
        RefType exclusionBase=((AnySubType)i.next()).getBase();
        if (hierarchy.canStoreType(e,exclusionBase)) {
          throw new AlreadyHasExclusionsException("ThrowableSet.add(RefType): adding" + e.toString() + " to the set [ "+ this.toString()+ "] where "+ exclusionBase.toString()+ " is excluded.");
        }
      }
      for (Iterator i=exceptionsIncluded.iterator(); i.hasNext(); ) {
        RefLikeType incumbent=(RefLikeType)i.next();
        if (incumbent instanceof AnySubType) {
          RefType incumbentBase=((AnySubType)incumbent).getBase();
          if (hierarchy.canStoreType(e,incumbentBase)) {
            memoizedAdds.put(e,this);
            return this;
          }
        }
 else         if (!(incumbent instanceof RefType)) {
          throw new IllegalStateException("ThrowableSet.add(RefType): Set element " + incumbent.toString() + " is neither a RefType nor an AnySubType.");
        }
      }
      Set resultSet=new HashSet(this.exceptionsIncluded);
      resultSet.add(e);
      result=Manager.v().registerSetIfNew(resultSet,this.exceptionsExcluded);
      memoizedAdds.put(e,result);
      return result;
    }
  }
}
