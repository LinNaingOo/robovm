{
  if (INSTRUMENTING) {
    Manager.v().removesOfAnySubType++;
  }
  FastHierarchy h=Scene.v().getOrMakeFastHierarchy();
  Set caughtIncluded=null;
  Set caughtExcluded=null;
  Set uncaughtIncluded=null;
  Set uncaughtExcluded=null;
  if (INSTRUMENTING) {
    Manager.v().removesFromSearch++;
  }
  for (Iterator i=exceptionsExcluded.iterator(); i.hasNext(); ) {
    AnySubType exclusion=(AnySubType)i.next();
    RefType exclusionBase=exclusion.getBase();
    if (h.canStoreType(catcher,exclusionBase)) {
      return new Pair(ThrowableSet.Manager.v().EMPTY,this);
    }
 else     if (h.canStoreType(exclusionBase,catcher)) {
      caughtExcluded=addExceptionToSet(exclusion,caughtExcluded);
    }
 else {
      uncaughtExcluded=addExceptionToSet(exclusion,uncaughtExcluded);
    }
  }
  for (Iterator i=exceptionsIncluded.iterator(); i.hasNext(); ) {
    RefLikeType inclusion=(RefLikeType)i.next();
    if (inclusion instanceof RefType) {
      if (h.canStoreType(inclusion,catcher)) {
        caughtIncluded=addExceptionToSet(inclusion,caughtIncluded);
      }
 else {
        uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);
      }
    }
 else {
      RefType base=((AnySubType)inclusion).getBase();
      if (h.canStoreType(base,catcher)) {
        caughtIncluded=addExceptionToSet(inclusion,caughtIncluded);
      }
 else       if (h.canStoreType(catcher,base)) {
        uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);
        uncaughtExcluded=addExceptionToSet(AnySubType.v(catcher),uncaughtExcluded);
        caughtIncluded=addExceptionToSet(AnySubType.v(catcher),caughtIncluded);
      }
 else {
        uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);
      }
    }
  }
  ThrowableSet caughtSet=Manager.v().registerSetIfNew(caughtIncluded,caughtExcluded);
  ThrowableSet uncaughtSet=Manager.v().registerSetIfNew(uncaughtIncluded,uncaughtExcluded);
  return new Pair(caughtSet,uncaughtSet);
}
