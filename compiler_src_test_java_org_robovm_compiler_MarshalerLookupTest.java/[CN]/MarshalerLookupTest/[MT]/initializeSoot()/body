{
  soot.G.reset();
  Options.v().set_output_format(Options.output_format_jimple);
  Options.v().set_include_all(true);
  Options.v().set_print_tags_in_output(true);
  Options.v().set_allow_phantom_refs(true);
  Options.v().set_soot_classpath(System.getProperty("sun.boot.class.path") + ":" + System.getProperty("java.class.path"));
  Scene.v().loadNecessaryClasses();
  Config.Builder configBuilder=new Config.Builder();
  for (  String p : System.getProperty("sun.boot.class.path").split(File.pathSeparator)) {
    configBuilder.addBootClasspathEntry(new File(p));
  }
  for (  String p : System.getProperty("java.class.path").split(File.pathSeparator)) {
    configBuilder.addClasspathEntry(new File(p));
  }
  configBuilder.skipInstall(true);
  configBuilder.skipLinking(true);
  configBuilder.home(new MockHome(new File(System.getProperty("java.io.tmpdir"))));
  configBuilder.logger(new Logger(){
    public void warn(    String format,    Object... args){
      System.out.format("WARN: " + format,args);
      System.out.println();
    }
    public void info(    String format,    Object... args){
      System.out.format("INFO: " + format,args);
      System.out.println();
    }
    public void error(    String format,    Object... args){
      System.out.format("ERROR: " + format,args);
      System.out.println();
    }
    public void debug(    String format,    Object... args){
      System.out.format("DEBUG: " + format,args);
      System.out.println();
    }
  }
);
  config=configBuilder.build();
}
