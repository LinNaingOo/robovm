{
  checkOpen();
  checkNotNull(pattern);
  if (horizon < 0) {
    throw new IllegalArgumentException("horizon < 0");
  }
  matcher.usePattern(pattern);
  String result=null;
  int horizonEndIndex=(horizon == 0) ? Integer.MAX_VALUE : findStartIndex + horizon;
  while (true) {
    int findEndIndex=Math.min(horizonEndIndex,bufferLength);
    boolean isHorizonInBuffer=(horizonEndIndex <= bufferLength);
    matcher.region(findStartIndex,findEndIndex);
    if (matcher.find()) {
      if ((horizon == 0 && !matcher.hitEnd()) || isHorizonInBuffer || inputExhausted) {
        result=matcher.group();
        break;
      }
    }
 else {
      if (isHorizonInBuffer || inputExhausted) {
        break;
      }
    }
    if (!inputExhausted) {
      readMore();
      resetMatcher();
    }
  }
  if (result != null) {
    findStartIndex=matcher.end();
    matchSuccessful=true;
  }
 else {
    matchSuccessful=false;
  }
  return result;
}
