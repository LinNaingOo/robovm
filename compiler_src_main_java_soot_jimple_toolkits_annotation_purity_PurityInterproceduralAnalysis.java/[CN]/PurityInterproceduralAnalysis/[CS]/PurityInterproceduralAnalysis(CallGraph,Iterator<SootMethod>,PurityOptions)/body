{
  super(cg,new Filter(),heads,opts.dump_cg());
  if (opts.dump_cg()) {
    G.v().out.println("[AM] Dumping empty .dot call-graph");
    drawAsOneDot("EmptyCallGraph");
  }
  Date start=new Date();
  G.v().out.println("[AM] Analysis began");
  doAnalysis(opts.verbose());
  G.v().out.println("[AM] Analysis finished");
  Date finish=new Date();
  long runtime=finish.getTime() - start.getTime();
  G.v().out.println("[AM] run time: " + runtime / 1000. + " s");
  if (opts.dump_cg()) {
    G.v().out.println("[AM] Dumping annotated .dot call-graph");
    drawAsOneDot("CallGraph");
  }
  if (opts.dump_summaries()) {
    G.v().out.println("[AM] Dumping .dot summaries of analysed methods");
    drawAsManyDot("Summary_",false);
  }
  if (opts.dump_intra()) {
    G.v().out.println("[AM] Dumping .dot full intra-procedural method analyses");
    Iterator it=getAnalysedMethods();
    while (it.hasNext()) {
      SootMethod method=(SootMethod)it.next();
      Body body=method.retrieveActiveBody();
      ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body);
      if (opts.verbose())       G.v().out.println("  |- " + method);
      PurityIntraproceduralAnalysis r=new PurityIntraproceduralAnalysis(graph,this);
      r.drawAsOneDot("Intra_",method.toString());
      PurityGraphBox b=new PurityGraphBox();
      r.copyResult(b);
    }
  }
{
    G.v().out.println("[AM] Annotate methods. ");
    Iterator it=getAnalysedMethods();
    while (it.hasNext()) {
      SootMethod m=(SootMethod)it.next();
      PurityGraphBox b=(PurityGraphBox)getSummaryFor(m);
      boolean isPure;
      if (m.toString().indexOf("<init>") != -1)       isPure=b.g.isPureConstructor();
 else       isPure=b.g.isPure();
      m.addTag(new StringTag("purity: " + (isPure ? "pure" : "impure")));
      if (isPure && opts.annotate())       m.addTag(new GenericAttribute("Pure",new byte[0]));
      if (opts.print())       G.v().out.println("  |- method " + m.toString() + " is "+ (isPure ? "pure" : "impure"));
      if (!m.isStatic()) {
        int status=b.g.thisStatus();
        String s;
switch (status) {
case PurityGraph.PARAM_RW:
          s="read/write";
        break;
case PurityGraph.PARAM_RO:
      s="read-only";
    break;
case PurityGraph.PARAM_SAFE:
  s="Safe";
break;
default :
s="unknown";
}
m.addTag(new StringTag("this: " + s));
if (opts.print()) G.v().out.println("  |   |- this is " + s);
}
Iterator itt=m.getParameterTypes().iterator();
int i=0;
while (itt.hasNext()) {
if (itt.next() instanceof RefLikeType) {
int status=b.g.paramStatus(i);
String s;
switch (status) {
case PurityGraph.PARAM_RW:
s="read/write";
break;
case PurityGraph.PARAM_RO:
s="read-only";
break;
case PurityGraph.PARAM_SAFE:
s="safe";
break;
default :
s="unknown";
}
m.addTag(new StringTag("param" + i + ": "+ s));
if (opts.print()) G.v().out.println("  |   |- param " + i + " is "+ s);
}
i++;
}
}
}
}
