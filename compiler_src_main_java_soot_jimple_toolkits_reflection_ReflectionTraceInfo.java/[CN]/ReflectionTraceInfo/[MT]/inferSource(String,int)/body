{
  String className=source.substring(0,source.lastIndexOf("."));
  String methodName=source.substring(source.lastIndexOf(".") + 1);
  if (!Scene.v().containsClass(className)) {
    Scene.v().addBasicClass(className,SootClass.BODIES);
    Scene.v().loadBasicClasses();
    if (!Scene.v().containsClass(className)) {
      throw new RuntimeException("Trace file refers to unknown class: " + className);
    }
  }
  SootClass sootClass=Scene.v().getSootClass(className);
  Set<SootMethod> methodsWithRightName=new LinkedHashSet<SootMethod>();
  for (  SootMethod m : sootClass.getMethods()) {
    if (m.isConcrete() && m.getName().equals(methodName)) {
      methodsWithRightName.add(m);
    }
  }
  if (methodsWithRightName.isEmpty()) {
    throw new RuntimeException("Trace file refers to unknown method with name " + methodName + " in Class "+ className);
  }
 else   if (methodsWithRightName.size() == 1) {
    return Collections.singleton(methodsWithRightName.iterator().next());
  }
 else {
    for (    SootMethod sootMethod : methodsWithRightName) {
      if (coversLineNumber(lineNumber,sootMethod)) {
        return Collections.singleton(sootMethod);
      }
      if (sootMethod.isConcrete()) {
        if (!sootMethod.hasActiveBody())         sootMethod.retrieveActiveBody();
        Body body=sootMethod.getActiveBody();
        if (coversLineNumber(lineNumber,body)) {
          return Collections.singleton(sootMethod);
        }
        for (        Unit u : body.getUnits()) {
          if (coversLineNumber(lineNumber,u)) {
            return Collections.singleton(sootMethod);
          }
        }
      }
    }
    return methodsWithRightName;
  }
}
