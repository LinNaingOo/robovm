{
  if (key == null) {
    throw new InvalidKeySpecException("key == null");
  }
  if (keySpec == null) {
    throw new InvalidKeySpecException("keySpec == null");
  }
  if (!"RSA".equals(key.getAlgorithm())) {
    throw new InvalidKeySpecException("Key must be a RSA key");
  }
  if (key instanceof RSAPublicKey && RSAPublicKeySpec.class.isAssignableFrom(keySpec)) {
    RSAPublicKey rsaKey=(RSAPublicKey)key;
    return (T)new RSAPublicKeySpec(rsaKey.getModulus(),rsaKey.getPublicExponent());
  }
 else   if (key instanceof PublicKey && RSAPublicKeySpec.class.isAssignableFrom(keySpec)) {
    final byte[] encoded=key.getEncoded();
    if (!"X.509".equals(key.getFormat()) || encoded == null) {
      throw new InvalidKeySpecException("Not a valid X.509 encoding");
    }
    RSAPublicKey rsaKey=(RSAPublicKey)engineGeneratePublic(new X509EncodedKeySpec(encoded));
    return (T)new RSAPublicKeySpec(rsaKey.getModulus(),rsaKey.getPublicExponent());
  }
 else   if (key instanceof RSAPrivateCrtKey && RSAPrivateCrtKeySpec.class.isAssignableFrom(keySpec)) {
    RSAPrivateCrtKey rsaKey=(RSAPrivateCrtKey)key;
    return (T)new RSAPrivateCrtKeySpec(rsaKey.getModulus(),rsaKey.getPublicExponent(),rsaKey.getPrivateExponent(),rsaKey.getPrimeP(),rsaKey.getPrimeQ(),rsaKey.getPrimeExponentP(),rsaKey.getPrimeExponentQ(),rsaKey.getCrtCoefficient());
  }
 else   if (key instanceof RSAPrivateCrtKey && RSAPrivateKeySpec.class.isAssignableFrom(keySpec)) {
    RSAPrivateCrtKey rsaKey=(RSAPrivateCrtKey)key;
    return (T)new RSAPrivateKeySpec(rsaKey.getModulus(),rsaKey.getPrivateExponent());
  }
 else   if (key instanceof RSAPrivateKey && RSAPrivateKeySpec.class.isAssignableFrom(keySpec)) {
    RSAPrivateKey rsaKey=(RSAPrivateKey)key;
    return (T)new RSAPrivateKeySpec(rsaKey.getModulus(),rsaKey.getPrivateExponent());
  }
 else   if (key instanceof PrivateKey && RSAPrivateCrtKeySpec.class.isAssignableFrom(keySpec)) {
    final byte[] encoded=key.getEncoded();
    if (!"PKCS#8".equals(key.getFormat()) || encoded == null) {
      throw new InvalidKeySpecException("Not a valid PKCS#8 encoding");
    }
    RSAPrivateKey privKey=(RSAPrivateKey)engineGeneratePrivate(new PKCS8EncodedKeySpec(encoded));
    if (privKey instanceof RSAPrivateCrtKey) {
      RSAPrivateCrtKey rsaKey=(RSAPrivateCrtKey)privKey;
      return (T)new RSAPrivateCrtKeySpec(rsaKey.getModulus(),rsaKey.getPublicExponent(),rsaKey.getPrivateExponent(),rsaKey.getPrimeP(),rsaKey.getPrimeQ(),rsaKey.getPrimeExponentP(),rsaKey.getPrimeExponentQ(),rsaKey.getCrtCoefficient());
    }
 else {
      throw new InvalidKeySpecException("Encoded key is not an RSAPrivateCrtKey");
    }
  }
 else   if (key instanceof PrivateKey && RSAPrivateKeySpec.class.isAssignableFrom(keySpec)) {
    final byte[] encoded=key.getEncoded();
    if (!"PKCS#8".equals(key.getFormat()) || encoded == null) {
      throw new InvalidKeySpecException("Not a valid PKCS#8 encoding");
    }
    RSAPrivateKey rsaKey=(RSAPrivateKey)engineGeneratePrivate(new PKCS8EncodedKeySpec(encoded));
    return (T)new RSAPrivateKeySpec(rsaKey.getModulus(),rsaKey.getPrivateExponent());
  }
 else   if (key instanceof PrivateKey && PKCS8EncodedKeySpec.class.isAssignableFrom(keySpec)) {
    final byte[] encoded=key.getEncoded();
    if (!"PKCS#8".equals(key.getFormat())) {
      throw new InvalidKeySpecException("Encoding type must be PKCS#8; was " + key.getFormat());
    }
 else     if (encoded == null) {
      throw new InvalidKeySpecException("Key is not encodable");
    }
    return (T)new PKCS8EncodedKeySpec(encoded);
  }
 else   if (key instanceof PublicKey && X509EncodedKeySpec.class.isAssignableFrom(keySpec)) {
    final byte[] encoded=key.getEncoded();
    if (!"X.509".equals(key.getFormat())) {
      throw new InvalidKeySpecException("Encoding type must be X.509; was " + key.getFormat());
    }
 else     if (encoded == null) {
      throw new InvalidKeySpecException("Key is not encodable");
    }
    return (T)new X509EncodedKeySpec(encoded);
  }
 else {
    throw new InvalidKeySpecException("Unsupported key type and key spec combination; key=" + key.getClass().getName() + ", keySpec="+ keySpec.getName());
  }
}
