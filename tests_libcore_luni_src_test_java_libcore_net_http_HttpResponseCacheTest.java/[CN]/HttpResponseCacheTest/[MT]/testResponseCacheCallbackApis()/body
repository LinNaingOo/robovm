{
  final String body="ABCDE";
  final AtomicInteger cacheCount=new AtomicInteger();
  server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 Fantastic").addHeader("fgh: ijk").setBody(body));
  server.play();
  ResponseCache.setDefault(new ResponseCache(){
    @Override public CacheResponse get(    URI uri,    String requestMethod,    Map<String,List<String>> requestHeaders) throws IOException {
      return null;
    }
    @Override public CacheRequest put(    URI uri,    URLConnection conn) throws IOException {
      HttpURLConnection httpConnection=(HttpURLConnection)conn;
      try {
        httpConnection.getRequestProperties();
        fail();
      }
 catch (      IllegalStateException expected) {
      }
      try {
        httpConnection.addRequestProperty("K","V");
        fail();
      }
 catch (      IllegalStateException expected) {
      }
      assertEquals("HTTP/1.1 200 Fantastic",httpConnection.getHeaderField(null));
      assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"),httpConnection.getHeaderFields().get(null));
      assertEquals(200,httpConnection.getResponseCode());
      assertEquals("Fantastic",httpConnection.getResponseMessage());
      assertEquals(body.length(),httpConnection.getContentLength());
      assertEquals("ijk",httpConnection.getHeaderField("fgh"));
      try {
        httpConnection.getInputStream();
        fail();
      }
 catch (      IOException expected) {
      }
      cacheCount.incrementAndGet();
      return null;
    }
  }
);
  URL url=server.getUrl("/");
  URLConnection connection=url.openConnection();
  assertEquals(body,readAscii(connection));
  assertEquals(1,cacheCount.get());
}
