{
  ABCOptions options=new ABCOptions(opts);
  if (options.with_all()) {
    takeClassField=true;
    takeFieldRef=true;
    takeArrayRef=true;
    takeCSE=true;
    takeRectArray=true;
  }
 else {
    takeClassField=options.with_classfield();
    takeFieldRef=options.with_fieldref();
    takeArrayRef=options.with_arrayref();
    takeCSE=options.with_cse();
    takeRectArray=options.with_rectarray();
  }
  addColorTags=options.add_color_tags();
{
    SootMethod m=body.getMethod();
    Date start=new Date();
    if (Options.v().verbose()) {
      G.v().out.println("[abc] Analyzing array bounds information for " + m.getName());
      G.v().out.println("[abc] Started on " + start);
    }
    ArrayBoundsCheckerAnalysis analysis=null;
    if (hasArrayLocals(body)) {
      analysis=new ArrayBoundsCheckerAnalysis(body,takeClassField,takeFieldRef,takeArrayRef,takeCSE,takeRectArray);
    }
    SootClass counterClass=null;
    SootMethod increase=null;
    if (options.profiling()) {
      counterClass=Scene.v().loadClassAndSupport("MultiCounter");
      increase=counterClass.getMethod("void increase(int)");
    }
    Chain units=body.getUnits();
    IntContainer zero=new IntContainer(0);
    Iterator unitIt=units.snapshotIterator();
    while (analysis != null && unitIt.hasNext()) {
      Stmt stmt=(Stmt)unitIt.next();
      if (stmt.containsArrayRef()) {
        ArrayRef aref=stmt.getArrayRef();
{
          WeightedDirectedSparseGraph vgraph=(WeightedDirectedSparseGraph)analysis.getFlowBefore(stmt);
          int res=interpretGraph(vgraph,aref,stmt,zero);
          boolean lowercheck=true;
          boolean uppercheck=true;
          if (res == 0) {
            lowercheck=true;
            uppercheck=true;
          }
 else           if (res == 1) {
            lowercheck=true;
            uppercheck=false;
          }
 else           if (res == 2) {
            lowercheck=false;
            uppercheck=true;
          }
 else           if (res == 3) {
            lowercheck=false;
            uppercheck=false;
          }
          if (addColorTags) {
            if (res == 0) {
              aref.getIndexBox().addTag(new ColorTag(255,0,0,false,"ArrayCheckTag"));
            }
 else             if (res == 1) {
              aref.getIndexBox().addTag(new ColorTag(255,248,35,false,"ArrayCheckTag"));
            }
 else             if (res == 2) {
              aref.getIndexBox().addTag(new ColorTag(255,163,0,false,"ArrayCheckTag"));
            }
 else             if (res == 3) {
              aref.getIndexBox().addTag(new ColorTag(45,255,84,false,"ArrayCheckTag"));
            }
            SootClass bodyClass=body.getMethod().getDeclaringClass();
            Iterator keysIt=bodyClass.getTags().iterator();
            boolean keysAdded=false;
            while (keysIt.hasNext()) {
              Object next=keysIt.next();
              if (next instanceof KeyTag) {
                if (((KeyTag)next).analysisType().equals("ArrayCheckTag")) {
                  keysAdded=true;
                }
              }
            }
            if (!keysAdded) {
              bodyClass.addTag(new KeyTag(255,0,0,"ArrayBounds: Unsafe Lower and Unsafe Upper","ArrayCheckTag"));
              bodyClass.addTag(new KeyTag(255,248,35,"ArrayBounds: Unsafe Lower and Safe Upper","ArrayCheckTag"));
              bodyClass.addTag(new KeyTag(255,163,0,"ArrayBounds: Safe Lower and Unsafe Upper","ArrayCheckTag"));
              bodyClass.addTag(new KeyTag(45,255,84,"ArrayBounds: Safe Lower and Safe Upper","ArrayCheckTag"));
            }
          }
          if (options.profiling()) {
            int lowercounter=0;
            if (!lowercheck)             lowercounter=1;
            units.insertBefore(Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(increase.makeRef(),IntConstant.v(lowercounter))),stmt);
            int uppercounter=2;
            if (!uppercheck)             uppercounter=3;
            units.insertBefore(Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(increase.makeRef(),IntConstant.v(uppercounter))),stmt);
          }
 else {
            Tag checkTag=new ArrayCheckTag(lowercheck,uppercheck);
            stmt.addTag(checkTag);
          }
        }
      }
    }
    if (addColorTags && takeRectArray) {
      RectangularArrayFinder raf=RectangularArrayFinder.v();
      for (Iterator vbIt=body.getUseAndDefBoxes().iterator(); vbIt.hasNext(); ) {
        final ValueBox vb=(ValueBox)vbIt.next();
        Value v=vb.getValue();
        if (!(v instanceof Local))         continue;
        Type t=v.getType();
        if (!(t instanceof ArrayType))         continue;
        ArrayType at=(ArrayType)t;
        if (at.numDimensions <= 1)         continue;
        vb.addTag(new ColorTag(raf.isRectangular(new MethodLocal(m,(Local)v)) ? ColorTag.GREEN : ColorTag.RED));
      }
    }
    Date finish=new Date();
    if (Options.v().verbose()) {
      long runtime=finish.getTime() - start.getTime();
      G.v().out.println("[abc] ended on " + finish + ". It took "+ (runtime / 60000)+ " min. "+ ((runtime % 60000) / 1000)+ " sec.");
    }
  }
}
