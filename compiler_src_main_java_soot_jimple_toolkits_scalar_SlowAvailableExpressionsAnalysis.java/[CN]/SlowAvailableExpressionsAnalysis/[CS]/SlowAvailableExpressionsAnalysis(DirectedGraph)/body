{
  super(dg);
  UnitGraph g=(UnitGraph)dg;
  Iterator unitsIt=g.getBody().getUnits().iterator();
  ArrayList<Value> exprs=new ArrayList<Value>();
  HashMap<EquivalentValue,Chain> containingExprs=new HashMap<EquivalentValue,Chain>();
  valueToEquivValue=new HashMap<Value,EquivalentValue>();
  rhsToContainingStmt=new HashMap<Value,Stmt>();
  HashMap<EquivalentValue,Chain> equivValToSiblingList=new HashMap<EquivalentValue,Chain>();
  while (unitsIt.hasNext()) {
    Stmt s=(Stmt)unitsIt.next();
    if (s instanceof AssignStmt) {
      Value v=((AssignStmt)s).getRightOp();
      rhsToContainingStmt.put(v,s);
      EquivalentValue ev=valueToEquivValue.get(v);
      if (ev == null) {
        ev=new EquivalentValue(v);
        valueToEquivValue.put(v,ev);
      }
      Chain sibList=null;
      if (equivValToSiblingList.get(ev) == null) {
        sibList=new HashChain();
        equivValToSiblingList.put(ev,sibList);
      }
 else       sibList=equivValToSiblingList.get(ev);
      if (!sibList.contains(v))       sibList.add(v);
      if (!(v instanceof Expr))       continue;
      if (!exprs.contains(v)) {
        exprs.add(v);
        Iterator it=v.getUseBoxes().iterator();
        while (it.hasNext()) {
          Value o=((ValueBox)it.next()).getValue();
          EquivalentValue eo=valueToEquivValue.get(o);
          if (eo == null) {
            eo=new EquivalentValue(o);
            valueToEquivValue.put(o,eo);
          }
          if (equivValToSiblingList.get(eo) == null) {
            sibList=new HashChain();
            equivValToSiblingList.put(eo,sibList);
          }
 else           sibList=equivValToSiblingList.get(eo);
          if (!sibList.contains(o))           sibList.add(o);
          Chain l=null;
          if (containingExprs.containsKey(eo))           l=containingExprs.get(eo);
 else {
            l=new HashChain();
            containingExprs.put(eo,l);
          }
          if (!l.contains(ev))           l.add(ev);
        }
      }
    }
  }
  FlowUniverse exprUniv=new ArrayFlowUniverse(exprs.toArray());
  emptySet=new ArrayPackedSet(exprUniv);
{
    unitToPreserveSet=new HashMap<Unit,BoundedFlowSet>(g.size() * 2 + 1,0.7f);
    Iterator unitIt=g.iterator();
    while (unitIt.hasNext()) {
      BoundedFlowSet killSet=new ArrayPackedSet(exprUniv);
      Unit s=(Unit)unitIt.next();
      Iterator boxIt=s.getDefBoxes().iterator();
      while (boxIt.hasNext()) {
        ValueBox box=(ValueBox)boxIt.next();
        Value v=box.getValue();
        EquivalentValue ev=valueToEquivValue.get(v);
        HashChain c=(HashChain)containingExprs.get(ev);
        if (c != null) {
          Iterator it=c.iterator();
          while (it.hasNext()) {
            EquivalentValue container=(EquivalentValue)it.next();
            Iterator sibListIt=equivValToSiblingList.get(container).iterator();
            while (sibListIt.hasNext())             killSet.add(sibListIt.next(),killSet);
          }
        }
      }
      killSet.complement(killSet);
      unitToPreserveSet.put(s,killSet);
    }
  }
{
    unitToGenerateSet=new HashMap<Unit,BoundedFlowSet>(g.size() * 2 + 1,0.7f);
    Iterator unitIt=g.iterator();
    while (unitIt.hasNext()) {
      Unit s=(Unit)unitIt.next();
      BoundedFlowSet genSet=new ArrayPackedSet(exprUniv);
      if (s instanceof AssignStmt) {
        AssignStmt as=(AssignStmt)s;
        if (as.getRightOp() instanceof Expr) {
          Value gen=as.getRightOp();
          boolean cantAdd=false;
          if (gen instanceof NewExpr || gen instanceof NewArrayExpr || gen instanceof NewMultiArrayExpr)           cantAdd=true;
          if (gen instanceof InvokeExpr)           cantAdd=true;
          if (!cantAdd)           genSet.add(gen,genSet);
        }
      }
      genSet.intersection(unitToPreserveSet.get(s),genSet);
      unitToGenerateSet.put(s,genSet);
    }
  }
  doAnalysis();
}
