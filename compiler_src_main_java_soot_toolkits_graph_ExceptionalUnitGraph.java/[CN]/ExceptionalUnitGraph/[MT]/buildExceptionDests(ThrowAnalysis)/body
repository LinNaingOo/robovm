{
  Chain<Unit> units=body.getUnits();
  Map<Unit,ThrowableSet> unitToUncaughtThrowables=new HashMap<Unit,ThrowableSet>(units.size());
  Map<Unit,Collection<ExceptionDest>> result=null;
  for (Iterator<Trap> trapIt=body.getTraps().iterator(); trapIt.hasNext(); ) {
    Trap trap=trapIt.next();
    RefType catcher=trap.getException().getType();
    for (Iterator<Unit> unitIt=units.iterator(trap.getBeginUnit(),units.getPredOf(trap.getEndUnit())); unitIt.hasNext(); ) {
      Unit unit=unitIt.next();
      ThrowableSet thrownSet=unitToUncaughtThrowables.get(unit);
      if (thrownSet == null) {
        thrownSet=throwAnalysis.mightThrow(unit);
      }
      ThrowableSet.Pair catchableAs=thrownSet.whichCatchableAs(catcher);
      if (catchableAs.getCaught() != ThrowableSet.Manager.v().EMPTY) {
        result=addDestToMap(result,unit,trap,catchableAs.getCaught());
        unitToUncaughtThrowables.put(unit,catchableAs.getUncaught());
      }
 else {
        if (thrownSet != catchableAs.getUncaught()) {
          throw new IllegalStateException("ExceptionalUnitGraph.buildExceptionDests(): catchableAs.caught == EMPTY, but catchableAs.uncaught != thrownSet" + System.getProperty("line.separator") + body.getMethod().getSubSignature()+ " Unit: "+ unit.toString()+ System.getProperty("line.separator")+ " catchableAs.getUncaught() == "+ catchableAs.getUncaught().toString()+ System.getProperty("line.separator")+ " thrownSet == "+ thrownSet.toString());
        }
      }
    }
  }
  for (  Map.Entry<Unit,ThrowableSet> entry : unitToUncaughtThrowables.entrySet()) {
    Unit unit=(Unit)entry.getKey();
    ThrowableSet escaping=(ThrowableSet)entry.getValue();
    if (escaping != ThrowableSet.Manager.v().EMPTY) {
      result=addDestToMap(result,unit,null,escaping);
    }
  }
  if (result == null) {
    result=Collections.emptyMap();
  }
  return result;
}
