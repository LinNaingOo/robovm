{
  closeCheck();
synchronized (this) {
synchronized (unmodifiableKeys) {
synchronized (selectedKeys) {
        doCancel();
        boolean isBlock=(SELECT_NOW != timeout);
        prepareChannels();
        boolean success;
        try {
          if (isBlock) {
            begin();
          }
          success=Platform.getNetworkSystem().select(readableFDs,writableFDs,readableKeysCount,writableKeysCount,timeout,flags);
        }
  finally {
          if (isBlock) {
            end();
          }
        }
        int selected=success ? processSelectResult() : 0;
        Arrays.fill(flags,0);
        Set<SelectionKey> cancelledKeys=cancelledKeys();
synchronized (cancelledKeys) {
          if (cancelledKeys.size() > 0) {
            for (            SelectionKey currentkey : cancelledKeys) {
              delKey((SelectionKeyImpl)currentkey);
              mutableKeys.remove(currentkey);
              deregister((AbstractSelectionKey)currentkey);
              if (mutableSelectedKeys.remove(currentkey)) {
                selected--;
              }
            }
            cancelledKeys.clear();
          }
          limitCapacity();
        }
        return selected;
      }
    }
  }
}
