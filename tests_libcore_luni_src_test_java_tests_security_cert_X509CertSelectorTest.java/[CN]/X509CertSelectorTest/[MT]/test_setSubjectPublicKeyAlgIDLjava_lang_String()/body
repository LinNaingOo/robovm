{
  X509CertSelector selector=new X509CertSelector();
  String pkaid1="1.2.840.113549.1.1.1";
  String pkaid2="1.2.840.10040.4.1";
  PublicKey pkey1;
  PublicKey pkey2;
  try {
    pkey1=new TestKeyPair("RSA").getPublic();
    pkey2=new TestKeyPair("DSA").getPublic();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Unexpected Exception was thrown: " + e.getMessage());
    return;
  }
  TestCert cert1=new TestCert(pkey1);
  TestCert cert2=new TestCert(pkey2);
  try {
    selector.setSubjectPublicKeyAlgID(null);
  }
 catch (  IOException e) {
    fail("Unexpected IOException was thrown.");
  }
  assertTrue("Any certificate should match in the case of null " + "subjectPublicKeyAlgID criteria.",selector.match(cert1) && selector.match(cert2));
  String[] validOIDs={"0.0.20","1.25.0","2.0.39","0.2.10","1.35.15","2.17.89","2.5.29.16","2.5.29.17","2.5.29.30","2.5.29.32","2.5.29.37"};
  for (int i=0; i < validOIDs.length; i++) {
    try {
      selector.setSubjectPublicKeyAlgID(validOIDs[i]);
      assertEquals(validOIDs[i],selector.getSubjectPublicKeyAlgID());
    }
 catch (    IOException e) {
      fail("Unexpected exception " + e.getMessage());
    }
  }
  String[] invalidOIDs={"0.20","1.25","2.39","3.10"};
  for (int i=0; i < invalidOIDs.length; i++) {
    try {
      selector.setSubjectPublicKeyAlgID(invalidOIDs[i]);
      fail("IOException wasn't thrown for " + invalidOIDs[i]);
    }
 catch (    IOException e) {
    }
  }
  try {
    selector.setSubjectPublicKeyAlgID(pkaid1);
  }
 catch (  IOException e) {
    fail("Unexpected IOException was thrown.");
  }
  assertTrue("The certificate should match the selection criteria.",selector.match(cert1));
  assertFalse("The certificate should not match the selection criteria.",selector.match(cert2));
  try {
    selector.setSubjectPublicKeyAlgID(pkaid2);
  }
 catch (  IOException e) {
    fail("Unexpected IOException was thrown.");
  }
  assertTrue("The certificate should match the selection criteria.",selector.match(cert2));
}
