{
  DTMAxisIterator iterator=null;
{
switch (axis) {
case Axis.SELF:
      iterator=new TypedSingletonIterator(type);
    break;
case Axis.CHILD:
  iterator=new TypedChildrenIterator(type);
break;
case Axis.PARENT:
return (new ParentIterator().setNodeType(type));
case Axis.ANCESTOR:
return (new TypedAncestorIterator(type));
case Axis.ANCESTORORSELF:
return ((new TypedAncestorIterator(type)).includeSelf());
case Axis.ATTRIBUTE:
return (new TypedAttributeIterator(type));
case Axis.DESCENDANT:
iterator=new TypedDescendantIterator(type);
break;
case Axis.DESCENDANTORSELF:
iterator=(new TypedDescendantIterator(type)).includeSelf();
break;
case Axis.FOLLOWING:
iterator=new TypedFollowingIterator(type);
break;
case Axis.PRECEDING:
iterator=new TypedPrecedingIterator(type);
break;
case Axis.FOLLOWINGSIBLING:
iterator=new TypedFollowingSiblingIterator(type);
break;
case Axis.PRECEDINGSIBLING:
iterator=new TypedPrecedingSiblingIterator(type);
break;
case Axis.NAMESPACE:
iterator=new TypedNamespaceIterator(type);
break;
case Axis.ROOT:
iterator=new TypedRootIterator(type);
break;
default :
throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED,new Object[]{Axis.getNames(axis)}));
}
}
return (iterator);
}
