{
  char ch;
  boolean pos=true;
  int res=flags;
  while (index < pattern.length) {
    ch=pattern[index];
switch (ch) {
case '-':
      if (!pos) {
        throw new PatternSyntaxException(Messages.getString("regex.1A"),this.toString(),index);
      }
    pos=false;
  break;
case 'i':
res=pos ? res | Pattern.CASE_INSENSITIVE : (res ^ Pattern.CASE_INSENSITIVE) & res;
break;
case 'd':
res=pos ? res | Pattern.UNIX_LINES : (res ^ Pattern.UNIX_LINES) & res;
break;
case 'm':
res=pos ? res | Pattern.MULTILINE : (res ^ Pattern.MULTILINE) & res;
break;
case 's':
res=pos ? res | Pattern.DOTALL : (res ^ Pattern.DOTALL) & res;
break;
case 'u':
res=pos ? res | Pattern.UNICODE_CASE : (res ^ Pattern.UNICODE_CASE) & res;
break;
case 'x':
res=pos ? res | Pattern.COMMENTS : (res ^ Pattern.COMMENTS) & res;
break;
case ':':
nextIndex();
return res;
case ')':
nextIndex();
return res | (1 << 8);
default :
}
nextIndex();
}
throw new PatternSyntaxException(Messages.getString("regex.1A"),this.toString(),index);
}
