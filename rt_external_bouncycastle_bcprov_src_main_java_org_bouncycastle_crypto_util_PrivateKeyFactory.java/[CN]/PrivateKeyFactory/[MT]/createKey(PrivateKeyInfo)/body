{
  AlgorithmIdentifier algId=keyInfo.getPrivateKeyAlgorithm();
  if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption)) {
    RSAPrivateKey keyStructure=RSAPrivateKey.getInstance(keyInfo.parsePrivateKey());
    return new RSAPrivateCrtKeyParameters(keyStructure.getModulus(),keyStructure.getPublicExponent(),keyStructure.getPrivateExponent(),keyStructure.getPrime1(),keyStructure.getPrime2(),keyStructure.getExponent1(),keyStructure.getExponent2(),keyStructure.getCoefficient());
  }
 else   if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {
    DHParameter params=DHParameter.getInstance(algId.getParameters());
    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();
    BigInteger lVal=params.getL();
    int l=lVal == null ? 0 : lVal.intValue();
    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);
    return new DHPrivateKeyParameters(derX.getValue(),dhParams);
  }
 else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_dsa)) {
    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();
    ASN1Encodable de=algId.getParameters();
    DSAParameters parameters=null;
    if (de != null) {
      DSAParameter params=DSAParameter.getInstance(de.toASN1Primitive());
      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());
    }
    return new DSAPrivateKeyParameters(derX.getValue(),parameters);
  }
 else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_ecPublicKey)) {
    X962Parameters params=new X962Parameters((ASN1Primitive)algId.getParameters());
    X9ECParameters x9;
    if (params.isNamedCurve()) {
      ASN1ObjectIdentifier oid=ASN1ObjectIdentifier.getInstance(params.getParameters());
      x9=X962NamedCurves.getByOID(oid);
      if (x9 == null) {
        x9=SECNamedCurves.getByOID(oid);
        if (x9 == null) {
          x9=NISTNamedCurves.getByOID(oid);
        }
      }
    }
 else {
      x9=X9ECParameters.getInstance(params.getParameters());
    }
    ECPrivateKey ec=ECPrivateKey.getInstance(keyInfo.parsePrivateKey());
    BigInteger d=ec.getKey();
    ECDomainParameters dParams=new ECDomainParameters(x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());
    return new ECPrivateKeyParameters(d,dParams);
  }
 else {
    throw new RuntimeException("algorithm identifier in key not recognised");
  }
}
