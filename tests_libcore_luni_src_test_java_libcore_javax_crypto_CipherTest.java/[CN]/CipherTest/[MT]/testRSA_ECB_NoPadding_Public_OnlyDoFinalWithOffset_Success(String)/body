{
  KeyFactory kf=KeyFactory.getInstance("RSA");
  RSAPublicKeySpec keySpec=new RSAPublicKeySpec(RSA_2048_modulus,RSA_2048_publicExponent);
  final PublicKey pubKey=kf.generatePublic(keySpec);
  Cipher c=Cipher.getInstance("RSA/ECB/NoPadding",provider);
  c.init(Cipher.ENCRYPT_MODE,pubKey);
  byte[] encrypted=new byte[RSA_2048_Vector1.length];
  final int encryptLen=c.doFinal(RSA_Vector1_Encrypt_Private,0,RSA_Vector1_Encrypt_Private.length,encrypted,0);
  assertEquals("Encrypted size should match expected",RSA_2048_Vector1.length,encryptLen);
  assertEncryptedEqualsNoPadding(provider,Cipher.ENCRYPT_MODE,RSA_2048_Vector1,encrypted);
  c.init(Cipher.DECRYPT_MODE,pubKey);
  int decryptLen=c.doFinal(RSA_Vector1_Encrypt_Private,0,RSA_Vector1_Encrypt_Private.length,encrypted,0);
  if (provider.equals("BC")) {
    decryptLen++;
    encrypted=Arrays.copyOf(encrypted,encrypted.length - 1);
  }
  assertEquals("Encrypted size should match expected",RSA_2048_Vector1.length,decryptLen);
  assertEncryptedEqualsNoPadding(provider,Cipher.DECRYPT_MODE,RSA_2048_Vector1,encrypted);
}
