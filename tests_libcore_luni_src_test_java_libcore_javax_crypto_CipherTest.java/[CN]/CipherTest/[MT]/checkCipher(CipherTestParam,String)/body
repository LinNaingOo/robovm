{
  SecretKey key=new SecretKeySpec(p.key,"AES");
  Cipher c=Cipher.getInstance(p.mode + "/PKCS5Padding",provider);
  AlgorithmParameterSpec spec=null;
  if (p.iv != null) {
    spec=new IvParameterSpec(p.iv);
  }
  c.init(Cipher.ENCRYPT_MODE,key,spec);
  final byte[] actualCiphertext=c.doFinal(p.plaintext);
  assertEquals(Arrays.toString(p.ciphertext),Arrays.toString(actualCiphertext));
  byte[] emptyCipherText=c.doFinal();
  assertNotNull(emptyCipherText);
  c.init(Cipher.DECRYPT_MODE,key,spec);
  try {
    c.updateAAD(new byte[8]);
    fail("Cipher should not support AAD");
  }
 catch (  UnsupportedOperationException expected) {
  }
  byte[] emptyPlainText=c.doFinal(emptyCipherText);
  assertEquals(Arrays.toString(EmptyArray.BYTE),Arrays.toString(emptyPlainText));
{
    if (StandardNames.IS_RI) {
      assertEquals(Arrays.toString(EmptyArray.BYTE),Arrays.toString(c.doFinal()));
      c.update(EmptyArray.BYTE);
      assertEquals(Arrays.toString(EmptyArray.BYTE),Arrays.toString(c.doFinal()));
    }
 else     if (provider.equals("BC")) {
      try {
        c.doFinal();
        fail();
      }
 catch (      IllegalBlockSizeException expected) {
      }
      try {
        c.update(EmptyArray.BYTE);
        c.doFinal();
        fail();
      }
 catch (      IllegalBlockSizeException expected) {
      }
    }
 else     if (provider.equals("AndroidOpenSSL")) {
      assertNull(c.doFinal());
      c.update(EmptyArray.BYTE);
      assertNull(c.doFinal());
    }
 else {
      throw new AssertionError("Define your behavior here for " + provider);
    }
  }
{
    final byte[] actualPlaintext=c.doFinal(p.ciphertext);
    assertEquals(Arrays.toString(p.plaintext),Arrays.toString(actualPlaintext));
  }
{
    final byte[] largerThanCiphertext=new byte[p.ciphertext.length + 5];
    System.arraycopy(p.ciphertext,0,largerThanCiphertext,5,p.ciphertext.length);
    final byte[] actualPlaintext=new byte[c.getOutputSize(p.ciphertext.length)];
    assertEquals(p.plaintext.length,c.doFinal(largerThanCiphertext,5,p.ciphertext.length,actualPlaintext));
    assertEquals(Arrays.toString(p.plaintext),Arrays.toString(Arrays.copyOfRange(actualPlaintext,0,p.plaintext.length)));
  }
{
    final byte[] largerThanCiphertext=new byte[p.ciphertext.length + 10];
    System.arraycopy(p.ciphertext,0,largerThanCiphertext,5,p.ciphertext.length);
    final byte[] actualPlaintext=new byte[c.getOutputSize(p.ciphertext.length) + 2];
    assertEquals(p.plaintext.length,c.doFinal(largerThanCiphertext,5,p.ciphertext.length,actualPlaintext,1));
    assertEquals(Arrays.toString(p.plaintext),Arrays.toString(Arrays.copyOfRange(actualPlaintext,1,p.plaintext.length + 1)));
  }
  Cipher cNoPad=Cipher.getInstance(p.mode + "/NoPadding",provider);
  cNoPad.init(Cipher.DECRYPT_MODE,key,spec);
  final byte[] actualPlaintextPadded=cNoPad.doFinal(p.ciphertext);
  assertEquals(Arrays.toString(p.plaintextPadded),Arrays.toString(actualPlaintextPadded));
{
    KeyGenerator kg=KeyGenerator.getInstance("AES");
    kg.init(128);
    SecretKey sk=kg.generateKey();
    c.init(Cipher.WRAP_MODE,key,spec);
    byte[] cipherText=c.wrap(sk);
    c.init(Cipher.UNWRAP_MODE,key,spec);
    Key decryptedKey=c.unwrap(cipherText,sk.getAlgorithm(),Cipher.SECRET_KEY);
    assertEquals("sk.getAlgorithm()=" + sk.getAlgorithm() + " decryptedKey.getAlgorithm()="+ decryptedKey.getAlgorithm()+ " encryptKey.getEncoded()="+ Arrays.toString(sk.getEncoded())+ " decryptedKey.getEncoded()="+ Arrays.toString(decryptedKey.getEncoded()),sk,decryptedKey);
  }
}
