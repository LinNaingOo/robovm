{
  BigInteger a=zero, mod, inv;
  for (int j=3; j < 50; j++) {
    mod=BigInteger.valueOf(j);
    for (int i=-j + 1; i < j; i++) {
      try {
        a=BigInteger.valueOf(i);
        inv=a.modInverse(mod);
        assertTrue("bad inverse: " + a + " inv mod "+ mod+ " equals "+ inv,one.equals(a.multiply(inv).mod(mod)));
        assertTrue("inverse greater than modulo: " + a + " inv mod "+ mod+ " equals "+ inv,inv.compareTo(mod) < 0);
        assertTrue("inverse less than zero: " + a + " inv mod "+ mod+ " equals "+ inv,inv.compareTo(BigInteger.ZERO) >= 0);
      }
 catch (      ArithmeticException e) {
        assertTrue("should have found inverse for " + a + " mod "+ mod,!one.equals(a.gcd(mod)));
      }
    }
  }
  for (int j=1; j < 10; j++) {
    mod=bi2.add(BigInteger.valueOf(j));
    for (int i=0; i < 20; i++) {
      try {
        a=bi3.add(BigInteger.valueOf(i));
        inv=a.modInverse(mod);
        assertTrue("bad inverse: " + a + " inv mod "+ mod+ " equals "+ inv,one.equals(a.multiply(inv).mod(mod)));
        assertTrue("inverse greater than modulo: " + a + " inv mod "+ mod+ " equals "+ inv,inv.compareTo(mod) < 0);
        assertTrue("inverse less than zero: " + a + " inv mod "+ mod+ " equals "+ inv,inv.compareTo(BigInteger.ZERO) >= 0);
      }
 catch (      ArithmeticException e) {
        assertTrue("should have found inverse for " + a + " mod "+ mod,!one.equals(a.gcd(mod)));
      }
    }
  }
}
