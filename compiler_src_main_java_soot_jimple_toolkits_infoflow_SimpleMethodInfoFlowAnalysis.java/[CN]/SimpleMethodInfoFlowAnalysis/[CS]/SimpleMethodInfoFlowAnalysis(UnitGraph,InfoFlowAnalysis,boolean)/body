{
  this(g,dfa,ignoreNonRefTypeFlow,true);
  counter++;
  for (int i=0; i < sm.getParameterCount(); i++) {
    EquivalentValue parameterRefEqVal=InfoFlowAnalysis.getNodeForParameterRef(sm,i);
    if (!infoFlowGraph.containsNode(parameterRefEqVal))     infoFlowGraph.addNode(parameterRefEqVal);
  }
  for (Iterator it=sm.getDeclaringClass().getFields().iterator(); it.hasNext(); ) {
    SootField sf=(SootField)it.next();
    EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,sf);
    if (!infoFlowGraph.containsNode(fieldRefEqVal))     infoFlowGraph.addNode(fieldRefEqVal);
  }
  SootClass superclass=sm.getDeclaringClass();
  if (superclass.hasSuperclass())   superclass=sm.getDeclaringClass().getSuperclass();
  while (superclass.hasSuperclass()) {
    Iterator scFieldsIt=superclass.getFields().iterator();
    while (scFieldsIt.hasNext()) {
      SootField scField=(SootField)scFieldsIt.next();
      EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,scField);
      if (!infoFlowGraph.containsNode(fieldRefEqVal))       infoFlowGraph.addNode(fieldRefEqVal);
    }
    superclass=superclass.getSuperclass();
  }
  EquivalentValue thisRefEqVal=InfoFlowAnalysis.getNodeForThisRef(sm);
  if (!infoFlowGraph.containsNode(thisRefEqVal))   infoFlowGraph.addNode(thisRefEqVal);
  EquivalentValue returnRefEqVal=new CachedEquivalentValue(returnRef);
  if (!infoFlowGraph.containsNode(returnRefEqVal))   infoFlowGraph.addNode(returnRefEqVal);
  if (printMessages)   G.v().out.println("STARTING ANALYSIS FOR " + g.getBody().getMethod() + " -----");
  doFlowInsensitiveAnalysis();
  if (printMessages)   G.v().out.println("ENDING   ANALYSIS FOR " + g.getBody().getMethod() + " -----");
}
