{
  MutableDirectedGraph dataFlowGraph=dfa.getInvokeInfoFlowSummary(ie,is,sm);
  List returnValueSources=new ArrayList();
  Iterator<Object> nodeIt=dataFlowGraph.getNodes().iterator();
  while (nodeIt.hasNext()) {
    EquivalentValue nodeEqVal=(EquivalentValue)nodeIt.next();
    if (!(nodeEqVal.getValue() instanceof Ref))     throw new RuntimeException("Illegal node type in data flow graph:" + nodeEqVal.getValue() + " should be an object of type Ref.");
    Ref node=(Ref)nodeEqVal.getValue();
    Value source=null;
    if (node instanceof ParameterRef) {
      ParameterRef param=(ParameterRef)node;
      if (param.getIndex() == -1)       continue;
      source=ie.getArg(param.getIndex());
    }
 else     if (node instanceof StaticFieldRef) {
      source=node;
    }
 else     if (ie instanceof InstanceInvokeExpr && node instanceof InstanceFieldRef) {
      InstanceInvokeExpr iie=(InstanceInvokeExpr)ie;
      source=iie.getBase();
    }
    Iterator sinksIt=dataFlowGraph.getSuccsOf(nodeEqVal).iterator();
    while (sinksIt.hasNext()) {
      EquivalentValue sinkEqVal=(EquivalentValue)sinksIt.next();
      Ref sink=(Ref)sinkEqVal.getValue();
      if (sink instanceof ParameterRef) {
        ParameterRef param=(ParameterRef)sink;
        if (param.getIndex() == -1) {
          returnValueSources.add(source);
        }
 else {
          handleFlowsToDataStructure(ie.getArg(param.getIndex()),source,fs);
        }
      }
 else       if (sink instanceof StaticFieldRef) {
        handleFlowsToValue(sink,source,fs);
      }
 else       if (ie instanceof InstanceInvokeExpr && sink instanceof InstanceFieldRef) {
        InstanceInvokeExpr iie=(InstanceInvokeExpr)ie;
        handleFlowsToDataStructure(iie.getBase(),source,fs);
      }
    }
  }
  return returnValueSources;
}
