{
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  monitor.beginTask(configuration.getName() + "...",6);
  if (monitor.isCanceled()) {
    return;
  }
  try {
    monitor.subTask("Verifying launch attributes");
    String mainTypeName=verifyMainTypeName(configuration);
    File workingDir=verifyWorkingDirectory(configuration);
    String[] envp=getEnvironment(configuration);
    String pgmArgs=getProgramArguments(configuration);
    String vmArgs=getVMArguments(configuration);
    String[] classpath=getClasspath(configuration);
    String[] bootclasspath=getBootpath(configuration);
    if (monitor.isCanceled()) {
      return;
    }
    Arch arch=NullVMPlugin.getArch(configuration.getAttribute(NullVMPlugin.LAUNCH_ARCH,(String)null));
    OS os=NullVMPlugin.getOS(configuration.getAttribute(NullVMPlugin.LAUNCH_OS,(String)null));
    File installDir=new File(NullVMPlugin.getMetadataDir(),getJavaProjectName(configuration));
    installDir=new File(new File(installDir,os.toString()),arch.toString());
    installDir=new File(installDir,mainTypeName);
    monitor.worked(1);
    NullVMPlugin.consoleInfo("Building executable");
    monitor.subTask("Creating source locator");
    setDefaultSourceLocator(launch,configuration);
    monitor.worked(1);
    monitor.subTask("Creating build configuration");
    Config.Builder configBuilder=new Config.Builder();
    configBuilder.arch(arch);
    configBuilder.os(os);
    configBuilder.debug(true);
    configBuilder.skipInstall(false);
    if (NullVMPlugin.useBundledNullVM()) {
      configBuilder.nullVMHomeDir(NullVMPlugin.getBundledNullVMDir());
    }
 else {
      configBuilder.nullVMHomeDir(NullVMPlugin.getNullVMHomeDir());
    }
    if (!NullVMPlugin.useSystemLlvm()) {
      configBuilder.llvmHomeDir(NullVMPlugin.getLlvmHomeDir());
    }
    configBuilder.logger(NullVMPlugin.getConsoleLogger());
    if (bootclasspath != null) {
      configBuilder.skipRuntimeLib(true);
      for (      String p : bootclasspath) {
        configBuilder.addBootClasspathEntry(new File(p));
      }
    }
    for (    String p : classpath) {
      configBuilder.addClasspathEntry(new File(p));
    }
    configBuilder.mainClass(mainTypeName);
    configBuilder.installDir(installDir);
    Config config=null;
    AppCompiler compiler=null;
    App app=null;
    try {
      config=configBuilder.build();
      app=config.getApp();
      compiler=new AppCompiler(config);
      if (monitor.isCanceled()) {
        return;
      }
      monitor.worked(1);
      monitor.subTask("Building executable");
      compiler.compile();
      if (monitor.isCanceled()) {
        return;
      }
      monitor.worked(1);
      NullVMPlugin.consoleInfo("Build done");
    }
 catch (    IOException e) {
      NullVMPlugin.consoleError("Build failed");
      throw new CoreException(new Status(IStatus.ERROR,NullVMPlugin.PLUGIN_ID,"Build failed. Check the NullVM console for more information.",e));
    }
    try {
      NullVMPlugin.consoleInfo("Installing executable to %s",installDir);
      monitor.subTask("Installing executable");
      app.install();
      if (monitor.isCanceled()) {
        return;
      }
      monitor.worked(1);
      NullVMPlugin.consoleInfo("Install done");
    }
 catch (    IOException e) {
      NullVMPlugin.consoleError("Install failed");
      throw new CoreException(new Status(IStatus.ERROR,NullVMPlugin.PLUGIN_ID,"Install failed",e));
    }
    try {
      NullVMPlugin.consoleInfo("Launching executable");
      monitor.subTask("Launching executable");
      List<String> runArgs=new ArrayList<String>();
      runArgs.addAll(splitArgs(vmArgs));
      runArgs.addAll(splitArgs(pgmArgs));
      String[] cmdLine=config.getApp().generateCommandLine(runArgs);
      String label=String.format("%s (%s)",cmdLine[0],DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM).format(new Date()));
      Process process=DebugPlugin.exec(cmdLine,workingDir,envFromMap(config.getApp().modifyEnv(envToMap(envp))));
      DebugPlugin.newProcess(launch,process,label);
      NullVMPlugin.consoleInfo("Launch done");
      if (monitor.isCanceled()) {
        process.destroy();
        return;
      }
      monitor.worked(1);
    }
 catch (    IOException e) {
      NullVMPlugin.consoleError("Launch failed");
      throw new CoreException(new Status(IStatus.ERROR,NullVMPlugin.PLUGIN_ID,"Launch failed. Check the NullVM console for more information.",e));
    }
  }
  finally {
    monitor.done();
  }
}
