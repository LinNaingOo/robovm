{
  s=new Scanner("test");
  try {
    s.skip((String)null);
    fail("Should throw NullPointerException");
  }
 catch (  NullPointerException e) {
  }
  s=new Scanner("1234");
  try {
    s.skip(Pattern.compile("\\p{Lower}"));
    fail("Should throw NoSuchElementException");
  }
 catch (  NoSuchElementException e) {
  }
  try {
    s.match();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  s.skip(Pattern.compile("\\p{Digit}"));
  MatchResult matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(1,matchResult.end());
  s.skip(Pattern.compile("\\p{Digit}+"));
  matchResult=s.match();
  assertEquals(1,matchResult.start());
  assertEquals(4,matchResult.end());
  s.close();
  try {
    s.skip(Pattern.compile("test"));
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  MockStringReader2Read reader=new MockStringReader2Read("test");
  s=new Scanner(reader);
  try {
    s.skip(Pattern.compile("\\p{Digit}{4}"));
    fail("Should throw NoSuchElementException");
  }
 catch (  NoSuchElementException e) {
  }
  try {
    s.match();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  s.skip(Pattern.compile("\\p{Digit}{3}\\p{Lower}"));
  matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(4,matchResult.end());
  s.close();
  try {
    s.skip((Pattern)null);
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  StringBuilder stringBuilder=new StringBuilder();
  char[] chars=new char[1024];
  Arrays.fill(chars,'a');
  stringBuilder.append(chars);
  stringBuilder.append('3');
  s=new Scanner(stringBuilder.toString());
  s.skip(Pattern.compile("\\p{Lower}+\\p{Digit}"));
  matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(1025,matchResult.end());
  chars=new char[102400];
  Arrays.fill(chars,'a');
  stringBuilder=new StringBuilder();
  stringBuilder.append(chars);
  s=new Scanner(stringBuilder.toString());
  s.skip(Pattern.compile(".*"));
  matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(102400,matchResult.end());
  s.skip(Pattern.compile("[ \t]*"));
  matchResult=s.match();
  assertEquals(102400,matchResult.start());
  assertEquals(102400,matchResult.end());
}
