{
  Set<Clazz> linkClasses=new TreeSet<Clazz>(classes);
  config.getLogger().info("Linking %d classes",linkClasses.size());
  ModuleBuilder mb=new ModuleBuilder();
  mb.addInclude(getClass().getClassLoader().getResource(String.format("header-%s-%s.ll",config.getOs().getFamily(),config.getArch())));
  mb.addInclude(getClass().getClassLoader().getResource("header.ll"));
  mb.addGlobal(new Global("_bcDynamicJNI",new IntegerConstant(config.isUseDynamicJni() ? (byte)1 : (byte)0)));
  HashTableGenerator<String,Constant> bcpHashGen=new HashTableGenerator<String,Constant>(new ModifiedUtf8HashFunction());
  HashTableGenerator<String,Constant> cpHashGen=new HashTableGenerator<String,Constant>(new ModifiedUtf8HashFunction());
  for (  Clazz clazz : linkClasses) {
    Global info=new Global(mangleClass(clazz.getInternalName()) + "_info_struct",external,I8_PTR,false);
    mb.addGlobal(info);
    if (clazz.isInBootClasspath()) {
      bcpHashGen.put(clazz.getInternalName(),new ConstantBitcast(info.ref(),I8_PTR));
    }
 else {
      cpHashGen.put(clazz.getInternalName(),new ConstantBitcast(info.ref(),I8_PTR));
    }
  }
  mb.addGlobal(new Global("_bcBootClassesHash",new ConstantGetelementptr(mb.newGlobal(bcpHashGen.generate(),true).ref(),0,0)));
  mb.addGlobal(new Global("_bcClassesHash",new ConstantGetelementptr(mb.newGlobal(cpHashGen.generate(),true).ref(),0,0)));
  ArrayConstantBuilder bootClasspathValues=new ArrayConstantBuilder(I8_PTR);
  ArrayConstantBuilder classpathValues=new ArrayConstantBuilder(I8_PTR);
  List<Path> allPaths=new ArrayList<Path>();
  allPaths.addAll(config.getClazzes().getPaths());
  allPaths.addAll(config.getResourcesPaths());
  for (  Path path : allPaths) {
    String entryName=null;
    if (config.isSkipInstall() && config.getTarget().canLaunchInPlace()) {
      entryName=path.getFile().getAbsolutePath();
    }
 else {
      entryName=config.getTarget().getInstallRelativeArchivePath(path);
    }
    if (path.isInBootClasspath()) {
      bootClasspathValues.add(mb.getString(entryName));
    }
 else {
      classpathValues.add(mb.getString(entryName));
    }
  }
  bootClasspathValues.add(new NullConstant(Type.I8_PTR));
  classpathValues.add(new NullConstant(Type.I8_PTR));
  mb.addGlobal(new Global("_bcBootclasspath",new ConstantGetelementptr(mb.newGlobal(bootClasspathValues.build()).ref(),0,0)));
  mb.addGlobal(new Global("_bcClasspath",new ConstantGetelementptr(mb.newGlobal(classpathValues.build()).ref(),0,0)));
  if (config.getMainClass() != null) {
    mb.addGlobal(new Global("_bcMainClass",mb.getString(config.getMainClass())));
  }
  Arch arch=config.getArch();
  OS os=config.getOs();
  Context context=new Context();
  Module module=Module.parseIR(context,mb.build().toString(),"linker.ll");
  PassManager passManager=new PassManager();
  passManager.addAlwaysInlinerPass();
  passManager.addPromoteMemoryToRegisterPass();
  passManager.run(module);
  passManager.dispose();
  String triple=arch.getLlvmName() + "-unknown-" + os;
  Target target=Target.lookupTarget(triple);
  TargetMachine targetMachine=target.createTargetMachine(triple);
  targetMachine.setAsmVerbosityDefault(true);
  targetMachine.setFunctionSections(true);
  targetMachine.setDataSections(true);
  targetMachine.getOptions().setNoFramePointerElim(true);
  File linkerO=new File(config.getTmpDir(),"linker.o");
  linkerO.getParentFile().mkdirs();
  OutputStream outO=null;
  try {
    outO=new BufferedOutputStream(new FileOutputStream(linkerO));
    targetMachine.emit(module,outO,CodeGenFileType.ObjectFile);
  }
  finally {
    IOUtils.closeQuietly(outO);
  }
  module.dispose();
  context.dispose();
  List<File> objectFiles=new ArrayList<File>();
  objectFiles.add(linkerO);
  for (  Clazz clazz : linkClasses) {
    objectFiles.add(config.getOFile(clazz));
  }
  config.getTarget().build(objectFiles);
}
