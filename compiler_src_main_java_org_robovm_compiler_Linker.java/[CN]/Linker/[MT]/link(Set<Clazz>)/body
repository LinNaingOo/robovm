{
  Arch arch=config.getArch();
  OS os=config.getOs();
  Set<Clazz> linkClasses=new TreeSet<Clazz>(classes);
  config.getLogger().info("Linking %d classes (%s %s %s)",linkClasses.size(),os,arch,config.isDebug() ? "debug" : "release");
  ModuleBuilder mb=new ModuleBuilder();
  mb.addInclude(getClass().getClassLoader().getResource(String.format("header-%s-%s.ll",os.getFamily(),arch)));
  mb.addInclude(getClass().getClassLoader().getResource("header.ll"));
  mb.addGlobal(new Global("_bcDynamicJNI",new IntegerConstant(config.isUseDynamicJni() ? (byte)1 : (byte)0)));
  ArrayConstantBuilder staticLibs=new ArrayConstantBuilder(I8_PTR);
  if (!config.isUseDynamicJni()) {
    for (    Config.Lib lib : config.getLibs()) {
      String p=lib.getValue();
      if (p.endsWith(".a")) {
        p=new File(p).getName();
        String libName=p.substring(0,p.length() - 2);
        if (libName.startsWith("lib")) {
          libName=libName.substring(3);
        }
        staticLibs.add(mb.getString(libName));
      }
    }
  }
  staticLibs.add(new NullConstant(Type.I8_PTR));
  mb.addGlobal(new Global("_bcStaticLibs",new ConstantGetelementptr(mb.newGlobal(staticLibs.build()).ref(),0,0)));
  HashTableGenerator<String,Constant> bcpHashGen=new HashTableGenerator<String,Constant>(new ModifiedUtf8HashFunction());
  HashTableGenerator<String,Constant> cpHashGen=new HashTableGenerator<String,Constant>(new ModifiedUtf8HashFunction());
  int classCount=0;
  Map<ClazzInfo,TypeInfo> typeInfos=new HashMap<ClazzInfo,TypeInfo>();
  for (  Clazz clazz : linkClasses) {
    TypeInfo typeInfo=new TypeInfo();
    typeInfo.clazz=clazz;
    typeInfo.id=classCount++;
    typeInfos.put(clazz.getClazzInfo(),typeInfo);
    StructureConstant infoErrorStruct=createClassInfoErrorStruct(mb,clazz.getClazzInfo());
    Global info=null;
    if (infoErrorStruct == null) {
      info=new Global(Symbols.infoStructSymbol(clazz.getInternalName()),external,I8_PTR,false);
    }
 else {
      typeInfo.error=true;
      info=new Global(Symbols.infoStructSymbol(clazz.getInternalName()),infoErrorStruct);
    }
    mb.addGlobal(info);
    if (clazz.isInBootClasspath()) {
      bcpHashGen.put(clazz.getInternalName(),new ConstantBitcast(info.ref(),I8_PTR));
    }
 else {
      cpHashGen.put(clazz.getInternalName(),new ConstantBitcast(info.ref(),I8_PTR));
    }
  }
  mb.addGlobal(new Global("_bcBootClassesHash",new ConstantGetelementptr(mb.newGlobal(bcpHashGen.generate(),true).ref(),0,0)));
  mb.addGlobal(new Global("_bcClassesHash",new ConstantGetelementptr(mb.newGlobal(cpHashGen.generate(),true).ref(),0,0)));
  ArrayConstantBuilder bootClasspathValues=new ArrayConstantBuilder(I8_PTR);
  ArrayConstantBuilder classpathValues=new ArrayConstantBuilder(I8_PTR);
  List<Path> allPaths=new ArrayList<Path>();
  allPaths.addAll(config.getClazzes().getPaths());
  allPaths.addAll(config.getResourcesPaths());
  for (  Path path : allPaths) {
    String entryName=null;
    if (config.isSkipInstall() && config.getTarget().canLaunchInPlace()) {
      entryName=path.getFile().getAbsolutePath();
    }
 else {
      entryName=config.getTarget().getInstallRelativeArchivePath(path);
    }
    if (path.isInBootClasspath()) {
      bootClasspathValues.add(mb.getString(entryName));
    }
 else {
      classpathValues.add(mb.getString(entryName));
    }
  }
  bootClasspathValues.add(new NullConstant(Type.I8_PTR));
  classpathValues.add(new NullConstant(Type.I8_PTR));
  mb.addGlobal(new Global("_bcBootclasspath",new ConstantGetelementptr(mb.newGlobal(bootClasspathValues.build()).ref(),0,0)));
  mb.addGlobal(new Global("_bcClasspath",new ConstantGetelementptr(mb.newGlobal(classpathValues.build()).ref(),0,0)));
  if (config.getMainClass() != null) {
    mb.addGlobal(new Global("_bcMainClass",mb.getString(config.getMainClass())));
  }
  buildTypeInfos(typeInfos);
  for (  Clazz clazz : linkClasses) {
    ClazzInfo ci=clazz.getClazzInfo();
    TypeInfo typeInfo=typeInfos.get(ci);
    if (typeInfo.error) {
      mb.addGlobal(new Global(Symbols.typeInfoSymbol(clazz.getInternalName()),new StructureConstantBuilder().add(new IntegerConstant(typeInfo.id)).add(new IntegerConstant(0)).add(new IntegerConstant(-1)).add(new IntegerConstant(0)).add(new IntegerConstant(0)).build()));
    }
 else {
      int[] classIds=new int[typeInfo.classTypes.length];
      for (int i=0; i < typeInfo.classTypes.length; i++) {
        classIds[i]=typeInfo.classTypes[i].id;
      }
      int[] interfaceIds=new int[typeInfo.interfaceTypes.length];
      for (int i=0; i < typeInfo.interfaceTypes.length; i++) {
        interfaceIds[i]=typeInfo.interfaceTypes[i].id;
      }
      mb.addGlobal(new Global(Symbols.typeInfoSymbol(clazz.getInternalName()),new StructureConstantBuilder().add(new IntegerConstant(typeInfo.id)).add(new IntegerConstant((typeInfo.classTypes.length - 1) * 4 + 5 * 4)).add(new IntegerConstant(-1)).add(new IntegerConstant(typeInfo.classTypes.length)).add(new IntegerConstant(typeInfo.interfaceTypes.length)).add(new ArrayConstantBuilder(I32).add(classIds).build()).add(new ArrayConstantBuilder(I32).add(interfaceIds).build()).build()));
      if (!config.isDebug() && !ci.isInterface() && !ci.isFinal()&& typeInfo.children.isEmpty()) {
        for (        MethodInfo mi : ci.getMethods()) {
          String name=mi.getName();
          if (!name.equals("<clinit>") && !name.equals("<init>") && !mi.isPrivate()&& !mi.isStatic()&& !mi.isFinal()&& !mi.isAbstract()) {
            mb.addFunction(createLookup(mb,ci,mi));
          }
        }
      }
    }
    mb.addFunction(createCheckcast(mb,clazz,typeInfo));
    mb.addFunction(createInstanceof(mb,clazz,typeInfo));
  }
  File linkerO=new File(config.getTmpDir(),"linker.o");
  linkerO.getParentFile().mkdirs();
  try (Context context=new Context()){
    try (Module module=Module.parseIR(context,mb.build().toString(),"linker.ll")){
      try (PassManager passManager=new PassManager()){
        passManager.addAlwaysInlinerPass();
        passManager.addPromoteMemoryToRegisterPass();
        passManager.run(module);
      }
       String triple=arch.getLlvmName() + "-unknown-" + os;
      Target target=Target.lookupTarget(triple);
      try (TargetMachine targetMachine=target.createTargetMachine(triple)){
        targetMachine.setAsmVerbosityDefault(true);
        targetMachine.setFunctionSections(true);
        targetMachine.setDataSections(true);
        targetMachine.getOptions().setNoFramePointerElim(true);
        try (OutputStream outO=new BufferedOutputStream(new FileOutputStream(linkerO))){
          targetMachine.emit(module,outO,CodeGenFileType.ObjectFile);
        }
       }
     }
   }
   List<File> objectFiles=new ArrayList<File>();
  objectFiles.add(linkerO);
  for (  Clazz clazz : linkClasses) {
    objectFiles.add(config.getOFile(clazz));
  }
  for (  Clazz clazz : linkClasses) {
    File f=config.getLinesOFile(clazz);
    if (f.exists() && f.length() > 0) {
      objectFiles.add(f);
    }
  }
  config.getTarget().build(objectFiles);
}
