{
  File linkerO=new File(config.getTmpDir(),"linker" + num + ".o");
  linkerO.getParentFile().mkdirs();
  try (Context context=new Context()){
    String ir=mb.build().toString();
    if (config.isDumpIntermediates()) {
      File linkerLl=new File(config.getTmpDir(),"linker" + num + ".ll");
      FileUtils.writeStringToFile(linkerLl,ir,"utf-8");
    }
    try (Module module=Module.parseIR(context,ir,"linker" + num + ".ll")){
      try (PassManager passManager=new PassManager()){
        passManager.addAlwaysInlinerPass();
        passManager.addPromoteMemoryToRegisterPass();
        passManager.run(module);
      }
       if (config.isDumpIntermediates()) {
        File linkerBc=new File(config.getTmpDir(),"linker" + num + ".bc");
        module.writeBitcode(linkerBc);
      }
      String triple=config.getTriple();
      Target target=Target.lookupTarget(triple);
      try (TargetMachine targetMachine=target.createTargetMachine(triple)){
        targetMachine.setAsmVerbosityDefault(true);
        targetMachine.setFunctionSections(true);
        targetMachine.setDataSections(true);
        targetMachine.getOptions().setNoFramePointerElim(true);
        targetMachine.getOptions().setPositionIndependentExecutable(true);
        if (config.isDumpIntermediates()) {
          File linkerS=new File(config.getTmpDir(),"linker" + num + ".s");
          try (OutputStream outS=new BufferedOutputStream(new FileOutputStream(linkerS))){
            targetMachine.emit(module,outS,CodeGenFileType.AssemblyFile);
          }
         }
        try (OutputStream outO=new BufferedOutputStream(new FileOutputStream(linkerO))){
          targetMachine.emit(module,outO,CodeGenFileType.ObjectFile);
        }
       }
     }
   }
   return linkerO;
}
