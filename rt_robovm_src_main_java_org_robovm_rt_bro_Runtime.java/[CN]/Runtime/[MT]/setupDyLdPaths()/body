{
  List<String> paths=new ArrayList<String>();
  String home=System.getProperty("user.home");
  if (Bro.IS_LINUX) {
    String ldLibPath=System.getenv("LD_LIBRARY_PATH");
    if (ldLibPath != null) {
      paths.addAll(Arrays.asList(ldLibPath.split(Pattern.quote(File.pathSeparator))));
    }
    File ldSoConf=new File("/etc/ld.so.conf");
    try {
      readLdSoConf(ldSoConf,paths);
    }
 catch (    IOException e) {
      throw new Error(e);
    }
  }
  if (Bro.IS_DARWIN) {
    String dyLdFwPath=System.getenv("DYLD_FRAMEWORK_PATH");
    if (dyLdFwPath != null) {
      paths.addAll(Arrays.asList(dyLdFwPath.split(Pattern.quote(File.pathSeparator))));
    }
    String dyLdLibPath=System.getenv("DYLD_LIBRARY_PATH");
    if (dyLdLibPath != null) {
      paths.addAll(Arrays.asList(dyLdLibPath.split(Pattern.quote(File.pathSeparator))));
    }
    String dyLdFallbackFwPath=System.getenv("DYLD_FALLBACK_FRAMEWORK_PATH");
    if (dyLdFallbackFwPath != null) {
      paths.addAll(Arrays.asList(dyLdFallbackFwPath.split(Pattern.quote(File.pathSeparator))));
    }
    if (home != null) {
      paths.add(new File(home,"Library/Frameworks").getAbsolutePath());
    }
    paths.add("/Library/Frameworks");
    paths.add("/Network/Library/Frameworks");
    paths.add("/System/Library/Frameworks");
    String dyLdFallbackLibPath=System.getenv("DYLD_FALLBACK_LIBRARY_PATH");
    if (dyLdFallbackLibPath != null) {
      paths.addAll(Arrays.asList(dyLdFallbackLibPath.split(Pattern.quote(File.pathSeparator))));
    }
    if (home != null) {
      paths.add(new File(home,"lib").getAbsolutePath());
    }
  }
  String basePath=System.getProperty("org.robovm.base.path");
  if (basePath != null) {
    paths.add(basePath);
  }
  String javaLibPath=System.getProperty("java.library.path");
  if (javaLibPath != null) {
    paths.addAll(Arrays.asList(javaLibPath.split(Pattern.quote(File.pathSeparator))));
  }
  paths.add("/usr/local/lib");
  paths.add("/lib");
  paths.add("/usr/lib");
  if (Bro.IS_DARWIN) {
    paths.add("/usr/lib/system");
    String dyLdRootPath=System.getenv("DYLD_ROOT_PATH");
    if (dyLdRootPath != null) {
      List<String> oldSearchPaths=new ArrayList<String>(paths);
      paths.clear();
      for (      String root : dyLdRootPath.split(Pattern.quote(File.pathSeparator))) {
        while (root.endsWith("/")) {
          root=root.substring(0,root.length() - 1);
        }
        for (        String path : oldSearchPaths) {
          File f=new File(root + path);
          String absPath=f.getAbsolutePath();
          if (!paths.contains(absPath) && f.exists() && f.isDirectory()) {
            paths.add(absPath);
          }
        }
      }
      paths.addAll(oldSearchPaths);
    }
  }
  return uniq(paths);
}
