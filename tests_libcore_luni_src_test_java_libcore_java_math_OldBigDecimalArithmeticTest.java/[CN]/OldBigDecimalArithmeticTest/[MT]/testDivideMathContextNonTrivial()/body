{
  MathContext mc;
  BigDecimal a, b, res;
  mc=new MathContext(5,RoundingMode.FLOOR);
  a=new BigDecimal("12345.1");
  b=new BigDecimal("12345.9");
  assertEquals("incorrect value","1",a.round(mc).divide(b.round(mc)).toString());
  res=a.divide(b,mc);
  assertEquals("incorrect value","0.99993",res.toString());
  mc=new MathContext(17,RoundingMode.FLOOR);
  a=new BigDecimal("12345678901234567.1");
  b=new BigDecimal("12345678901234567.9");
  assertEquals("incorrect value","1",a.round(mc).divide(b.round(mc)).toString());
  res=a.divide(b,mc);
  assertEquals("incorrect value","0.99999999999999993",res.toString());
  assertEquals("incorrect value",res.round(mc).toString(),res.toString());
  mc=new MathContext(13,RoundingMode.UNNECESSARY);
  a=new BigDecimal("1234567890123456789012345678.9012395");
  b=new BigDecimal("6172839450617283945061728394.5061975");
  res=a.divide(b,mc);
  assertEquals("incorrect value","0.2",res.toString());
  mc=new MathContext(33,RoundingMode.UNNECESSARY);
  a=new BigDecimal("1234567890123456789012345678.9012395");
  b=new BigDecimal("1000000000000000090000000000.0000005");
  try {
    res=a.divide(b,mc);
    fail("ArithmeticException is not thrown for RoundingMode.UNNECESSARY");
  }
 catch (  ArithmeticException e) {
  }
}
