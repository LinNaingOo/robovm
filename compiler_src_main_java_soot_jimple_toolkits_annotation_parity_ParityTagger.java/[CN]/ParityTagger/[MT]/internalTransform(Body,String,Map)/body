{
  boolean isInteractive=Options.v().interactive_mode();
  Options.v().set_interactive_mode(false);
  ParityAnalysis a;
  if (isInteractive) {
    LiveLocals sll=new SimpleLiveLocals(new BriefUnitGraph(b));
    Options.v().set_interactive_mode(isInteractive);
    a=new ParityAnalysis(new BriefUnitGraph(b),sll);
  }
 else {
    a=new ParityAnalysis(new BriefUnitGraph(b));
  }
  Iterator sIt=b.getUnits().iterator();
  while (sIt.hasNext()) {
    Stmt s=(Stmt)sIt.next();
    HashMap parityVars=(HashMap)a.getFlowAfter(s);
    Iterator it=parityVars.keySet().iterator();
    while (it.hasNext()) {
      final Value variable=(Value)it.next();
      if ((variable instanceof IntConstant) || (variable instanceof LongConstant)) {
      }
 else {
        StringTag t=new StringTag("Parity variable: " + variable + " "+ parityVars.get(variable),"Parity Analysis");
        s.addTag(t);
      }
    }
    HashMap parityVarsUses=(HashMap)a.getFlowBefore(s);
    HashMap parityVarsDefs=(HashMap)a.getFlowAfter(s);
    Iterator valBoxIt=s.getUseBoxes().iterator();
    while (valBoxIt.hasNext()) {
      ValueBox vb=(ValueBox)valBoxIt.next();
      if (parityVarsUses.containsKey(vb.getValue())) {
        String type=(String)parityVarsUses.get(vb.getValue());
        addColorTag(vb,type);
      }
    }
    valBoxIt=s.getDefBoxes().iterator();
    while (valBoxIt.hasNext()) {
      ValueBox vb=(ValueBox)valBoxIt.next();
      if (parityVarsDefs.containsKey(vb.getValue())) {
        String type=(String)parityVarsDefs.get(vb.getValue());
        addColorTag(vb,type);
      }
    }
  }
  Iterator keyIt=b.getMethod().getDeclaringClass().getTags().iterator();
  boolean keysAdded=false;
  while (keyIt.hasNext()) {
    Object next=keyIt.next();
    if (next instanceof KeyTag) {
      if (((KeyTag)next).analysisType().equals("Parity Analysis")) {
        keysAdded=true;
      }
    }
  }
  if (!keysAdded) {
    b.getMethod().getDeclaringClass().addTag(new KeyTag(255,0,0,"Parity: Top","Parity Analysis"));
    b.getMethod().getDeclaringClass().addTag(new KeyTag(45,255,84,"Parity: Bottom","Parity Analysis"));
    b.getMethod().getDeclaringClass().addTag(new KeyTag(255,248,35,"Parity: Even","Parity Analysis"));
    b.getMethod().getDeclaringClass().addTag(new KeyTag(174,210,255,"Parity: Odd","Parity Analysis"));
  }
}
