{
  List<DominatorNode> dominanceFrontier=new ArrayList<DominatorNode>();
{
    Iterator<DominatorNode> succsIt=dt.getSuccsOf(node).iterator();
    while (succsIt.hasNext()) {
      DominatorNode succ=succsIt.next();
      if (!dt.isImmediateDominatorOf(node,succ))       dominanceFrontier.add(succ);
    }
  }
{
    Iterator childIt=dt.getChildrenOf(node).iterator();
    while (childIt.hasNext()) {
      DominatorNode child=(DominatorNode)childIt.next();
      Iterator childFrontIt=getDominanceFrontierOf(child).iterator();
      while (childFrontIt.hasNext()) {
        DominatorNode childFront=(DominatorNode)childFrontIt.next();
        if (!dt.isImmediateDominatorOf(node,childFront))         dominanceFrontier.add(childFront);
      }
    }
  }
  nodeToFrontier.put(node,dominanceFrontier);
}
