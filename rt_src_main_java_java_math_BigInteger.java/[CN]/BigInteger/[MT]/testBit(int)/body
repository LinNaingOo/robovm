{
  if (n == 0) {
    return ((digits[0] & 1) != 0);
  }
  if (n < 0) {
    throw new ArithmeticException(Messages.getString("math.15"));
  }
  int intCount=n >> 5;
  if (intCount >= numberLength) {
    return (sign < 0);
  }
  int digit=digits[intCount];
  n=(1 << (n & 31));
  if (sign < 0) {
    int firstNonZeroDigit=getFirstNonzeroDigit();
    if (intCount < firstNonZeroDigit) {
      return false;
    }
 else     if (firstNonZeroDigit == intCount) {
      digit=-digit;
    }
 else {
      digit=~digit;
    }
  }
  return ((digit & n) != 0);
}
