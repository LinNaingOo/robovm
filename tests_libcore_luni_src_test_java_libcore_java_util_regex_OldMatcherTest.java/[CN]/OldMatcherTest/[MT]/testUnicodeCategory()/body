{
  assertTrue(Pattern.compile("\\p{Ll}").matcher("k").matches());
  assertTrue(Pattern.compile("\\P{Ll}").matcher("K").matches());
  assertTrue(Pattern.compile("\\p{Lu}").matcher("K").matches());
  assertTrue(Pattern.compile("\\P{Lu}").matcher("k").matches());
  assertTrue(Pattern.compile("[\\p{L}&&[^\\p{Lu}]]").matcher("k").matches());
  assertTrue(Pattern.compile("[\\p{L}&&[^\\p{Ll}]]").matcher("K").matches());
  assertFalse(Pattern.compile("[\\p{L}&&[^\\p{Lu}]]").matcher("K").matches());
  assertFalse(Pattern.compile("[\\p{L}&&[^\\p{Ll}]]").matcher("k").matches());
  assertFalse(Pattern.compile("[\\p{L}&&[^a-z]]").matcher("k").matches());
  assertTrue(Pattern.compile("[\\p{L}&&[^a-z]]").matcher("K").matches());
  assertTrue(Pattern.compile("[\\p{Lu}a-z]").matcher("k").matches());
  assertTrue(Pattern.compile("[a-z\\p{Lu}]").matcher("k").matches());
  assertFalse(Pattern.compile("[\\p{Lu}a-d]").matcher("k").matches());
  assertTrue(Pattern.compile("[a-d\\p{Lu}]").matcher("K").matches());
  assertFalse(Pattern.compile("[\\p{L}&&[^\\p{Lu}&&[^G]]]").matcher("K").matches());
}
