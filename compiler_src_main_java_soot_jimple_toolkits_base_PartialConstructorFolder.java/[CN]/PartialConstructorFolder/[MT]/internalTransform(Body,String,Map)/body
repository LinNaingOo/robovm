{
  JimpleBody body=(JimpleBody)b;
  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "] Folding Jimple constructors...");
  Chain units=body.getUnits();
  List<Unit> stmtList=new ArrayList<Unit>();
  stmtList.addAll(units);
  Iterator<Unit> it=stmtList.iterator();
  Iterator<Unit> nextStmtIt=stmtList.iterator();
  nextStmtIt.next();
  ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body);
  LocalDefs localDefs=new SmartLocalDefs(graph,new SimpleLiveLocals(graph));
  LocalUses localUses=new SimpleLocalUses(graph,localDefs);
  while (it.hasNext()) {
    Stmt s=(Stmt)it.next();
    if (!(s instanceof AssignStmt))     continue;
    Value lhs=((AssignStmt)s).getLeftOp();
    if (!(lhs instanceof Local))     continue;
    Value rhs=((AssignStmt)s).getRightOp();
    if (!(rhs instanceof NewExpr))     continue;
    if (nextStmtIt.hasNext()) {
      Stmt next=(Stmt)nextStmtIt.next();
      if (next instanceof InvokeStmt) {
        InvokeStmt invoke=(InvokeStmt)next;
        if (invoke.getInvokeExpr() instanceof SpecialInvokeExpr) {
          SpecialInvokeExpr invokeExpr=(SpecialInvokeExpr)invoke.getInvokeExpr();
          if (invokeExpr.getBase() == lhs) {
            break;
          }
        }
      }
    }
    if (!types.contains(((NewExpr)rhs).getType()))     continue;
    List lu=localUses.getUsesOf(s);
    Iterator luIter=lu.iterator();
    boolean MadeNewInvokeExpr=false;
    while (luIter.hasNext()) {
      Unit use=((UnitValueBoxPair)(luIter.next())).unit;
      if (!(use instanceof InvokeStmt))       continue;
      InvokeStmt is=(InvokeStmt)use;
      if (!(is.getInvokeExpr() instanceof SpecialInvokeExpr) || lhs != ((SpecialInvokeExpr)is.getInvokeExpr()).getBase())       continue;
      AssignStmt constructStmt=Jimple.v().newAssignStmt(((DefinitionStmt)s).getLeftOp(),((DefinitionStmt)s).getRightOp());
      constructStmt.setRightOp(Jimple.v().newNewExpr(((NewExpr)rhs).getBaseType()));
      MadeNewInvokeExpr=true;
      use.redirectJumpsToThisTo(constructStmt);
      units.insertBefore(constructStmt,use);
      constructStmt.addTag(s.getTag("SourceLnPosTag"));
    }
    if (MadeNewInvokeExpr) {
      units.remove(s);
    }
  }
}
