{
  TestSSLContext c=TestSSLContext.create(null,null,null,null,null,null,null,null,SSLContext.getDefault(),SSLContext.getDefault());
  SSLSocket client=(SSLSocket)c.clientContext.getSocketFactory().createSocket(c.host,c.port);
  if (StandardNames.IS_RI) {
    final SSLSocket server=(SSLSocket)c.serverSocket.accept();
    ExecutorService executor=Executors.newSingleThreadExecutor();
    Future<Void> future=executor.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        try {
          server.startHandshake();
          fail();
        }
 catch (        SSLHandshakeException expected) {
        }
        return null;
      }
    }
);
    executor.shutdown();
    try {
      client.startHandshake();
      fail();
    }
 catch (    SSLHandshakeException expected) {
    }
    future.get();
    server.close();
  }
 else {
    try {
      c.serverSocket.accept();
      fail();
    }
 catch (    SSLException expected) {
    }
  }
  client.close();
  c.close();
}
