{
  final Thread self=Thread.currentThread();
  final UncaughtExceptionHandler original=self.getUncaughtExceptionHandler();
  final RuntimeException expectedException=new RuntimeException("expected");
  final TestUncaughtExceptionHandler test=new TestUncaughtExceptionHandler();
  self.setUncaughtExceptionHandler(test);
  final TestSSLContext c=TestSSLContext.create();
  final SSLSocket client=(SSLSocket)c.clientContext.getSocketFactory().createSocket(c.host,c.port);
  final SSLSocket server=(SSLSocket)c.serverSocket.accept();
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Future<Void> future=executor.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      server.startHandshake();
      return null;
    }
  }
);
  executor.shutdown();
  client.addHandshakeCompletedListener(new HandshakeCompletedListener(){
    public void handshakeCompleted(    HandshakeCompletedEvent event){
      throw expectedException;
    }
  }
);
  client.startHandshake();
  future.get();
  client.close();
  server.close();
  c.close();
  assertSame(expectedException,test.actualException);
  self.setUncaughtExceptionHandler(original);
}
