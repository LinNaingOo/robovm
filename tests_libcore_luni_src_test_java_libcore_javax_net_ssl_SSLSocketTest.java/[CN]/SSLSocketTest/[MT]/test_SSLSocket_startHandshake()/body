{
  final TestSSLContext c=TestSSLContext.create();
  SSLSocket client=(SSLSocket)c.clientContext.getSocketFactory().createSocket(c.host,c.port);
  final SSLSocket server=(SSLSocket)c.serverSocket.accept();
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Future<Void> future=executor.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      server.startHandshake();
      assertNotNull(server.getSession());
      try {
        server.getSession().getPeerCertificates();
        fail();
      }
 catch (      SSLPeerUnverifiedException expected) {
      }
      Certificate[] localCertificates=server.getSession().getLocalCertificates();
      assertNotNull(localCertificates);
      TestKeyStore.assertChainLength(localCertificates);
      assertNotNull(localCertificates[0]);
      TestSSLContext.assertServerCertificateChain(c.serverTrustManager,localCertificates);
      TestSSLContext.assertCertificateInKeyStore(localCertificates[0],c.serverKeyStore);
      return null;
    }
  }
);
  executor.shutdown();
  client.startHandshake();
  assertNotNull(client.getSession());
  assertNull(client.getSession().getLocalCertificates());
  Certificate[] peerCertificates=client.getSession().getPeerCertificates();
  assertNotNull(peerCertificates);
  TestKeyStore.assertChainLength(peerCertificates);
  assertNotNull(peerCertificates[0]);
  TestSSLContext.assertServerCertificateChain(c.clientTrustManager,peerCertificates);
  TestSSLContext.assertCertificateInKeyStore(peerCertificates[0],c.serverKeyStore);
  future.get();
  client.close();
  server.close();
  c.close();
}
