{
  TestSSLContext c=TestSSLContext.create(TestKeyStore.getClientCA2(),TestKeyStore.getServer());
  SSLSocket client=(SSLSocket)c.clientContext.getSocketFactory().createSocket(c.host,c.port);
  final SSLSocket server=(SSLSocket)c.serverSocket.accept();
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Future<Void> future=executor.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      try {
        server.startHandshake();
        assertFalse(StandardNames.IS_RI);
      }
 catch (      SSLHandshakeException expected) {
        assertTrue(StandardNames.IS_RI);
      }
      return null;
    }
  }
);
  executor.shutdown();
  try {
    client.startHandshake();
    fail();
  }
 catch (  SSLHandshakeException expected) {
    assertTrue(expected.getCause() instanceof CertificateException);
  }
  client.close();
  server.close();
  future.get();
}
