{
  TestSSLContext c=TestSSLContext.create(TestKeyStore.getClientCertificate(),TestKeyStore.getServer());
  SSLSocket client=(SSLSocket)c.clientContext.getSocketFactory().createSocket(c.host,c.port);
  final SSLSocket server=(SSLSocket)c.serverSocket.accept();
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Future<Void> future=executor.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      assertFalse(server.getWantClientAuth());
      assertFalse(server.getNeedClientAuth());
      server.setWantClientAuth(true);
      assertTrue(server.getWantClientAuth());
      assertFalse(server.getNeedClientAuth());
      server.setNeedClientAuth(true);
      assertFalse(server.getWantClientAuth());
      assertTrue(server.getNeedClientAuth());
      server.setWantClientAuth(true);
      assertTrue(server.getWantClientAuth());
      assertFalse(server.getNeedClientAuth());
      server.startHandshake();
      return null;
    }
  }
);
  executor.shutdown();
  client.startHandshake();
  assertNotNull(client.getSession().getLocalCertificates());
  TestKeyStore.assertChainLength(client.getSession().getLocalCertificates());
  TestSSLContext.assertClientCertificateChain(c.clientTrustManager,client.getSession().getLocalCertificates());
  future.get();
  client.close();
  server.close();
  c.close();
}
