{
  this.sc=Scene.v();
  state=sc.getState();
{
    Chain allClasses=sc.getClasses();
    classToSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    interfaceToSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);
    classToDirSubclasses=new HashMap<SootClass,List>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirSubinterfaces=new HashMap<SootClass,List>(allClasses.size() * 2 + 1,0.7f);
    interfaceToDirImplementers=new HashMap<SootClass,List>(allClasses.size() * 2 + 1,0.7f);
    Iterator classesIt=allClasses.iterator();
    while (classesIt.hasNext()) {
      SootClass c=(SootClass)classesIt.next();
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.isInterface()) {
        interfaceToDirSubinterfaces.put(c,new ArrayList());
        interfaceToDirImplementers.put(c,new ArrayList());
      }
 else       classToDirSubclasses.put(c,new ArrayList());
    }
    classesIt=allClasses.iterator();
    while (classesIt.hasNext()) {
      SootClass c=(SootClass)classesIt.next();
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.hasSuperclass()) {
        if (c.isInterface()) {
          Iterator subIt=c.getInterfaces().iterator();
          while (subIt.hasNext()) {
            SootClass i=(SootClass)subIt.next();
            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;
            List<SootClass> l=interfaceToDirSubinterfaces.get(i);
            if (l != null)             l.add(c);
          }
        }
 else {
          List<SootClass> l=classToDirSubclasses.get(c.getSuperclass());
          l.add(c);
          Iterator subIt=c.getInterfaces().iterator();
          while (subIt.hasNext()) {
            SootClass i=(SootClass)subIt.next();
            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;
            l=interfaceToDirImplementers.get(i);
            if (l != null)             l.add(c);
          }
        }
      }
    }
{
      classesIt=allClasses.iterator();
      while (classesIt.hasNext()) {
        SootClass c=(SootClass)classesIt.next();
        if (c.resolvingLevel() < SootClass.HIERARCHY)         continue;
        if (c.isInterface()) {
          List<SootClass> imp=interfaceToDirImplementers.get(c);
          Set<SootClass> s=new ArraySet();
          Iterator<SootClass> impIt=imp.iterator();
          while (impIt.hasNext()) {
            SootClass c0=impIt.next();
            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;
            s.addAll(getSubclassesOfIncluding(c0));
          }
          imp.clear();
          imp.addAll(s);
        }
      }
    }
    classesIt=allClasses.iterator();
    while (classesIt.hasNext()) {
      SootClass c=(SootClass)classesIt.next();
      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;
      if (c.isInterface()) {
        interfaceToDirSubinterfaces.put(c,Collections.unmodifiableList(interfaceToDirSubinterfaces.get(c)));
        interfaceToDirImplementers.put(c,Collections.unmodifiableList(interfaceToDirImplementers.get(c)));
      }
 else       classToDirSubclasses.put(c,Collections.unmodifiableList(classToDirSubclasses.get(c)));
    }
  }
}
