{
  if (!containsEdge(from,to,label))   return;
  DGEdge edge=new DGEdge(from,to);
  List labels=edgeToLabels.get(edge);
  if (labels == null)   throw new RuntimeException("edge " + edge + " not in graph!");
  List edges=labelToEdges.get(label);
  if (edges == null)   throw new RuntimeException("label " + label + " not in graph!");
  labels.remove(label);
  edges.remove(edge);
  if (labels.isEmpty()) {
    edgeToLabels.remove(edge);
    List succsList=nodeToSuccs.get(from);
    if (succsList == null)     throw new RuntimeException(from + " not in graph!");
    List predsList=nodeToPreds.get(to);
    if (predsList == null)     throw new RuntimeException(to + " not in graph!");
    succsList.remove(to);
    predsList.remove(from);
    if (succsList.isEmpty())     tails.add(from);
    if (predsList.isEmpty())     heads.add(to);
  }
  if (edges.isEmpty())   labelToEdges.remove(label);
}
