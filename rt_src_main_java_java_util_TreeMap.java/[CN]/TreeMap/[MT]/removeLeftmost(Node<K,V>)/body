{
  int index=node.left_idx;
  K key=(index + 1 <= node.right_idx) ? node.keys[index + 1] : null;
  if (node.size == 1) {
    deleteNode(node);
  }
 else   if (node.prev != null && (Node.NODE_SIZE - 1 - node.prev.right_idx) > node.size) {
    Node<K,V> prev=node.prev;
    int size=node.right_idx - index;
    System.arraycopy(node.keys,index + 1,prev.keys,prev.right_idx + 1,size);
    System.arraycopy(node.values,index + 1,prev.values,prev.right_idx + 1,size);
    prev.right_idx+=size;
    prev.size+=size;
    deleteNode(node);
  }
 else   if (node.next != null && (node.next.left_idx) > node.size) {
    Node<K,V> next=node.next;
    int size=node.right_idx - index;
    int next_new_left=next.left_idx - size;
    next.left_idx=next_new_left;
    System.arraycopy(node.keys,index + 1,next.keys,next_new_left,size);
    System.arraycopy(node.values,index + 1,next.values,next_new_left,size);
    next.size+=size;
    deleteNode(node);
  }
 else {
    node.keys[index]=null;
    node.values[index]=null;
    node.left_idx++;
    node.size--;
    Node<K,V> prev=node.prev;
    key=null;
    if (prev != null && prev.size == 1) {
      node.size++;
      node.left_idx--;
      node.keys[node.left_idx]=prev.keys[prev.left_idx];
      node.values[node.left_idx]=prev.values[prev.left_idx];
      deleteNode(prev);
    }
  }
  modCount++;
  size--;
  return key;
}
