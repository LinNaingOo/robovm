{
  K ret=null;
  if (node.prev != null && (Node.NODE_SIZE - 1 - node.prev.right_idx) > node.size) {
    Node<K,V> prev=node.prev;
    int left_idx=node.left_idx;
    int size=index - left_idx;
    System.arraycopy(node.keys,left_idx,prev.keys,prev.right_idx + 1,size);
    System.arraycopy(node.values,left_idx,prev.values,prev.right_idx + 1,size);
    prev.right_idx+=size;
    size=node.right_idx - index;
    System.arraycopy(node.keys,index + 1,prev.keys,prev.right_idx + 1,size);
    System.arraycopy(node.values,index + 1,prev.values,prev.right_idx + 1,size);
    ret=prev.keys[prev.right_idx + 1];
    prev.right_idx+=size;
    prev.size+=(node.size - 1);
    deleteNode(node);
  }
 else   if (node.next != null && (node.next.left_idx) > node.size) {
    Node<K,V> next=node.next;
    int left_idx=node.left_idx;
    int next_new_left=next.left_idx - node.size + 1;
    next.left_idx=next_new_left;
    int size=index - left_idx;
    System.arraycopy(node.keys,left_idx,next.keys,next_new_left,size);
    System.arraycopy(node.values,left_idx,next.values,next_new_left,size);
    next_new_left+=size;
    size=node.right_idx - index;
    System.arraycopy(node.keys,index + 1,next.keys,next_new_left,size);
    System.arraycopy(node.values,index + 1,next.values,next_new_left,size);
    ret=next.keys[next_new_left];
    next.size+=(node.size - 1);
    deleteNode(node);
  }
 else {
    int moveFromRight=node.right_idx - index;
    int left_idx=node.left_idx;
    int moveFromLeft=index - left_idx;
    if (moveFromRight <= moveFromLeft) {
      System.arraycopy(node.keys,index + 1,node.keys,index,moveFromRight);
      System.arraycopy(node.values,index + 1,node.values,index,moveFromRight);
      Node<K,V> next=node.next;
      if (next != null && next.size == 1) {
        node.keys[node.right_idx]=next.keys[next.left_idx];
        node.values[node.right_idx]=next.values[next.left_idx];
        ret=node.keys[index];
        deleteNode(next);
      }
 else {
        node.keys[node.right_idx]=null;
        node.values[node.right_idx]=null;
        node.right_idx--;
        node.size--;
      }
    }
 else {
      System.arraycopy(node.keys,left_idx,node.keys,left_idx + 1,moveFromLeft);
      System.arraycopy(node.values,left_idx,node.values,left_idx + 1,moveFromLeft);
      Node<K,V> prev=node.prev;
      if (prev != null && prev.size == 1) {
        node.keys[left_idx]=prev.keys[prev.left_idx];
        node.values[left_idx]=prev.values[prev.left_idx];
        ret=node.keys[index + 1];
        deleteNode(prev);
      }
 else {
        node.keys[left_idx]=null;
        node.values[left_idx]=null;
        node.left_idx++;
        node.size--;
      }
    }
  }
  modCount++;
  size--;
  return ret;
}
