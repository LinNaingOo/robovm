{
  TreeMap.Entry<K,V> node=null;
  if (toEnd) {
    node=hiInclusive ? this.m.findCeilingEntry(hi) : this.m.findHigherEntry(hi);
  }
 else {
    node=this.m.findSmallestEntry();
  }
  if (node != null && fromStart && (loInclusive ? this.m.keyCompare(lo,node.key) < 0 : this.m.keyCompare(lo,node.key) <= 0)) {
    node=null;
  }
  if (node != null && toEnd && (hiInclusive ? this.m.keyCompare(hi,node.key) > 0 : this.m.keyCompare(hi,node.key) >= 0)) {
    node=null;
  }
  SimpleImmutableEntry<K,V> result=m.newImmutableEntry(node);
  if (null != node) {
    m.remove(node.key);
  }
  return result;
}
