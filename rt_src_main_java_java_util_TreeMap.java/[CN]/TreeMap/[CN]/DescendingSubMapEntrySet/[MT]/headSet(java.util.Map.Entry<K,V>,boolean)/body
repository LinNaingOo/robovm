{
  boolean outRange=true;
  int result=0;
  if (map.toEnd) {
    result=(null != map.comparator()) ? comparator().compare(end.getKey(),map.hi) : toComparable(end.getKey()).compareTo(map.hi);
    outRange=((!map.hiInclusive) && endInclusive) ? result >= 0 : result > 0;
    if (outRange) {
      throw new IllegalArgumentException();
    }
  }
  if (map.fromStart) {
    result=(null != comparator()) ? comparator().compare(end.getKey(),map.lo) : toComparable(end.getKey()).compareTo(map.lo);
    outRange=(((!map.loInclusive) && endInclusive) ? result <= 0 : result < 0);
    if (outRange) {
      throw new IllegalArgumentException();
    }
  }
  if (map.fromStart) {
    return new DescendingSubMapEntrySet<K,V>(new DescendingSubMap<K,V>(map.lo,map.loInclusive,map.m,end.getKey(),endInclusive));
  }
 else {
    return new DescendingSubMapEntrySet<K,V>(new DescendingSubMap<K,V>(map.m,end.getKey(),endInclusive));
  }
}
