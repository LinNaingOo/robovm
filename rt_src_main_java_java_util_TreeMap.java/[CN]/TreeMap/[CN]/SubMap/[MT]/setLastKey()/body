{
  if (lastKeyModCount == backingMap.modCount) {
    return;
  }
  Comparable<K> object=backingMap.comparator == null ? toComparable((K)endKey) : null;
  K key=(K)endKey;
  Node<K,V> node=backingMap.root;
  Node<K,V> foundNode=null;
  int foundIndex=-1;
  TOP_LOOP:   while (node != null) {
    K[] keys=node.keys;
    int left_idx=node.left_idx;
    int result=object != null ? object.compareTo(keys[left_idx]) : -backingMap.comparator.compare(keys[left_idx],key);
    if (result < 0) {
      node=node.left;
    }
 else {
      int right_idx=node.right_idx;
      if (left_idx != right_idx) {
        result=backingMap.cmp(object,key,keys[right_idx]);
      }
      if (result > 0) {
        foundNode=node;
        foundIndex=right_idx;
        node=node.right;
      }
 else       if (result == 0) {
        if (node.left_idx == node.right_idx) {
          foundNode=node.prev;
          if (foundNode != null) {
            foundIndex=foundNode.right_idx - 1;
          }
        }
 else {
          foundNode=node;
          foundIndex=right_idx;
        }
        break;
      }
 else {
        foundNode=node;
        foundIndex=left_idx;
        int low=left_idx + 1, mid=0, high=right_idx - 1;
        while (low <= high) {
          mid=(low + high) >>> 1;
          result=backingMap.cmp(object,key,keys[mid]);
          if (result > 0) {
            foundNode=node;
            foundIndex=mid;
            low=mid + 1;
          }
 else           if (result == 0) {
            foundNode=node;
            foundIndex=mid;
            break TOP_LOOP;
          }
 else {
            high=mid - 1;
          }
        }
        break TOP_LOOP;
      }
    }
  }
  if (foundNode != null && !checkLowerBound(foundNode.keys[foundIndex])) {
    foundNode=null;
  }
  lastKeyNode=foundNode;
  lastKeyIndex=foundIndex;
  lastKeyModCount=backingMap.modCount;
}
