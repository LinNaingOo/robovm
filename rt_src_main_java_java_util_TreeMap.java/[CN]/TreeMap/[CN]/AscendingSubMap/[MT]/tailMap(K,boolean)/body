{
  if (fromStart && ((!loInclusive && inclusive) ? m.keyCompare(start,lo) <= 0 : m.keyCompare(start,lo) < 0)) {
    throw new IllegalArgumentException();
  }
  if (toEnd && ((!hiInclusive && inclusive) ? m.keyCompare(start,hi) >= 0 : m.keyCompare(start,hi) > 0)) {
    throw new IllegalArgumentException();
  }
  if (checkLowerBound(start)) {
    if (this.toEnd) {
      return new AscendingSubMap<K,V>(start,inclusive,m,this.hi,this.hiInclusive);
    }
    return new AscendingSubMap<K,V>(start,inclusive,m);
  }
 else {
    return this;
  }
}
