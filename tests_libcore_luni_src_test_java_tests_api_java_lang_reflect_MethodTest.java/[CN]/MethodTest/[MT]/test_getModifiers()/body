{
  Class cl=TestMethod.class;
  int mods=0;
  Method mth=null;
  int mask=0;
  try {
    mth=cl.getMethod("pustatic",new Class[0]);
    mods=mth.getModifiers();
  }
 catch (  Exception e) {
    fail("Exception during getModfiers test: " + e.toString());
  }
  mask=Modifier.PUBLIC | Modifier.STATIC;
  assertTrue("Incorrect modifiers returned",(mods | mask) == mask);
  try {
    mth=cl.getDeclaredMethod("prstatic",new Class[0]);
    mods=mth.getModifiers();
  }
 catch (  Exception e) {
    fail("Exception during getModfiers test: " + e.toString());
  }
  mask=Modifier.PRIVATE | Modifier.STATIC;
  assertTrue("Incorrect modifiers returned",(mods | mask) == mask);
  try {
    mth=cl.getDeclaredMethod("pustatsynch",new Class[0]);
    mods=mth.getModifiers();
  }
 catch (  Exception e) {
    fail("Exception during getModfiers test: " + e.toString());
  }
  mask=(Modifier.PUBLIC | Modifier.STATIC) | Modifier.SYNCHRONIZED;
  assertTrue("Incorrect modifiers returned",(mods | mask) == mask);
  try {
    mth=cl.getDeclaredMethod("pustatsynchnat",new Class[0]);
    mods=mth.getModifiers();
  }
 catch (  Exception e) {
    fail("Exception during getModfiers test: " + e.toString());
  }
  mask=((Modifier.PUBLIC | Modifier.STATIC) | Modifier.SYNCHRONIZED) | Modifier.NATIVE;
  assertTrue("Incorrect modifiers returned",(mods | mask) == mask);
  cl=AbstractTestMethod.class;
  try {
    mth=cl.getDeclaredMethod("puabs",new Class[0]);
    mods=mth.getModifiers();
  }
 catch (  Exception e) {
    fail("Exception during getModfiers test: " + e.toString());
  }
  mask=Modifier.PUBLIC | Modifier.ABSTRACT;
  assertTrue("Incorrect modifiers returned",(mods | mask) == mask);
}
