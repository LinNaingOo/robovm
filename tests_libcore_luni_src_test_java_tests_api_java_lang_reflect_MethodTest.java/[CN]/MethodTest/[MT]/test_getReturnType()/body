{
  Class cl=TestMethod.class;
  Method mth=null;
  try {
    mth=cl.getMethod("charMethod",new Class[0]);
  }
 catch (  Exception e) {
    fail("Exception during getReturnType test : " + e.getMessage());
  }
  assertTrue("Gave incorrect returne type, wanted char",mth.getReturnType().equals(char.class));
  try {
    mth=cl.getMethod("longMethod",new Class[0]);
  }
 catch (  Exception e) {
    fail("Exception during getReturnType test : " + e.getMessage());
  }
  assertTrue("Gave incorrect returne type, wanted long",mth.getReturnType().equals(long.class));
  try {
    mth=cl.getMethod("shortMethod",new Class[0]);
  }
 catch (  Exception e) {
    fail("Exception during getReturnType test : " + e.getMessage());
  }
  assertTrue("Gave incorrect returne type, wanted short",mth.getReturnType().equals(short.class));
  try {
    mth=cl.getMethod("intMethod",new Class[0]);
  }
 catch (  Exception e) {
    fail("Exception during getReturnType test : " + e.getMessage());
  }
  assertTrue("Gave incorrect returne type, wanted int: " + mth.getReturnType(),mth.getReturnType().equals(int.class));
  try {
    mth=cl.getMethod("doubleMethod",new Class[0]);
  }
 catch (  Exception e) {
    fail("Exception during getReturnType test : " + e.getMessage());
  }
  assertTrue("Gave incorrect returne type, wanted double",mth.getReturnType().equals(double.class));
  try {
    mth=cl.getMethod("byteMethod",new Class[0]);
  }
 catch (  Exception e) {
    fail("Exception during getReturnType test : " + e.getMessage());
  }
  assertTrue("Gave incorrect returne type, wanted byte",mth.getReturnType().equals(byte.class));
  try {
    mth=cl.getMethod("byteMethod",new Class[0]);
  }
 catch (  Exception e) {
    fail("Exception during getReturnType test:" + e.toString());
  }
  assertTrue("Gave incorrect returne type, wanted byte",mth.getReturnType().equals(byte.class));
  try {
    mth=cl.getMethod("objectMethod",new Class[0]);
  }
 catch (  Exception e) {
    fail("Exception during getReturnType test : " + e.getMessage());
  }
  assertTrue("Gave incorrect returne type, wanted Object",mth.getReturnType().equals(Object.class));
  try {
    mth=cl.getMethod("voidMethod",new Class[0]);
  }
 catch (  Exception e) {
    fail("Exception during getReturnType test : " + e.getMessage());
  }
  assertTrue("Gave incorrect returne type, wanted void",mth.getReturnType().equals(void.class));
}
