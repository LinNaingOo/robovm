{
  boolean finished=false;
  boolean modified=false;
  while (true) {
    categorize();
    if (single_child_not_null.size() != 0) {
      finished=false;
      modified=true;
      Iterator<TypeVariable> i=single_child_not_null.iterator();
      while (i.hasNext()) {
        TypeVariable var=i.next();
        if (single_child_not_null.contains(var)) {
          TypeVariable child=var.children().get(0);
          var=var.union(child);
        }
      }
    }
    if (finished) {
      if (single_soft_parent.size() != 0) {
        finished=false;
        modified=true;
        Iterator<TypeVariable> i=single_soft_parent.iterator();
        while (i.hasNext()) {
          TypeVariable var=i.next();
          if (single_soft_parent.contains(var)) {
            TypeVariable parent=var.parents().get(0);
            var=var.union(parent);
          }
        }
      }
      if (single_hard_parent.size() != 0) {
        finished=false;
        modified=true;
        Iterator<TypeVariable> i=single_hard_parent.iterator();
        while (i.hasNext()) {
          TypeVariable var=i.next();
          if (single_hard_parent.contains(var)) {
            TypeVariable parent=var.parents().get(0);
            debug_vars("union single parent\n " + var + "\n "+ parent);
            var=var.union(parent);
          }
        }
      }
      if (single_null_child.size() != 0) {
        finished=false;
        modified=true;
        Iterator<TypeVariable> i=single_null_child.iterator();
        while (i.hasNext()) {
          TypeVariable var=i.next();
          if (single_null_child.contains(var)) {
            TypeVariable child=var.children().get(0);
            var=var.union(child);
          }
        }
      }
      if (finished) {
        break;
      }
      continue;
    }
    if (modified) {
      modified=false;
      continue;
    }
    finished=true;
    multiple_children:     for (    TypeVariable var : multiple_children) {
      TypeNode lca=null;
      List<TypeVariable> children_to_remove=new LinkedList<TypeVariable>();
      var.fixChildren();
      for (      TypeVariable child : var.children()) {
        TypeNode type=child.type();
        if (type != null && type.isNull()) {
          var.removeChild(child);
        }
 else         if (type != null && type.isClass()) {
          children_to_remove.add(child);
          if (lca == null) {
            lca=type;
          }
 else {
            lca=lca.lcaIfUnique(type);
            if (lca == null) {
              if (DEBUG) {
                G.v().out.println("==++==" + stmtBody.getMethod().getDeclaringClass().getName() + "."+ stmtBody.getMethod().getName());
              }
              continue multiple_children;
            }
          }
        }
      }
      if (lca != null) {
        for (        TypeVariable child : children_to_remove) {
          var.removeChild(child);
        }
        var.addChild(typeVariable(lca));
      }
    }
    for (    TypeVariable var : multiple_parents) {
      LinkedList<TypeVariable> hp=new LinkedList<TypeVariable>();
      var.fixParents();
      for (      TypeVariable parent : var.parents()) {
        TypeNode type=parent.type();
        if (type != null) {
          Iterator<TypeVariable> k=hp.iterator();
          while (k.hasNext()) {
            TypeVariable otherparent=k.next();
            TypeNode othertype=otherparent.type();
            if (type.hasDescendant(othertype)) {
              var.removeParent(parent);
              type=null;
              break;
            }
            if (type.hasAncestor(othertype)) {
              var.removeParent(otherparent);
              k.remove();
            }
          }
          if (type != null) {
            hp.add(parent);
          }
        }
      }
    }
  }
}
