{
  String testName=test.getClass().getSimpleName();
  NullVMC nullvmc=new NullVMC();
  nullvmc.addInputs(new File("target/rt-test-classes"),new File("src/test/c/assert.c"),new File("src/test/c/native.c"),new File("src/test/c/" + testName + ".c"));
  for (  Class<?> c : classes) {
    File f=new File("target/jasmin-classes/" + Type.getInternalName(c) + ".class");
    if (!f.exists()) {
      f=new File("target/test-classes/" + Type.getInternalName(c) + ".class");
    }
    nullvmc.addInput(f);
  }
  nullvmc.addLibDir(new File("../gc/lib"));
  nullvmc.addIncludeDir(new File("../gc/include"));
  nullvmc.setSkipRtLib(true);
  nullvmc.setClean(true);
  nullvmc.setWork(new File("target/" + testName + ".build"));
  nullvmc.setOutput(new File("target/" + testName));
  nullvmc.run();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  CommandLine commandLine=CommandLine.parse("target/" + testName);
  Executor executor=new DefaultExecutor();
  executor.setExitValue(0);
  executor.setStreamHandler(new PumpStreamHandler(out,System.err));
  executor.execute(commandLine);
  String actual=new String(out.toByteArray(),"UTF-8");
  String expected=test.run();
  assertEquals(expected,actual);
}
