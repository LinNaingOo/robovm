{
  if (bytes == null) {
    throw new NullPointerException();
  }
  if (offset < 0 || offset > bytes.length || count < 0 || count > bytes.length - offset) {
    throw new IndexOutOfBoundsException();
  }
  if (count == 0) {
    return 0;
  }
  if (!isConnected) {
    throw new IOException(Messages.getString("luni.CB"));
  }
  if (buffer == null) {
    throw new IOException(Messages.getString("luni.CC"));
  }
  if (lastWriter != null && !lastWriter.isAlive() && (in < 0)) {
    throw new IOException(Messages.getString("luni.CD"));
  }
  lastReader=Thread.currentThread();
  try {
    int attempts=3;
    while (in == -1) {
      if (isClosed) {
        return -1;
      }
      if ((attempts-- <= 0) && lastWriter != null && !lastWriter.isAlive()) {
        throw new IOException(Messages.getString("luni.CE"));
      }
      notifyAll();
      wait(1000);
    }
  }
 catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
  int copyLength=0;
  if (out >= in) {
    copyLength=count > (buffer.length - out) ? buffer.length - out : count;
    System.arraycopy(buffer,out,bytes,offset,copyLength);
    out+=copyLength;
    if (out == buffer.length) {
      out=0;
    }
    if (out == in) {
      in=-1;
      out=0;
    }
  }
  if (copyLength == count || in == -1) {
    return copyLength;
  }
  int bytesCopied=copyLength;
  copyLength=in - out > (count - bytesCopied) ? count - bytesCopied : in - out;
  System.arraycopy(buffer,out,bytes,offset + bytesCopied,copyLength);
  out+=copyLength;
  if (out == in) {
    in=-1;
    out=0;
  }
  return bytesCopied + copyLength;
}
