{
  final File implFile=createAnnoImpl(Anno4.class);
  Class<?> implClass=loadClassFromFile(implFile,Anno4.class.getName() + "$Impl");
  Anno4 impl1=(Anno4)implClass.getMethod("$create").invoke(null);
  assertSame(Anno4.class,impl1.annotationType());
  assertEquals(impl1,impl1);
  assertNotSame(impl1.booleans2(),impl1.booleans2());
  assertNotSame(impl1.bytes2(),impl1.bytes2());
  assertNotSame(impl1.shorts2(),impl1.shorts2());
  assertNotSame(impl1.chars2(),impl1.chars2());
  assertNotSame(impl1.ints2(),impl1.ints2());
  assertNotSame(impl1.longs2(),impl1.longs2());
  assertNotSame(impl1.floats2(),impl1.floats2());
  assertNotSame(impl1.doubles2(),impl1.doubles2());
  assertNotSame(impl1.strings2(),impl1.strings2());
  Anno4 impl2=(Anno4)implClass.getMethod("$create").invoke(null);
  assertNotSame(impl1,impl2);
  assertEquals(impl2,impl1);
  Anno4 annotation=AnnoHost.class.getAnnotation(Anno4.class);
  assertFalse(impl1.equals(annotation));
  assertFalse(annotation.hashCode() == impl1.hashCode());
  assertEquals(annotation.boolean2(),impl1.boolean2());
  assertEquals(annotation.byte2(),impl1.byte2());
  assertEquals(annotation.short2(),impl1.short2());
  assertEquals(annotation.char2(),impl1.char2());
  assertEquals(annotation.int2(),impl1.int2());
  assertEquals(annotation.long2(),impl1.long2());
  assertEquals(annotation.float2(),impl1.float2(),0.0f);
  assertEquals(annotation.double2(),impl1.double2(),0.0);
  assertEquals(annotation.string2(),impl1.string2());
  assertEquals(annotation.class2(),impl1.class2());
  assertEquals(annotation.anno2(),impl1.anno2());
  assertTrue(Arrays.equals(annotation.booleans2(),impl1.booleans2()));
  assertArrayEquals(annotation.bytes2(),impl1.bytes2());
  assertArrayEquals(annotation.shorts2(),impl1.shorts2());
  assertArrayEquals(annotation.chars2(),impl1.chars2());
  assertArrayEquals(annotation.ints2(),impl1.ints2());
  assertArrayEquals(annotation.longs2(),impl1.longs2());
  assertTrue(Arrays.equals(annotation.floats2(),impl1.floats2()));
  assertTrue(Arrays.equals(annotation.doubles2(),impl1.doubles2()));
  assertArrayEquals(annotation.strings2(),impl1.strings2());
  setAnnotationMemberValue(impl1,"boolean1",annotation.boolean1());
  setAnnotationMemberValue(impl1,"byte1",annotation.byte1());
  setAnnotationMemberValue(impl1,"short1",annotation.short1());
  setAnnotationMemberValue(impl1,"char1",annotation.char1());
  setAnnotationMemberValue(impl1,"int1",annotation.int1());
  setAnnotationMemberValue(impl1,"long1",annotation.long1());
  setAnnotationMemberValue(impl1,"float1",annotation.float1());
  setAnnotationMemberValue(impl1,"double1",annotation.double1());
  setAnnotationMemberValue(impl1,"string1",annotation.string1());
  setAnnotationMemberValue(impl1,"class1",annotation.class1());
  setAnnotationMemberValue(impl1,"anno1",annotation.anno1());
  setAnnotationMemberValue(impl1,"booleans1",annotation.booleans1());
  setAnnotationMemberValue(impl1,"bytes1",annotation.bytes1());
  setAnnotationMemberValue(impl1,"shorts1",annotation.shorts1());
  setAnnotationMemberValue(impl1,"chars1",annotation.chars1());
  setAnnotationMemberValue(impl1,"ints1",annotation.ints1());
  setAnnotationMemberValue(impl1,"longs1",annotation.longs1());
  setAnnotationMemberValue(impl1,"floats1",annotation.floats1());
  setAnnotationMemberValue(impl1,"doubles1",annotation.doubles1());
  setAnnotationMemberValue(impl1,"strings1",annotation.strings1());
  assertEquals(annotation.boolean1(),impl1.boolean1());
  assertEquals(annotation.byte1(),impl1.byte1());
  assertEquals(annotation.short1(),impl1.short1());
  assertEquals(annotation.char1(),impl1.char1());
  assertEquals(annotation.int1(),impl1.int1());
  assertEquals(annotation.long1(),impl1.long1());
  assertEquals(annotation.float1(),impl1.float1(),0.0f);
  assertEquals(annotation.double1(),impl1.double1(),0.0);
  assertEquals(annotation.string1(),impl1.string1());
  assertEquals(annotation.class1(),impl1.class1());
  assertEquals(annotation.anno1(),impl1.anno1());
  assertTrue(Arrays.equals(annotation.booleans1(),impl1.booleans1()));
  assertArrayEquals(annotation.bytes1(),impl1.bytes1());
  assertArrayEquals(annotation.shorts1(),impl1.shorts1());
  assertArrayEquals(annotation.chars1(),impl1.chars1());
  assertArrayEquals(annotation.ints1(),impl1.ints1());
  assertArrayEquals(annotation.longs1(),impl1.longs1());
  assertTrue(Arrays.equals(annotation.floats1(),impl1.floats1()));
  assertTrue(Arrays.equals(annotation.doubles1(),impl1.doubles1()));
  assertArrayEquals(annotation.strings1(),impl1.strings1());
  assertTrue(annotation.equals(impl1));
  assertTrue(impl1.equals(annotation));
  assertEquals(annotation.hashCode(),impl1.hashCode());
  assertSame(annotation.annotationType(),impl1.annotationType());
  assertEquals(annotation.toString().length(),impl1.toString().length());
  assertEquals(sum(annotation.toString()),sum(impl1.toString()));
}
