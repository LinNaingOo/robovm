{
  TestSSLContext c=TestSSLContext.create();
  SSLEngine e=c.clientContext.createSSLEngine();
  String[] defaultCipherSuites=e.getEnabledCipherSuites();
  String[] defaultProtocols=e.getEnabledProtocols();
  String[] supportedCipherSuites=e.getSupportedCipherSuites();
  String[] supportedProtocols=e.getSupportedProtocols();
{
    SSLParameters p=new SSLParameters();
    e.setSSLParameters(p);
    assertEquals(Arrays.asList(defaultCipherSuites),Arrays.asList(e.getEnabledCipherSuites()));
    assertEquals(Arrays.asList(defaultProtocols),Arrays.asList(e.getEnabledProtocols()));
  }
{
    SSLParameters p=new SSLParameters(supportedCipherSuites,supportedProtocols);
    e.setSSLParameters(p);
    assertEquals(Arrays.asList(supportedCipherSuites),Arrays.asList(e.getEnabledCipherSuites()));
    assertEquals(Arrays.asList(supportedProtocols),Arrays.asList(e.getEnabledProtocols()));
  }
{
    SSLParameters p=new SSLParameters();
    p.setNeedClientAuth(true);
    assertFalse(e.getNeedClientAuth());
    assertFalse(e.getWantClientAuth());
    e.setSSLParameters(p);
    assertTrue(e.getNeedClientAuth());
    assertFalse(e.getWantClientAuth());
    p.setWantClientAuth(true);
    assertTrue(e.getNeedClientAuth());
    assertFalse(e.getWantClientAuth());
    e.setSSLParameters(p);
    assertFalse(e.getNeedClientAuth());
    assertTrue(e.getWantClientAuth());
    p.setWantClientAuth(false);
    assertFalse(e.getNeedClientAuth());
    assertTrue(e.getWantClientAuth());
    e.setSSLParameters(p);
    assertFalse(e.getNeedClientAuth());
    assertFalse(e.getWantClientAuth());
  }
  c.close();
}
