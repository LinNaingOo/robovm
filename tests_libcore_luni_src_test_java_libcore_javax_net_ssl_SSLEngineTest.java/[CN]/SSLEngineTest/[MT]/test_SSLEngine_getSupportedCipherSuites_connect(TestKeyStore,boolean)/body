{
  TestSSLContext c=TestSSLContext.create(testKeyStore,testKeyStore);
  TestSSLContext cWithWrongPrivateKeys;
{
    KeyManager originalKeyManager=testKeyStore.keyManagers[0];
    testKeyStore.keyManagers[0]=new RandomPrivateKeyX509ExtendedKeyManager(c.serverKeyManager);
    cWithWrongPrivateKeys=TestSSLContext.create(testKeyStore,testKeyStore);
    testKeyStore.keyManagers[0]=originalKeyManager;
  }
  String[] cipherSuites=c.clientContext.createSSLEngine().getSupportedCipherSuites();
  for (  String cipherSuite : cipherSuites) {
    boolean errorExpected=StandardNames.IS_RI && cipherSuite.endsWith("_SHA256");
    try {
      if (cipherSuite.equals(StandardNames.CIPHER_SUITE_SECURE_RENEGOTIATION)) {
        continue;
      }
      if (cipherSuite.startsWith("TLS_KRB5_")) {
        continue;
      }
      final String[] cipherSuiteArray=(secureRenegotiation ? new String[]{cipherSuite,StandardNames.CIPHER_SUITE_SECURE_RENEGOTIATION} : new String[]{cipherSuite});
      assertConnected(TestSSLEnginePair.create(c,new TestSSLEnginePair.Hooks(){
        @Override void beforeBeginHandshake(        SSLEngine client,        SSLEngine server){
          client.setEnabledCipherSuites(cipherSuiteArray);
          server.setEnabledCipherSuites(cipherSuiteArray);
        }
      }
));
      assertFalse(errorExpected);
      if (!cipherSuite.contains("_anon_")) {
        try {
          TestSSLEnginePair p=TestSSLEnginePair.create(cWithWrongPrivateKeys,new TestSSLEnginePair.Hooks(){
            @Override void beforeBeginHandshake(            SSLEngine client,            SSLEngine server){
              client.setEnabledCipherSuites(cipherSuiteArray);
              server.setEnabledCipherSuites(cipherSuiteArray);
            }
          }
);
          assertConnected(p);
          fail("Handshake succeeded for " + cipherSuite + " despite server not having the correct private key");
        }
 catch (        IOException expected) {
        }
      }
    }
 catch (    Exception maybeExpected) {
      if (!errorExpected) {
        throw new Exception("Problem trying to connect cipher suite " + cipherSuite,maybeExpected);
      }
    }
  }
  c.close();
}
