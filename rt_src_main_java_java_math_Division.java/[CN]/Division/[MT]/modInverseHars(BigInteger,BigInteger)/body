{
  BigInteger u, v, r, s, temp;
  if (a.compareTo(m) == BigInteger.LESS) {
    u=m;
    v=a;
    r=BigInteger.ZERO;
    s=BigInteger.ONE;
  }
 else {
    v=m;
    u=a;
    s=BigInteger.ZERO;
    r=BigInteger.ONE;
  }
  int uLen=u.bitLength();
  int vLen=v.bitLength();
  int f=uLen - vLen;
  while (vLen > 1) {
    if (u.sign == v.sign) {
      u=u.subtract(v.shiftLeft(f));
      r=r.subtract(s.shiftLeft(f));
    }
 else {
      u=u.add(v.shiftLeft(f));
      r=r.add(s.shiftLeft(f));
    }
    uLen=u.abs().bitLength();
    vLen=v.abs().bitLength();
    f=uLen - vLen;
    if (f < 0) {
      temp=u;
      u=v;
      v=temp;
      temp=r;
      r=s;
      s=temp;
      f=-f;
      vLen=uLen;
    }
  }
  if (v.sign == 0) {
    return BigInteger.ZERO;
  }
  if (v.sign < 0) {
    s=s.negate();
  }
  if (s.compareTo(m) == BigInteger.GREATER) {
    return s.subtract(m);
  }
  if (s.sign < 0) {
    return s.add(m);
  }
  return s;
}
