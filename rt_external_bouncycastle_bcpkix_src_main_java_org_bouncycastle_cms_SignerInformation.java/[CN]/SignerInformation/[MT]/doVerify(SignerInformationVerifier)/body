{
  String encName=CMSSignedHelper.INSTANCE.getEncryptionAlgName(this.getEncryptionAlgOID());
  ContentVerifier contentVerifier;
  try {
    contentVerifier=verifier.getContentVerifier(encryptionAlgorithm,info.getDigestAlgorithm());
  }
 catch (  OperatorCreationException e) {
    throw new CMSException("can't create content verifier: " + e.getMessage(),e);
  }
  try {
    OutputStream sigOut=contentVerifier.getOutputStream();
    if (resultDigest == null) {
      DigestCalculator calc=verifier.getDigestCalculator(this.getDigestAlgorithmID());
      if (content != null) {
        OutputStream digOut=calc.getOutputStream();
        if (signedAttributeSet == null) {
          if (contentVerifier instanceof RawContentVerifier) {
            content.write(digOut);
          }
 else {
            OutputStream cOut=new TeeOutputStream(digOut,sigOut);
            content.write(cOut);
            cOut.close();
          }
        }
 else {
          content.write(digOut);
          sigOut.write(this.getEncodedSignedAttributes());
        }
        digOut.close();
      }
 else       if (signedAttributeSet != null) {
        sigOut.write(this.getEncodedSignedAttributes());
      }
 else {
        throw new CMSException("data not encapsulated in signature - use detached constructor.");
      }
      resultDigest=calc.getDigest();
    }
 else {
      if (signedAttributeSet == null) {
        if (content != null) {
          content.write(sigOut);
        }
      }
 else {
        sigOut.write(this.getEncodedSignedAttributes());
      }
    }
    sigOut.close();
  }
 catch (  IOException e) {
    throw new CMSException("can't process mime object to create signature.",e);
  }
catch (  OperatorCreationException e) {
    throw new CMSException("can't create digest calculator: " + e.getMessage(),e);
  }
{
    ASN1Primitive validContentType=getSingleValuedSignedAttribute(CMSAttributes.contentType,"content-type");
    if (validContentType == null) {
      if (!isCounterSignature && signedAttributeSet != null) {
        throw new CMSException("The content-type attribute type MUST be present whenever signed attributes are present in signed-data");
      }
    }
 else {
      if (isCounterSignature) {
        throw new CMSException("[For counter signatures,] the signedAttributes field MUST NOT contain a content-type attribute");
      }
      if (!(validContentType instanceof ASN1ObjectIdentifier)) {
        throw new CMSException("content-type attribute value not of ASN.1 type 'OBJECT IDENTIFIER'");
      }
      ASN1ObjectIdentifier signedContentType=(ASN1ObjectIdentifier)validContentType;
      if (!signedContentType.equals(contentType)) {
        throw new CMSException("content-type attribute value does not match eContentType");
      }
    }
  }
{
    ASN1Primitive validMessageDigest=getSingleValuedSignedAttribute(CMSAttributes.messageDigest,"message-digest");
    if (validMessageDigest == null) {
      if (signedAttributeSet != null) {
        throw new CMSException("the message-digest signed attribute type MUST be present when there are any signed attributes present");
      }
    }
 else {
      if (!(validMessageDigest instanceof ASN1OctetString)) {
        throw new CMSException("message-digest attribute value not of ASN.1 type 'OCTET STRING'");
      }
      ASN1OctetString signedMessageDigest=(ASN1OctetString)validMessageDigest;
      if (!Arrays.constantTimeAreEqual(resultDigest,signedMessageDigest.getOctets())) {
        throw new CMSSignerDigestMismatchException("message-digest attribute value does not match calculated value");
      }
    }
  }
{
    AttributeTable signedAttrTable=this.getSignedAttributes();
    if (signedAttrTable != null && signedAttrTable.getAll(CMSAttributes.counterSignature).size() > 0) {
      throw new CMSException("A countersignature attribute MUST NOT be a signed attribute");
    }
    AttributeTable unsignedAttrTable=this.getUnsignedAttributes();
    if (unsignedAttrTable != null) {
      ASN1EncodableVector csAttrs=unsignedAttrTable.getAll(CMSAttributes.counterSignature);
      for (int i=0; i < csAttrs.size(); ++i) {
        Attribute csAttr=(Attribute)csAttrs.get(i);
        if (csAttr.getAttrValues().size() < 1) {
          throw new CMSException("A countersignature attribute MUST contain at least one AttributeValue");
        }
      }
    }
  }
  try {
    if (signedAttributeSet == null && resultDigest != null) {
      if (contentVerifier instanceof RawContentVerifier) {
        RawContentVerifier rawVerifier=(RawContentVerifier)contentVerifier;
        if (encName.equals("RSA")) {
          DigestInfo digInfo=new DigestInfo(new AlgorithmIdentifier(digestAlgorithm.getAlgorithm(),DERNull.INSTANCE),resultDigest);
          return rawVerifier.verify(digInfo.getEncoded(ASN1Encoding.DER),this.getSignature());
        }
        return rawVerifier.verify(resultDigest,this.getSignature());
      }
    }
    return contentVerifier.verify(this.getSignature());
  }
 catch (  IOException e) {
    throw new CMSException("can't process mime object to create signature.",e);
  }
}
