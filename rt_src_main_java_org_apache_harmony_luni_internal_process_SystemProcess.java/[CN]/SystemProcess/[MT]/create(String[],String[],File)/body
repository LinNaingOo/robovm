{
  final byte[][] progBytes, envBytes;
  progBytes=new byte[progArray.length][];
  for (int i=0; i < progArray.length; i++) {
    progBytes[i]=Util.getBytes(progArray[i]);
  }
  envBytes=new byte[envp.length][];
  for (int i=0; i < envp.length; i++) {
    envBytes[i]=envp[i].getBytes();
  }
  final SystemProcess p=new SystemProcess();
  p.lock=new Object();
  Runnable waitingThread=new Runnable(){
    public void run(){
      long[] procVals=null;
      try {
        procVals=createImpl(p,progBytes,envBytes,directory == null ? null : Util.getBytes(directory.getPath()));
      }
 catch (      Throwable e) {
synchronized (p.lock) {
          p.exception=e;
          p.waiterStarted=true;
          p.lock.notifyAll();
        }
        return;
      }
      p.handle=procVals[0];
      p.in=new BufferedOutputStream(new ProcessOutputStream(procVals[1]));
      p.out=new BufferedInputStream(new ProcessInputStream(procVals[2]));
      p.err=new BufferedInputStream(new ProcessInputStream(procVals[3]));
synchronized (p.lock) {
        p.waiterStarted=true;
        p.lock.notifyAll();
      }
      p.exitCode=p.waitForCompletionImpl();
synchronized (p.lock) {
        p.closeImpl();
        p.handle=-1;
        p.exitCodeAvailable=true;
        try {
          p.in.close();
        }
 catch (        IOException e) {
        }
        p.lock.notifyAll();
      }
    }
  }
;
  Thread wait=new Thread(waitingThread);
  wait.setDaemon(true);
  wait.start();
synchronized (p.lock) {
    boolean interrupted=false;
    while (!p.waiterStarted) {
      try {
        p.lock.wait();
      }
 catch (      InterruptedException e) {
        interrupted=true;
      }
    }
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
    if (p.exception != null) {
      p.exception.fillInStackTrace();
      if (p.exception instanceof IOException) {
        throw (IOException)p.exception;
      }
 else       if (p.exception instanceof Error) {
        throw (Error)p.exception;
      }
 else {
        throw (RuntimeException)p.exception;
      }
    }
  }
  return p;
}
