{
  final X509CertificateHolder certHolder;
  try {
    certHolder=new JcaX509CertificateHolder(certificate);
  }
 catch (  CertificateEncodingException e) {
    throw new OperatorCreationException("cannot process certificate: " + e.getMessage(),e);
  }
  return new ContentVerifierProvider(){
    private SignatureOutputStream stream;
    public boolean hasAssociatedCertificate(){
      return true;
    }
    public X509CertificateHolder getAssociatedCertificate(){
      return certHolder;
    }
    public ContentVerifier get(    AlgorithmIdentifier algorithm) throws OperatorCreationException {
      try {
        Signature sig=helper.createSignature(algorithm);
        sig.initVerify(certificate.getPublicKey());
        stream=new SignatureOutputStream(sig);
      }
 catch (      GeneralSecurityException e) {
        throw new OperatorCreationException("exception on setup: " + e,e);
      }
      Signature rawSig=createRawSig(algorithm,certificate.getPublicKey());
      if (rawSig != null) {
        return new RawSigVerifier(algorithm,stream,rawSig);
      }
 else {
        return new SigVerifier(algorithm,stream);
      }
    }
  }
;
}
