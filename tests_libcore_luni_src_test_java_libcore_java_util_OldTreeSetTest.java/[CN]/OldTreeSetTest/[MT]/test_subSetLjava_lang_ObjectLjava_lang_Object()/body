{
  final int startPos=objArray.length / 4;
  final int endPos=3 * objArray.length / 4;
  SortedSet aSubSet=ts.subSet(objArray[startPos],objArray[endPos]);
  assertTrue("Subset has wrong number of elements",aSubSet.size() == (endPos - startPos));
  for (int counter=startPos; counter < endPos; counter++)   assertTrue("Subset does not contain all the elements it should",aSubSet.contains(objArray[counter]));
  try {
    ts.subSet(objArray[3],objArray[0]);
    fail("IllegalArgumentException expected");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    ts.subSet(null,objArray[3]);
    fail("NullPointerException expected");
  }
 catch (  NullPointerException e) {
  }
  try {
    ts.subSet(objArray[3],null);
    fail("NullPointerException expected");
  }
 catch (  NullPointerException e) {
  }
  try {
    ts.subSet(objArray[3],this);
    fail("ClassCastException expected");
  }
 catch (  ClassCastException e) {
  }
}
