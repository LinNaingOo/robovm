{
  if (!config.isClean() && output.exists() && output.lastModified() >= input.lastModified()) {
    config.getLogger().debug("Not stripping unchanged archive file %s",input);
    return;
  }
  ZipFile archive=null;
  try {
    archive=new ZipFile(input);
    File strippedFile=output;
    config.getLogger().debug("Creating stripped archive file %s",strippedFile);
    ZipOutputStream out=null;
    try {
      out=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(strippedFile)));
      Enumeration<? extends ZipEntry> entries=archive.entries();
      while (entries.hasMoreElements()) {
        ZipEntry entry=entries.nextElement();
        if (entry.getName().toLowerCase().endsWith(".class")) {
          continue;
        }
        ZipEntry newEntry=new ZipEntry(entry.getName());
        newEntry.setTime(entry.getTime());
        out.putNextEntry(newEntry);
        InputStream in=null;
        try {
          in=archive.getInputStream(entry);
          IOUtils.copy(in,out);
          out.closeEntry();
        }
  finally {
          IOUtils.closeQuietly(in);
        }
      }
    }
  finally {
      IOUtils.closeQuietly(out);
    }
  }
  finally {
    try {
      archive.close();
    }
 catch (    Throwable t) {
    }
  }
}
