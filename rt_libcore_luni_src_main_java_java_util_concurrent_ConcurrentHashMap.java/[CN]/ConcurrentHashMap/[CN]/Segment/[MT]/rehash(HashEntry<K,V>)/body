{
  HashEntry<K,V>[] oldTable=table;
  int oldCapacity=oldTable.length;
  int newCapacity=oldCapacity << 1;
  threshold=(int)(newCapacity * loadFactor);
  HashEntry<K,V>[] newTable=(HashEntry<K,V>[])new HashEntry<?,?>[newCapacity];
  int sizeMask=newCapacity - 1;
  for (int i=0; i < oldCapacity; i++) {
    HashEntry<K,V> e=oldTable[i];
    if (e != null) {
      HashEntry<K,V> next=e.next;
      int idx=e.hash & sizeMask;
      if (next == null)       newTable[idx]=e;
 else {
        HashEntry<K,V> lastRun=e;
        int lastIdx=idx;
        for (HashEntry<K,V> last=next; last != null; last=last.next) {
          int k=last.hash & sizeMask;
          if (k != lastIdx) {
            lastIdx=k;
            lastRun=last;
          }
        }
        newTable[lastIdx]=lastRun;
        for (HashEntry<K,V> p=e; p != lastRun; p=p.next) {
          V v=p.value;
          int h=p.hash;
          int k=h & sizeMask;
          HashEntry<K,V> n=newTable[k];
          newTable[k]=new HashEntry<K,V>(h,p.key,v,n);
        }
      }
    }
  }
  int nodeIndex=node.hash & sizeMask;
  node.setNext(newTable[nodeIndex]);
  newTable[nodeIndex]=node;
  table=newTable;
}
