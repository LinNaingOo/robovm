{
  HashEntry<K,V> node=tryLock() ? null : scanAndLockForPut(key,hash,value);
  V oldValue;
  try {
    HashEntry<K,V>[] tab=table;
    int index=(tab.length - 1) & hash;
    HashEntry<K,V> first=entryAt(tab,index);
    for (HashEntry<K,V> e=first; ; ) {
      if (e != null) {
        K k;
        if ((k=e.key) == key || (e.hash == hash && key.equals(k))) {
          oldValue=e.value;
          if (!onlyIfAbsent) {
            e.value=value;
            ++modCount;
          }
          break;
        }
        e=e.next;
      }
 else {
        if (node != null)         node.setNext(first);
 else         node=new HashEntry<K,V>(hash,key,value,first);
        int c=count + 1;
        if (c > threshold && tab.length < MAXIMUM_CAPACITY)         rehash(node);
 else         setEntryAt(tab,index,node);
        ++modCount;
        count=c;
        oldValue=null;
        break;
      }
    }
  }
  finally {
    unlock();
  }
  return oldValue;
}
