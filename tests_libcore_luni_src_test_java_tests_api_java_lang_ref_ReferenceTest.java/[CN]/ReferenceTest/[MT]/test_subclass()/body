{
  error=null;
  testObjectFinalized=false;
  twr=null;
class TestObject {
    public TestWeakReference testWeakReference=null;
    public void setTestWeakReference(    TestWeakReference twr){
      testWeakReference=twr;
    }
    protected void finalize(){
      testObjectFinalized=true;
    }
  }
  final ReferenceQueue rq=new ReferenceQueue();
class TestThread extends Thread {
    public void run(){
      TestObject testObj=new TestObject();
      twr=new TestWeakReference(testObj,rq);
      testObj.setTestWeakReference(twr);
      testObj=null;
    }
  }
  Reference ref;
  try {
    Thread t=new TestThread();
    t.start();
    t.join();
    System.gc();
    System.runFinalization();
    ref=rq.remove(5000L);
    assertNotNull("Object not garbage collected.",ref);
    assertTrue("Unexpected reference.",ref == twr);
    assertNull("Object could not be reclaimed.",twr.get());
    assertTrue("finalize() should have been called.",testObjectFinalized);
  }
 catch (  InterruptedException e) {
    fail("InterruptedException : " + e.getMessage());
  }
}
