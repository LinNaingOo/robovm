{
  this(id,(Type)type,hierarchy);
  if (type.numDimensions < 1) {
    throw new InternalTypingException();
  }
  if (type.numDimensions == 1) {
    element=hierarchy.typeNode(type.baseType);
  }
 else {
    element=hierarchy.typeNode(ArrayType.v(type.baseType,type.numDimensions - 1));
  }
  if (element != hierarchy.INT) {
    if (element.array != null) {
      throw new InternalTypingException();
    }
    element.array=this;
  }
{
    List plist=new LinkedList();
    if (type.baseType instanceof RefType) {
      RefType baseType=(RefType)type.baseType;
      SootClass sClass=baseType.getSootClass();
      if (sClass.hasSuperclass() && !sClass.getName().equals("java.lang.Object")) {
        TypeNode parent=hierarchy.typeNode(ArrayType.v(RefType.v(sClass.getSuperclass().getName()),type.numDimensions));
        plist.add(parent);
        parentClass=parent;
      }
 else       if (type.numDimensions == 1) {
        plist.add(hierarchy.OBJECT);
        if (!Options.v().j2me()) {
          plist.add(hierarchy.CLONEABLE);
          plist.add(hierarchy.SERIALIZABLE);
        }
        parentClass=hierarchy.OBJECT;
      }
 else {
        plist.add(hierarchy.typeNode(ArrayType.v(hierarchy.OBJECT.type(),type.numDimensions - 1)));
        if (!Options.v().j2me()) {
          plist.add(hierarchy.typeNode(ArrayType.v(hierarchy.CLONEABLE.type(),type.numDimensions - 1)));
          plist.add(hierarchy.typeNode(ArrayType.v(hierarchy.SERIALIZABLE.type(),type.numDimensions - 1)));
        }
        parentClass=hierarchy.typeNode(ArrayType.v(hierarchy.OBJECT.type(),type.numDimensions - 1));
      }
      for (Iterator i=sClass.getInterfaces().iterator(); i.hasNext(); ) {
        TypeNode parent=hierarchy.typeNode(ArrayType.v(RefType.v(((SootClass)i.next()).getName()),type.numDimensions));
        plist.add(parent);
      }
    }
 else     if (type.numDimensions == 1) {
      plist.add(hierarchy.OBJECT);
      if (!Options.v().j2me()) {
        plist.add(hierarchy.CLONEABLE);
        plist.add(hierarchy.SERIALIZABLE);
      }
      parentClass=hierarchy.OBJECT;
    }
 else {
      plist.add(hierarchy.typeNode(ArrayType.v(hierarchy.OBJECT.type(),type.numDimensions - 1)));
      if (!Options.v().j2me()) {
        plist.add(hierarchy.typeNode(ArrayType.v(hierarchy.CLONEABLE.type(),type.numDimensions - 1)));
        plist.add(hierarchy.typeNode(ArrayType.v(hierarchy.SERIALIZABLE.type(),type.numDimensions - 1)));
      }
      parentClass=hierarchy.typeNode(ArrayType.v(hierarchy.OBJECT.type(),type.numDimensions - 1));
    }
    parents=Collections.unmodifiableList(plist);
  }
  descendants.set(hierarchy.NULL.id);
  hierarchy.NULL.ancestors.set(id);
  for (Iterator parentIt=parents.iterator(); parentIt.hasNext(); ) {
    final TypeNode parent=(TypeNode)parentIt.next();
    ancestors.set(parent.id);
    ancestors.or(parent.ancestors);
    parent.fixDescendants(id);
  }
}
