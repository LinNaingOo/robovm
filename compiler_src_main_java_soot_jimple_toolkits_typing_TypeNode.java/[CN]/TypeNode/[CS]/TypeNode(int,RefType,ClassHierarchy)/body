{
  this(id,(Type)type,hierarchy);
{
    SootClass sClass=type.getSootClass();
    if (sClass == null)     throw new RuntimeException("Oops, forgot to load " + type);
    if (sClass.isPhantomClass())     throw new RuntimeException("Jimplification requires " + sClass + ", but it is a phantom ref.");
    List plist=new LinkedList();
    if (sClass.hasSuperclass() && !sClass.getName().equals("java.lang.Object")) {
      TypeNode parent=hierarchy.typeNode(RefType.v(sClass.getSuperclass().getName()));
      plist.add(parent);
      parentClass=parent;
    }
    for (Iterator i=sClass.getInterfaces().iterator(); i.hasNext(); ) {
      TypeNode parent=hierarchy.typeNode(RefType.v(((SootClass)i.next()).getName()));
      plist.add(parent);
    }
    parents=Collections.unmodifiableList(plist);
  }
  descendants.set(hierarchy.NULL.id);
  hierarchy.NULL.ancestors.set(id);
  for (Iterator parentIt=parents.iterator(); parentIt.hasNext(); ) {
    final TypeNode parent=(TypeNode)parentIt.next();
    ancestors.set(parent.id);
    ancestors.or(parent.ancestors);
    parent.fixDescendants(id);
  }
}
