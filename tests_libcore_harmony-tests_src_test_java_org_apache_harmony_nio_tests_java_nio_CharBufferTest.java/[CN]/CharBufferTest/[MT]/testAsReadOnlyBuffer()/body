{
  buf.clear();
  buf.mark();
  buf.position(buf.limit());
  CharBuffer readonly=buf.asReadOnlyBuffer();
  assertNotSame(buf,readonly);
  assertTrue(readonly.isReadOnly());
  assertEquals(buf.position(),readonly.position());
  assertEquals(buf.limit(),readonly.limit());
  assertEquals(buf.isDirect(),readonly.isDirect());
  assertEquals(buf.order(),readonly.order());
  assertEquals(buf.capacity(),readonly.capacity());
  assertContentEquals(buf,readonly);
  readonly.reset();
  assertEquals(readonly.position(),0);
  readonly.clear();
  assertEquals(buf.position(),buf.limit());
  buf.reset();
  assertEquals(buf.position(),0);
  buf.clear();
  int originalPosition=(buf.position() + buf.limit()) / 2;
  buf.position(originalPosition);
  buf.mark();
  buf.position(buf.limit());
  readonly=buf.asReadOnlyBuffer();
  assertNotSame(buf,readonly);
  assertTrue(readonly.isReadOnly());
  assertEquals(buf.position(),readonly.position());
  assertEquals(buf.limit(),readonly.limit());
  assertEquals(buf.isDirect(),readonly.isDirect());
  assertEquals(buf.order(),readonly.order());
  assertEquals(buf.capacity(),readonly.capacity());
  assertContentEquals(buf,readonly);
  readonly.reset();
  assertEquals(readonly.position(),originalPosition);
  readonly.clear();
  assertEquals(buf.position(),buf.limit());
  buf.reset();
  assertEquals(buf.position(),originalPosition);
}
