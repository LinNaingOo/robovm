{
  retry:   for (; ; ) {
    int c=ctl.get();
    int rs=runStateOf(c);
    if (rs >= SHUTDOWN && !(rs == SHUTDOWN && firstTask == null && !workQueue.isEmpty()))     return false;
    for (; ; ) {
      int wc=workerCountOf(c);
      if (wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize))       return false;
      if (compareAndIncrementWorkerCount(c))       break retry;
      c=ctl.get();
      if (runStateOf(c) != rs)       continue retry;
    }
  }
  boolean workerStarted=false;
  boolean workerAdded=false;
  Worker w=null;
  try {
    w=new Worker(firstTask);
    final Thread t=w.thread;
    if (t != null) {
      final ReentrantLock mainLock=this.mainLock;
      mainLock.lock();
      try {
        int rs=runStateOf(ctl.get());
        if (rs < SHUTDOWN || (rs == SHUTDOWN && firstTask == null)) {
          if (t.isAlive())           throw new IllegalThreadStateException();
          workers.add(w);
          int s=workers.size();
          if (s > largestPoolSize)           largestPoolSize=s;
          workerAdded=true;
        }
      }
  finally {
        mainLock.unlock();
      }
      if (workerAdded) {
        t.start();
        workerStarted=true;
      }
    }
  }
  finally {
    if (!workerStarted)     addWorkerFailed(w);
  }
  return workerStarted;
}
