{
  boolean timedOut=false;
  for (; ; ) {
    int c=ctl.get();
    int rs=runStateOf(c);
    if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {
      decrementWorkerCount();
      return null;
    }
    int wc=workerCountOf(c);
    boolean timed=allowCoreThreadTimeOut || wc > corePoolSize;
    if ((wc > maximumPoolSize || (timed && timedOut)) && (wc > 1 || workQueue.isEmpty())) {
      if (compareAndDecrementWorkerCount(c))       return null;
      continue;
    }
    try {
      Runnable r=timed ? workQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS) : workQueue.take();
      if (r != null)       return r;
      timedOut=true;
    }
 catch (    InterruptedException retry) {
      timedOut=false;
    }
  }
}
