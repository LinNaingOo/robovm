{
  this();
  this.serverSessionContext=serverSessionContext;
  this.clientSessionContext=clientSessionContext;
  try {
    boolean initialize_default=false;
    if ((kms == null) || (kms.length == 0)) {
      if (defaultKeyManager == null) {
        KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(null,null);
        kms=kmf.getKeyManagers();
        initialize_default=true;
      }
 else {
        keyManager=defaultKeyManager;
      }
    }
    if (keyManager == null) {
      for (int i=0; i < kms.length; i++) {
        if (kms[i] instanceof X509KeyManager) {
          keyManager=(X509KeyManager)kms[i];
          break;
        }
      }
      if (keyManager == null) {
        throw new KeyManagementException("No X509KeyManager found");
      }
      if (initialize_default) {
        defaultKeyManager=keyManager;
      }
    }
    initialize_default=false;
    if ((tms == null) || (tms.length == 0)) {
      if (defaultTrustManager == null) {
        TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init((KeyStore)null);
        tms=tmf.getTrustManagers();
        initialize_default=true;
      }
 else {
        trustManager=defaultTrustManager;
      }
    }
    if (trustManager == null) {
      for (int i=0; i < tms.length; i++) {
        if (tms[i] instanceof X509TrustManager) {
          trustManager=(X509TrustManager)tms[i];
          break;
        }
      }
      if (trustManager == null) {
        throw new KeyManagementException("No X509TrustManager found");
      }
      if (initialize_default) {
        defaultTrustManager=trustManager;
      }
    }
  }
 catch (  NoSuchAlgorithmException e) {
    throw new KeyManagementException(e);
  }
catch (  KeyStoreException e) {
    throw new KeyManagementException(e);
  }
catch (  UnrecoverableKeyException e) {
    throw new KeyManagementException(e);
  }
  if (sr == null) {
    if (defaultSecureRandom == null) {
      defaultSecureRandom=new SecureRandom();
    }
    secureRandom=defaultSecureRandom;
  }
 else {
    secureRandom=sr;
  }
}
