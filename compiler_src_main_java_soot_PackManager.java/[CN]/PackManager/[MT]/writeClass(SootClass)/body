{
  final int format=Options.v().output_format();
  if (format == Options.output_format_none)   return;
  if (format == Options.output_format_dava)   return;
  OutputStream streamOut=null;
  PrintWriter writerOut=null;
  String fileName=SourceLocator.v().getFileNameFor(c,format);
  if (Options.v().gzip())   fileName=fileName + ".gz";
  OutputStream fileOutputStream=null;
  try {
    if (jarFile != null) {
      ZipEntry entry=new ZipEntry(fileName);
      jarFile.putNextEntry(entry);
      streamOut=jarFile;
    }
 else {
      new File(fileName).getParentFile().mkdirs();
      streamOut=new FileOutputStream(fileName);
      fileOutputStream=streamOut;
    }
    if (Options.v().gzip()) {
      streamOut=new GZIPOutputStream(streamOut);
    }
    if (format == Options.output_format_class) {
      streamOut=new JasminOutputStream(streamOut);
    }
    writerOut=new PrintWriter(new OutputStreamWriter(streamOut));
    G.v().out.println("Writing to " + fileName);
  }
 catch (  IOException e) {
    throw new CompilationDeathException("Cannot output file " + fileName,e);
  }
  if (Options.v().xml_attributes()) {
    Printer.v().setOption(Printer.ADD_JIMPLE_LN);
  }
switch (format) {
case Options.output_format_class:
case Options.output_format_jasmin:
    if (c.containsBafBody())     new soot.baf.JasminClass(c).print(writerOut);
 else     new soot.jimple.JasminClass(c).print(writerOut);
  break;
case Options.output_format_jimp:
case Options.output_format_shimp:
case Options.output_format_b:
case Options.output_format_grimp:
Printer.v().setOption(Printer.USE_ABBREVIATIONS);
Printer.v().printTo(c,writerOut);
break;
case Options.output_format_baf:
case Options.output_format_jimple:
case Options.output_format_shimple:
case Options.output_format_grimple:
writerOut=new PrintWriter(new EscapedWriter(new OutputStreamWriter(streamOut)));
Printer.v().printTo(c,writerOut);
break;
case Options.output_format_xml:
writerOut=new PrintWriter(new EscapedWriter(new OutputStreamWriter(streamOut)));
XMLPrinter.v().printJimpleStyleTo(c,writerOut);
break;
case Options.output_format_template:
writerOut=new PrintWriter(new OutputStreamWriter(streamOut));
TemplatePrinter.v().printTo(c,writerOut);
break;
default :
throw new RuntimeException();
}
try {
writerOut.flush();
streamOut.close();
if (fileOutputStream != null) fileOutputStream.close();
}
 catch (IOException e) {
throw new CompilationDeathException("Cannot close output file " + fileName);
}
}
