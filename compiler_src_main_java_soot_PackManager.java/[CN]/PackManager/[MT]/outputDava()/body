{
  Chain appClasses=Scene.v().getApplicationClasses();
  String pathForBuild=null;
  ArrayList<String> decompiledClasses=new ArrayList<String>();
  Iterator classIt=appClasses.iterator();
  while (classIt.hasNext()) {
    SootClass s=(SootClass)classIt.next();
    OutputStream streamOut=null;
    PrintWriter writerOut=null;
    String fileName=SourceLocator.v().getFileNameFor(s,Options.v().output_format());
    decompiledClasses.add(fileName.substring(fileName.lastIndexOf('/') + 1));
    if (pathForBuild == null) {
      pathForBuild=fileName.substring(0,fileName.lastIndexOf('/') + 1);
    }
    if (Options.v().gzip())     fileName=fileName + ".gz";
    try {
      if (jarFile != null) {
        ZipEntry entry=new ZipEntry(soot.util.StringTools.replaceAll(fileName,"\\","/"));
        jarFile.putNextEntry(entry);
        streamOut=jarFile;
      }
 else {
        streamOut=new FileOutputStream(fileName);
      }
      if (Options.v().gzip())       streamOut=new GZIPOutputStream(streamOut);
      writerOut=new PrintWriter(new OutputStreamWriter(streamOut));
    }
 catch (    IOException e) {
      throw new CompilationDeathException("Cannot output file " + fileName,e);
    }
    G.v().out.print("Generating " + fileName + "... ");
    G.v().out.flush();
    DavaPrinter.v().printTo(s,writerOut);
    G.v().out.println();
    G.v().out.flush();
{
      try {
        writerOut.flush();
        if (jarFile == null)         streamOut.close();
      }
 catch (      IOException e) {
        throw new CompilationDeathException("Cannot close output file " + fileName);
      }
    }
  }
  G.v().out.println();
{
    if (pathForBuild.endsWith("src/"))     pathForBuild=pathForBuild.substring(0,pathForBuild.length() - 4);
    String fileName=pathForBuild + "build.xml";
    try {
      OutputStream streamOut=new FileOutputStream(fileName);
      PrintWriter writerOut=new PrintWriter(new OutputStreamWriter(streamOut));
      DavaBuildFile.generate(writerOut,decompiledClasses);
      writerOut.flush();
      streamOut.close();
    }
 catch (    IOException e) {
      throw new CompilationDeathException("Cannot output file " + fileName,e);
    }
  }
}
