{
  G.v().out.println();
  Chain appClasses=Scene.v().getApplicationClasses();
  Map options=PhaseOptions.v().getPhaseOptions("db.transformations");
  boolean transformations=PhaseOptions.getBoolean(options,"enabled");
  Iterator classIt=appClasses.iterator();
  while (classIt.hasNext()) {
    SootClass s=(SootClass)classIt.next();
    String fileName=SourceLocator.v().getFileNameFor(s,Options.v().output_format());
    DavaStaticBlockCleaner.v().staticBlockInlining(s);
    VoidReturnRemover.cleanClass(s);
    RemoveEmptyBodyDefaultConstructor.checkAndRemoveDefault(s);
    G.v().out.println("Analyzing " + fileName + "... ");
    Iterator methodIt=s.methodIterator();
    while (methodIt.hasNext()) {
      SootMethod m=(SootMethod)methodIt.next();
      if (m.hasActiveBody()) {
        DavaBody body=(DavaBody)m.getActiveBody();
        if (transformations) {
          body.analyzeAST();
        }
 else {
          body.applyBugFixes();
        }
      }
 else       continue;
    }
  }
  if (transformations) {
    InterProceduralAnalyses.applyInterProceduralAnalyses();
  }
  outputDava();
}
