{
  LinkedList phaseOptions=new LinkedList();
  for (int i=argv.length; i > 0; i--) {
    pushOptions(argv[i - 1]);
  }
  while (hasMoreOptions()) {
    String option=nextOption();
    if (option.charAt(0) != '-') {
      classes.add(option);
      continue;
    }
    while (option.charAt(0) == '-') {
      option=option.substring(1);
    }
    if (false)     ;
 else     if (false || option.equals("h") || option.equals("help"))     help=true;
 else     if (false || option.equals("pl") || option.equals("phase-list"))     phase_list=true;
 else     if (false || option.equals("ph") || option.equals("phase-help")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (phase_help == null)       phase_help=new LinkedList();
      phase_help.add(value);
    }
 else     if (false || option.equals("version"))     version=true;
 else     if (false || option.equals("v") || option.equals("verbose"))     verbose=true;
 else     if (false || option.equals("interactive-mode"))     interactive_mode=true;
 else     if (false || option.equals("unfriendly-mode"))     unfriendly_mode=true;
 else     if (false || option.equals("app"))     app=true;
 else     if (false || option.equals("w") || option.equals("whole-program"))     whole_program=true;
 else     if (false || option.equals("ws") || option.equals("whole-shimple"))     whole_shimple=true;
 else     if (false || option.equals("validate"))     validate=true;
 else     if (false || option.equals("debug"))     debug=true;
 else     if (false || option.equals("debug-resolver"))     debug_resolver=true;
 else     if (false || option.equals("cp") || option.equals("soot-class-path")|| option.equals("soot-classpath")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (soot_classpath.length() == 0)       soot_classpath=value;
 else {
        G.v().out.println("Duplicate values " + soot_classpath + " and "+ value+ " for option -"+ option);
        return false;
      }
    }
 else     if (false || option.equals("pp") || option.equals("prepend-classpath"))     prepend_classpath=true;
 else     if (false || option.equals("process-path") || option.equals("process-dir")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (process_dir == null)       process_dir=new LinkedList();
      process_dir.add(value);
    }
 else     if (false || option.equals("ast-metrics"))     ast_metrics=true;
 else     if (false || option.equals("src-prec")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (false)       ;
 else       if (false || value.equals("c") || value.equals("class")) {
        if (src_prec != 0 && src_prec != src_prec_class) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        src_prec=src_prec_class;
      }
 else       if (false || value.equals("only-class")) {
        if (src_prec != 0 && src_prec != src_prec_only_class) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        src_prec=src_prec_only_class;
      }
 else       if (false || value.equals("J") || value.equals("jimple")) {
        if (src_prec != 0 && src_prec != src_prec_jimple) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        src_prec=src_prec_jimple;
      }
 else       if (false || value.equals("java")) {
        if (src_prec != 0 && src_prec != src_prec_java) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        src_prec=src_prec_java;
      }
 else {
        G.v().out.println("Invalid value " + value + " given for option -"+ option);
        return false;
      }
    }
 else     if (false || option.equals("full-resolver"))     full_resolver=true;
 else     if (false || option.equals("allow-phantom-refs"))     allow_phantom_refs=true;
 else     if (false || option.equals("no-bodies-for-excluded"))     no_bodies_for_excluded=true;
 else     if (false || option.equals("j2me"))     j2me=true;
 else     if (false || option.equals("main-class")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (main_class.length() == 0)       main_class=value;
 else {
        G.v().out.println("Duplicate values " + main_class + " and "+ value+ " for option -"+ option);
        return false;
      }
    }
 else     if (false || option.equals("polyglot"))     polyglot=true;
 else     if (false || option.equals("d") || option.equals("output-dir")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (output_dir.length() == 0)       output_dir=value;
 else {
        G.v().out.println("Duplicate values " + output_dir + " and "+ value+ " for option -"+ option);
        return false;
      }
    }
 else     if (false || option.equals("f") || option.equals("output-format")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (false)       ;
 else       if (false || value.equals("J") || value.equals("jimple")) {
        if (output_format != 0 && output_format != output_format_jimple) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_jimple;
      }
 else       if (false || value.equals("j") || value.equals("jimp")) {
        if (output_format != 0 && output_format != output_format_jimp) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_jimp;
      }
 else       if (false || value.equals("S") || value.equals("shimple")) {
        if (output_format != 0 && output_format != output_format_shimple) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_shimple;
      }
 else       if (false || value.equals("s") || value.equals("shimp")) {
        if (output_format != 0 && output_format != output_format_shimp) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_shimp;
      }
 else       if (false || value.equals("B") || value.equals("baf")) {
        if (output_format != 0 && output_format != output_format_baf) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_baf;
      }
 else       if (false || value.equals("b")) {
        if (output_format != 0 && output_format != output_format_b) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_b;
      }
 else       if (false || value.equals("G") || value.equals("grimple")) {
        if (output_format != 0 && output_format != output_format_grimple) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_grimple;
      }
 else       if (false || value.equals("g") || value.equals("grimp")) {
        if (output_format != 0 && output_format != output_format_grimp) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_grimp;
      }
 else       if (false || value.equals("X") || value.equals("xml")) {
        if (output_format != 0 && output_format != output_format_xml) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_xml;
      }
 else       if (false || value.equals("n") || value.equals("none")) {
        if (output_format != 0 && output_format != output_format_none) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_none;
      }
 else       if (false || value.equals("jasmin")) {
        if (output_format != 0 && output_format != output_format_jasmin) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_jasmin;
      }
 else       if (false || value.equals("c") || value.equals("class")) {
        if (output_format != 0 && output_format != output_format_class) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_class;
      }
 else       if (false || value.equals("d") || value.equals("dava")) {
        if (output_format != 0 && output_format != output_format_dava) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_dava;
      }
 else       if (false || value.equals("t") || value.equals("template")) {
        if (output_format != 0 && output_format != output_format_template) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        output_format=output_format_template;
      }
 else {
        G.v().out.println("Invalid value " + value + " given for option -"+ option);
        return false;
      }
    }
 else     if (false || option.equals("outjar") || option.equals("output-jar"))     output_jar=true;
 else     if (false || option.equals("xml-attributes"))     xml_attributes=true;
 else     if (false || option.equals("print-tags") || option.equals("print-tags-in-output"))     print_tags_in_output=true;
 else     if (false || option.equals("no-output-source-file-attribute"))     no_output_source_file_attribute=true;
 else     if (false || option.equals("no-output-inner-classes-attribute"))     no_output_inner_classes_attribute=true;
 else     if (false || option.equals("dump-body")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (dump_body == null)       dump_body=new LinkedList();
      dump_body.add(value);
    }
 else     if (false || option.equals("dump-cfg")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (dump_cfg == null)       dump_cfg=new LinkedList();
      dump_cfg.add(value);
    }
 else     if (false || option.equals("show-exception-dests"))     show_exception_dests=true;
 else     if (false || option.equals("gzip"))     gzip=true;
 else     if (false || option.equals("p") || option.equals("phase-option")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No phase name given for option -" + option);
        return false;
      }
      String phaseName=nextOption();
      if (!hasMoreOptions()) {
        G.v().out.println("No phase option given for option -" + option + " "+ phaseName);
        return false;
      }
      String phaseOption=nextOption();
      phaseOptions.add(phaseName);
      phaseOptions.add(phaseOption);
    }
 else     if (false || option.equals("O") || option.equals("optimize")) {
      pushOptions("enabled:true");
      pushOptions("sop");
      pushOptions("-p");
      pushOptions("enabled:true");
      pushOptions("jop");
      pushOptions("-p");
      pushOptions("enabled:true");
      pushOptions("gop");
      pushOptions("-p");
      pushOptions("enabled:true");
      pushOptions("bop");
      pushOptions("-p");
      pushOptions("only-stack-locals:false");
      pushOptions("gb.a2");
      pushOptions("-p");
      pushOptions("only-stack-locals:false");
      pushOptions("gb.a1");
      pushOptions("-p");
    }
 else     if (false || option.equals("W") || option.equals("whole-optimize")) {
      pushOptions("-O");
      pushOptions("-w");
      pushOptions("enabled:true");
      pushOptions("wsop");
      pushOptions("-p");
      pushOptions("enabled:true");
      pushOptions("wjop");
      pushOptions("-p");
    }
 else     if (false || option.equals("via-grimp"))     via_grimp=true;
 else     if (false || option.equals("via-shimple"))     via_shimple=true;
 else     if (false || option.equals("throw-analysis")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (false)       ;
 else       if (false || value.equals("pedantic")) {
        if (throw_analysis != 0 && throw_analysis != throw_analysis_pedantic) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        throw_analysis=throw_analysis_pedantic;
      }
 else       if (false || value.equals("unit")) {
        if (throw_analysis != 0 && throw_analysis != throw_analysis_unit) {
          G.v().out.println("Multiple values given for option " + option);
          return false;
        }
        throw_analysis=throw_analysis_unit;
      }
 else {
        G.v().out.println("Invalid value " + value + " given for option -"+ option);
        return false;
      }
    }
 else     if (false || option.equals("omit-excepting-unit-edges"))     omit_excepting_unit_edges=true;
 else     if (false || option.equals("trim-cfgs")) {
      pushOptions("enabled:true");
      pushOptions("jb.tt");
      pushOptions("-p");
      pushOptions("-omit-excepting-unit-edges");
      pushOptions("unit");
      pushOptions("-throw-analysis");
    }
 else     if (false || option.equals("i") || option.equals("include")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (include == null)       include=new LinkedList();
      include.add(value);
    }
 else     if (false || option.equals("x") || option.equals("exclude")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (exclude == null)       exclude=new LinkedList();
      exclude.add(value);
    }
 else     if (false || option.equals("include-all"))     include_all=true;
 else     if (false || option.equals("dynamic-class")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (dynamic_class == null)       dynamic_class=new LinkedList();
      dynamic_class.add(value);
    }
 else     if (false || option.equals("dynamic-dir")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (dynamic_dir == null)       dynamic_dir=new LinkedList();
      dynamic_dir.add(value);
    }
 else     if (false || option.equals("dynamic-package")) {
      if (!hasMoreOptions()) {
        G.v().out.println("No value given for option -" + option);
        return false;
      }
      String value=nextOption();
      if (dynamic_package == null)       dynamic_package=new LinkedList();
      dynamic_package.add(value);
    }
 else     if (false || option.equals("keep-line-number"))     keep_line_number=true;
 else     if (false || option.equals("keep-bytecode-offset") || option.equals("keep-offset"))     keep_offset=true;
 else     if (false || option.equals("annot-purity")) {
      pushOptions("enabled:true");
      pushOptions("wjap.purity");
      pushOptions("-p");
      pushOptions("enabled:true");
      pushOptions("cg.spark");
      pushOptions("-p");
      pushOptions("-w");
    }
 else     if (false || option.equals("annot-nullpointer")) {
      pushOptions("enabled:true");
      pushOptions("tag.an");
      pushOptions("-p");
      pushOptions("enabled:true");
      pushOptions("jap.npc");
      pushOptions("-p");
    }
 else     if (false || option.equals("annot-arraybounds")) {
      pushOptions("enabled:true");
      pushOptions("tag.an");
      pushOptions("-p");
      pushOptions("enabled:true");
      pushOptions("jap.abc");
      pushOptions("-p");
      pushOptions("enabled:true");
      pushOptions("wjap.ra");
      pushOptions("-p");
    }
 else     if (false || option.equals("annot-side-effect")) {
      pushOptions("enabled:true");
      pushOptions("tag.dep");
      pushOptions("-p");
      pushOptions("enabled:true");
      pushOptions("jap.sea");
      pushOptions("-p");
      pushOptions("-w");
    }
 else     if (false || option.equals("annot-fieldrw")) {
      pushOptions("enabled:true");
      pushOptions("tag.fieldrw");
      pushOptions("-p");
      pushOptions("enabled:true");
      pushOptions("jap.fieldrw");
      pushOptions("-p");
      pushOptions("-w");
    }
 else     if (false || option.equals("time"))     time=true;
 else     if (false || option.equals("subtract-gc"))     subtract_gc=true;
 else {
      G.v().out.println("Invalid option -" + option);
      return false;
    }
  }
  Iterator it=phaseOptions.iterator();
  while (it.hasNext()) {
    String phaseName=(String)it.next();
    String phaseOption=(String)it.next();
    if (!setPhaseOption(phaseName,"enabled:true"))     return false;
  }
  it=phaseOptions.iterator();
  while (it.hasNext()) {
    String phaseName=(String)it.next();
    String phaseOption=(String)it.next();
    if (!setPhaseOption(phaseName,phaseOption))     return false;
  }
  return true;
}
