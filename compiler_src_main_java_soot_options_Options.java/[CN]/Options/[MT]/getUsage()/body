{
  return "" + "\nGeneral Options:\n" + padOpt(" -h -help","Display help and exit") + padOpt(" -pl -phase-list","Print list of available phases")+ padOpt(" -ph PHASE -phase-help PHASE","Print help for specified PHASE")+ padOpt(" -version","Display version information and exit")+ padOpt(" -v -verbose","Verbose mode")+ padOpt(" -interactive-mode","Run in interactive mode")+ padOpt(" -unfriendly-mode","Allow Soot to run with no command-line options")+ padOpt(" -app","Run in application mode")+ padOpt(" -w -whole-program","Run in whole-program mode")+ padOpt(" -ws -whole-shimple","Run in whole-shimple mode")+ padOpt(" -validate","Run internal validation on bodies")+ padOpt(" -debug","Print various Soot debugging info")+ padOpt(" -debug-resolver","Print debugging info from SootResolver")+ "\nInput Options:\n"+ padOpt(" -cp PATH -soot-class-path PATH -soot-classpath PATH","Use PATH as the classpath for finding classes.")+ padOpt(" -pp -prepend-classpath","Prepend the given soot classpath to the default classpath.")+ padOpt(" -process-path DIR -process-dir DIR","Process all classes found in DIR")+ padOpt(" -ast-metrics","Compute AST Metrics if performing java to jimple")+ padOpt(" -src-prec FORMAT","Sets source precedence to FORMAT files")+ padVal(" c class (default)","Favour class files as Soot source")+ padVal(" only-class","Use only class files as Soot source")+ padVal(" J jimple","Favour Jimple files as Soot source")+ padVal(" java","Favour Java files as Soot source")+ padOpt(" -full-resolver","Force transitive resolving of referenced classes")+ padOpt(" -allow-phantom-refs","Allow unresolved classes; may cause errors")+ padOpt(" -no-bodies-for-excluded","Do not load bodies for excluded classes")+ padOpt(" -j2me","Use J2ME mode; changes assignment of types")+ padOpt(" -main-class CLASS","Sets the main class for whole-program analysis.")+ padOpt(" -polyglot","Use Java 1.4 Polyglot frontend instead of JastAdd")+ "\nOutput Options:\n"+ padOpt(" -d DIR -output-dir DIR","Store output files in DIR")+ padOpt(" -f FORMAT -output-format FORMAT","Set output format for Soot")+ padVal(" J jimple","Produce .jimple Files")+ padVal(" j jimp","Produce .jimp (abbreviated Jimple) files")+ padVal(" S shimple","Produce .shimple files")+ padVal(" s shimp","Produce .shimp (abbreviated Shimple) files")+ padVal(" B baf","Produce .baf files")+ padVal(" b","Produce .b (abbreviated Baf) files")+ padVal(" G grimple","Produce .grimple files")+ padVal(" g grimp","Produce .grimp (abbreviated Grimp) files")+ padVal(" X xml","Produce .xml Files")+ padVal(" n none","Produce no output")+ padVal(" jasmin","Produce .jasmin files")+ padVal(" c class (default)","Produce .class Files")+ padVal(" d dava","Produce dava-decompiled .java files")+ padVal(" t template","Produce .java files with Jimple templates.")+ padOpt(" -outjar -output-jar","Make output dir a Jar file instead of dir")+ padOpt(" -xml-attributes","Save tags to XML attributes for Eclipse")+ padOpt(" -print-tags -print-tags-in-output","Print tags in output files after stmt")+ padOpt(" -no-output-source-file-attribute","Don't output Source File Attribute when producing class files")+ padOpt(" -no-output-inner-classes-attribute","Don't output inner classes attribute in class files")+ padOpt(" -dump-body PHASENAME","Dump the internal representation of each method before and after phase PHASENAME")+ padOpt(" -dump-cfg PHASENAME","Dump the internal representation of each CFG constructed during phase PHASENAME")+ padOpt(" -show-exception-dests","Include exception destination edges as well as CFG edges in dumped CFGs")+ padOpt(" -gzip","GZip IR output files")+ "\nProcessing Options:\n"+ padOpt(" -p PHASE OPT:VAL -phase-option PHASE OPT:VAL","Set PHASE's OPT option to VALUE")+ padOpt(" -O -optimize","Perform intraprocedural optimizations")+ padOpt(" -W -whole-optimize","Perform whole program optimizations")+ padOpt(" -via-grimp","Convert to bytecode via Grimp instead of via Baf")+ padOpt(" -via-shimple","Enable Shimple SSA representation")+ padOpt(" -throw-analysis ARG","")+ padVal(" pedantic (default)","Pedantically conservative throw analysis")+ padVal(" unit","Unit Throw Analysis")+ padOpt(" -omit-excepting-unit-edges","Omit CFG edges to handlers from excepting units which lack side effects")+ padOpt(" -trim-cfgs","Trim unrealizable exceptional edges from CFGs")+ "\nApplication Mode Options:\n"+ padOpt(" -i PKG -include PKG","Include classes in PKG as application classes")+ padOpt(" -x PKG -exclude PKG","Exclude classes in PKG from application classes")+ padOpt(" -include-all","Set default excluded packages to empty list")+ padOpt(" -dynamic-class CLASS","Note that CLASS may be loaded dynamically")+ padOpt(" -dynamic-dir DIR","Mark all classes in DIR as potentially dynamic")+ padOpt(" -dynamic-package PKG","Marks classes in PKG as potentially dynamic")+ "\nInput Attribute Options:\n"+ padOpt(" -keep-line-number","Keep line number tables")+ padOpt(" -keep-bytecode-offset -keep-offset","Attach bytecode offset to IR")+ "\nAnnotation Options:\n"+ padOpt(" -annot-purity","Emit purity attributes")+ padOpt(" -annot-nullpointer","Emit null pointer attributes")+ padOpt(" -annot-arraybounds","Emit array bounds check attributes")+ padOpt(" -annot-side-effect","Emit side-effect attributes")+ padOpt(" -annot-fieldrw","Emit field read/write attributes")+ "\nMiscellaneous Options:\n"+ padOpt(" -time","Report time required for transformations")+ padOpt(" -subtract-gc","Subtract gc from time");
}
