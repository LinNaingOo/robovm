{
  @SuppressWarnings("unused") Signature s=new Signature("dummy"){
    protected AlgorithmParameters engineGetParameters(){
      engineGetParametersCalled=true;
      try {
        super.engineGetParameters();
      }
 catch (      UnsupportedOperationException e) {
        engineGetParametersExceptionOcurred=true;
      }
      return null;
    }
    @Override protected Object engineGetParameter(    String param) throws InvalidParameterException {
      return null;
    }
    @Override protected void engineInitSign(    PrivateKey privateKey) throws InvalidKeyException {
    }
    @Override protected void engineInitVerify(    PublicKey publicKey) throws InvalidKeyException {
    }
    @Override protected void engineSetParameter(    String param,    Object value) throws InvalidParameterException {
    }
    @Override protected byte[] engineSign() throws SignatureException {
      return null;
    }
    @Override protected void engineUpdate(    byte b) throws SignatureException {
    }
    @Override protected void engineUpdate(    byte[] b,    int off,    int len) throws SignatureException {
    }
    @Override protected boolean engineVerify(    byte[] sigBytes) throws SignatureException {
      return false;
    }
  }
;
  s.getParameters();
  assertTrue(engineGetParametersCalled);
  assertTrue(engineGetParametersExceptionOcurred);
}
