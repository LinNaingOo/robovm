{
  List<IPath> changedClassFiles=new ArrayList<IPath>();
  findChangedClassFiles(getProject(),kind == FULL_BUILD,changedClassFiles);
  if (changedClassFiles.isEmpty()) {
    return null;
  }
  IJavaProject javaProject=JavaCore.create(getProject());
  List<IPath> outputPaths=new ArrayList<IPath>();
  IWorkspaceRoot root=getProject().getWorkspace().getRoot();
  if (javaProject.getOutputLocation() != null) {
    outputPaths.add(root.getFile(javaProject.getOutputLocation()).getLocation());
  }
  for (  IClasspathEntry entry : javaProject.getResolvedClasspath(false)) {
    if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
      if (entry.getOutputLocation() != null) {
        outputPaths.add(root.getFile(entry.getOutputLocation()).getLocation());
      }
    }
  }
  List<String> changedClasses=new ArrayList<String>();
  for (  IPath f : changedClassFiles) {
    for (    IPath outputPath : outputPaths) {
      if (outputPath.isPrefixOf(f)) {
        String className=f.makeRelativeTo(outputPath).toString();
        className=className.substring(0,className.length() - ".class".length());
        className=className.replace('/','.');
        changedClasses.add(className);
      }
    }
  }
  Config.Builder configBuilder=new Config.Builder();
  configBuilder.skipLinking(true);
  configBuilder.skipRuntimeLib(true);
  configBuilder.debug(true);
  configBuilder.arch(RoboVMPlugin.getArch(getProject()));
  configBuilder.os(RoboVMPlugin.getOS(getProject()));
  configBuilder.home(RoboVMPlugin.getRoboVMHome());
  if (!RoboVMPlugin.useSystemLlvm()) {
    configBuilder.llvmHomeDir(RoboVMPlugin.getLlvmHomeDir());
  }
  configBuilder.logger(RoboVMPlugin.getConsoleLogger());
  for (  IClasspathEntry entry : javaProject.getResolvedClasspath(false)) {
    if (entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {
      IPath path=entry.getPath();
      IResource member=root.findMember(path);
      if (member != null) {
        configBuilder.addClasspathEntry(member.getLocation().toFile());
      }
 else {
        if (path.toString().contains("/robovm-rt.jar") || path.toString().contains("/rt/target/classes/")) {
          configBuilder.addBootClasspathEntry(path.toFile());
        }
 else {
          configBuilder.addClasspathEntry(path.toFile());
        }
      }
    }
  }
  for (  IPath outputPath : outputPaths) {
    configBuilder.addClasspathEntry(outputPath.toFile());
  }
  try {
    Config config=configBuilder.build();
    RoboVMPlugin.consoleInfo("Building %d changed classes for target %s (%s)",changedClasses.size(),config.getOs(),config.getArch());
    ClassCompiler compiler=new ClassCompiler(config);
    for (    String c : changedClasses) {
      Clazz clazz=config.getClazzes().load(c.replace('.','/'));
      compiler.compile(clazz);
    }
    RoboVMPlugin.consoleInfo("Build done");
  }
 catch (  IOException e) {
    RoboVMPlugin.consoleError("Build failed");
    throw new CoreException(new Status(IStatus.ERROR,RoboVMPlugin.PLUGIN_ID,"Build failed. Check the RoboVM console for more information.",e));
  }
  return null;
}
