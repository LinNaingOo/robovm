{
  Value l=stmt.getLeftOp();
  Value r=stmt.getRightOp();
  TypeNode left=null;
  TypeNode right=null;
  if (l instanceof ArrayRef) {
    ArrayRef ref=(ArrayRef)l;
    Type baset=((Local)ref.getBase()).getType();
    if (!(baset instanceof NullType)) {
      ArrayType base=(ArrayType)baset;
      Value index=ref.getIndex();
      if ((base.numDimensions == 1) && (base.baseType instanceof IntegerType)) {
        left=ClassHierarchy.v().typeNode(base.baseType);
      }
      if (index instanceof Local) {
        if (!ClassHierarchy.v().typeNode(((Local)index).getType()).hasAncestor_1(ClassHierarchy.v().INT)) {
          if (fix) {
            ref.setIndex(insertCast((Local)index,IntType.v(),stmt));
          }
 else {
            error("Type Error(5)");
          }
        }
      }
    }
  }
 else   if (l instanceof Local) {
    if (((Local)l).getType() instanceof IntegerType) {
      left=ClassHierarchy.v().typeNode(((Local)l).getType());
    }
  }
 else   if (l instanceof InstanceFieldRef) {
    InstanceFieldRef ref=(InstanceFieldRef)l;
    if (ref.getField().getType() instanceof IntegerType) {
      left=ClassHierarchy.v().typeNode(ref.getField().getType());
    }
  }
 else   if (l instanceof StaticFieldRef) {
    StaticFieldRef ref=(StaticFieldRef)l;
    if (ref.getField().getType() instanceof IntegerType) {
      left=ClassHierarchy.v().typeNode(ref.getField().getType());
    }
  }
 else {
    throw new RuntimeException("Unhandled assignment left hand side type: " + l.getClass());
  }
  if (r instanceof ArrayRef) {
    ArrayRef ref=(ArrayRef)r;
    Type baset=((Local)ref.getBase()).getType();
    if (!(baset instanceof NullType)) {
      ArrayType base=(ArrayType)baset;
      Value index=ref.getIndex();
      if ((base.numDimensions == 1) && (base.baseType instanceof IntegerType)) {
        right=ClassHierarchy.v().typeNode(base.baseType);
      }
      if (index instanceof Local) {
        if (!ClassHierarchy.v().typeNode(((Local)index).getType()).hasAncestor_1(ClassHierarchy.v().INT)) {
          if (fix) {
            ref.setIndex(insertCast((Local)index,IntType.v(),stmt));
          }
 else {
            error("Type Error(6)");
          }
        }
      }
    }
  }
 else   if (r instanceof DoubleConstant) {
  }
 else   if (r instanceof FloatConstant) {
  }
 else   if (r instanceof IntConstant) {
    int value=((IntConstant)r).value;
    if (value < -32768) {
      right=ClassHierarchy.v().INT;
    }
 else     if (value < -128) {
      right=ClassHierarchy.v().SHORT;
    }
 else     if (value < 0) {
      right=ClassHierarchy.v().BYTE;
    }
 else     if (value < 2) {
      right=ClassHierarchy.v().R0_1;
    }
 else     if (value < 128) {
      right=ClassHierarchy.v().R0_127;
    }
 else     if (value < 32768) {
      right=ClassHierarchy.v().R0_32767;
    }
 else     if (value < 65536) {
      right=ClassHierarchy.v().CHAR;
    }
 else {
      right=ClassHierarchy.v().INT;
    }
  }
 else   if (r instanceof LongConstant) {
  }
 else   if (r instanceof NullConstant) {
  }
 else   if (r instanceof StringConstant) {
  }
 else   if (r instanceof ClassConstant) {
  }
 else   if (r instanceof BinopExpr) {
    BinopExpr be=(BinopExpr)r;
    Value lv=be.getOp1();
    Value rv=be.getOp2();
    TypeNode lop=null;
    TypeNode rop=null;
    if (lv instanceof Local) {
      if (((Local)lv).getType() instanceof IntegerType) {
        lop=ClassHierarchy.v().typeNode(((Local)lv).getType());
      }
    }
 else     if (lv instanceof DoubleConstant) {
    }
 else     if (lv instanceof FloatConstant) {
    }
 else     if (lv instanceof IntConstant) {
      int value=((IntConstant)lv).value;
      if (value < -32768) {
        lop=ClassHierarchy.v().INT;
      }
 else       if (value < -128) {
        lop=ClassHierarchy.v().SHORT;
      }
 else       if (value < 0) {
        lop=ClassHierarchy.v().BYTE;
      }
 else       if (value < 2) {
        lop=ClassHierarchy.v().R0_1;
      }
 else       if (value < 128) {
        lop=ClassHierarchy.v().R0_127;
      }
 else       if (value < 32768) {
        lop=ClassHierarchy.v().R0_32767;
      }
 else       if (value < 65536) {
        lop=ClassHierarchy.v().CHAR;
      }
 else {
        lop=ClassHierarchy.v().INT;
      }
    }
 else     if (lv instanceof LongConstant) {
    }
 else     if (lv instanceof NullConstant) {
    }
 else     if (lv instanceof StringConstant) {
    }
 else     if (lv instanceof ClassConstant) {
    }
 else {
      throw new RuntimeException("Unhandled binary expression left operand type: " + lv.getClass());
    }
    if (rv instanceof Local) {
      if (((Local)rv).getType() instanceof IntegerType) {
        rop=ClassHierarchy.v().typeNode(((Local)rv).getType());
      }
    }
 else     if (rv instanceof DoubleConstant) {
    }
 else     if (rv instanceof FloatConstant) {
    }
 else     if (rv instanceof IntConstant) {
      int value=((IntConstant)rv).value;
      if (value < -32768) {
        rop=ClassHierarchy.v().INT;
      }
 else       if (value < -128) {
        rop=ClassHierarchy.v().SHORT;
      }
 else       if (value < 0) {
        rop=ClassHierarchy.v().BYTE;
      }
 else       if (value < 2) {
        rop=ClassHierarchy.v().R0_1;
      }
 else       if (value < 128) {
        rop=ClassHierarchy.v().R0_127;
      }
 else       if (value < 32768) {
        rop=ClassHierarchy.v().R0_32767;
      }
 else       if (value < 65536) {
        rop=ClassHierarchy.v().CHAR;
      }
 else {
        rop=ClassHierarchy.v().INT;
      }
    }
 else     if (rv instanceof LongConstant) {
    }
 else     if (rv instanceof NullConstant) {
    }
 else     if (rv instanceof StringConstant) {
    }
 else     if (rv instanceof ClassConstant) {
    }
 else {
      throw new RuntimeException("Unhandled binary expression right operand type: " + rv.getClass());
    }
    if ((be instanceof AddExpr) || (be instanceof SubExpr) || (be instanceof MulExpr)|| (be instanceof DivExpr)|| (be instanceof RemExpr)) {
      if (lop != null && rop != null) {
        if (!lop.hasAncestor_1(ClassHierarchy.v().INT)) {
          if (fix) {
            be.setOp1(insertCast(be.getOp1(),getTypeForCast(lop),IntType.v(),stmt));
          }
 else {
            error("Type Error(7)");
          }
        }
        if (!rop.hasAncestor_1(ClassHierarchy.v().INT)) {
          if (fix) {
            be.setOp2(insertCast(be.getOp2(),getTypeForCast(rop),IntType.v(),stmt));
          }
 else {
            error("Type Error(8)");
          }
        }
      }
      right=ClassHierarchy.v().INT;
    }
 else     if ((be instanceof AndExpr) || (be instanceof OrExpr) || (be instanceof XorExpr)) {
      if (lop != null && rop != null) {
        TypeNode lca=lop.lca_1(rop);
        if (lca == ClassHierarchy.v().TOP) {
          if (fix) {
            if (!lop.hasAncestor_1(ClassHierarchy.v().INT)) {
              be.setOp1(insertCast(be.getOp1(),getTypeForCast(lop),getTypeForCast(rop),stmt));
              lca=rop;
            }
            if (!rop.hasAncestor_1(ClassHierarchy.v().INT)) {
              be.setOp2(insertCast(be.getOp2(),getTypeForCast(rop),getTypeForCast(lop),stmt));
              lca=lop;
            }
          }
 else {
            error("Type Error(11)");
          }
        }
        right=lca;
      }
    }
 else     if (be instanceof ShlExpr) {
      if (lop != null) {
        if (!lop.hasAncestor_1(ClassHierarchy.v().INT)) {
          if (fix) {
            be.setOp1(insertCast(be.getOp1(),getTypeForCast(lop),IntType.v(),stmt));
          }
 else {
            error("Type Error(9)");
          }
        }
      }
      if (!rop.hasAncestor_1(ClassHierarchy.v().INT)) {
        if (fix) {
          be.setOp2(insertCast(be.getOp2(),getTypeForCast(rop),IntType.v(),stmt));
        }
 else {
          error("Type Error(10)");
        }
      }
      right=(lop == null) ? null : ClassHierarchy.v().INT;
    }
 else     if ((be instanceof ShrExpr) || (be instanceof UshrExpr)) {
      if (lop != null) {
        if (!lop.hasAncestor_1(ClassHierarchy.v().INT)) {
          if (fix) {
            be.setOp1(insertCast(be.getOp1(),getTypeForCast(lop),ByteType.v(),stmt));
            lop=ClassHierarchy.v().BYTE;
          }
 else {
            error("Type Error(9)");
          }
        }
      }
      if (!rop.hasAncestor_1(ClassHierarchy.v().INT)) {
        if (fix) {
          be.setOp2(insertCast(be.getOp2(),getTypeForCast(rop),IntType.v(),stmt));
        }
 else {
          error("Type Error(10)");
        }
      }
      right=lop;
    }
 else     if ((be instanceof CmpExpr) || (be instanceof CmpgExpr) || (be instanceof CmplExpr)) {
      right=ClassHierarchy.v().BYTE;
    }
 else     if ((be instanceof EqExpr) || (be instanceof GeExpr) || (be instanceof GtExpr)|| (be instanceof LeExpr)|| (be instanceof LtExpr)|| (be instanceof NeExpr)) {
      TypeNode lca=lop.lca_1(rop);
      if (lca == ClassHierarchy.v().TOP) {
        if (fix) {
          if (!lop.hasAncestor_1(ClassHierarchy.v().INT)) {
            be.setOp1(insertCast(be.getOp1(),getTypeForCast(lop),getTypeForCast(rop),stmt));
          }
          if (!rop.hasAncestor_1(ClassHierarchy.v().INT)) {
            be.setOp2(insertCast(be.getOp2(),getTypeForCast(rop),getTypeForCast(lop),stmt));
          }
        }
 else {
          error("Type Error(11)");
        }
      }
      right=ClassHierarchy.v().BOOLEAN;
    }
 else {
      throw new RuntimeException("Unhandled binary expression type: " + be.getClass());
    }
  }
 else   if (r instanceof CastExpr) {
    CastExpr ce=(CastExpr)r;
    if (ce.getCastType() instanceof IntegerType) {
      right=ClassHierarchy.v().typeNode(ce.getCastType());
    }
  }
 else   if (r instanceof InstanceOfExpr) {
    right=ClassHierarchy.v().BOOLEAN;
  }
 else   if (r instanceof InvokeExpr) {
    InvokeExpr ie=(InvokeExpr)r;
    handleInvokeExpr(ie,stmt);
    if (ie.getMethodRef().returnType() instanceof IntegerType) {
      right=ClassHierarchy.v().typeNode(ie.getMethodRef().returnType());
    }
  }
 else   if (r instanceof NewArrayExpr) {
    NewArrayExpr nae=(NewArrayExpr)r;
    Value size=nae.getSize();
    if (size instanceof Local) {
      if (!ClassHierarchy.v().typeNode(((Local)size).getType()).hasAncestor_1(ClassHierarchy.v().INT)) {
        if (fix) {
          nae.setSize(insertCast((Local)size,IntType.v(),stmt));
        }
 else {
          error("Type Error(12)");
        }
      }
    }
  }
 else   if (r instanceof NewExpr) {
  }
 else   if (r instanceof NewMultiArrayExpr) {
    NewMultiArrayExpr nmae=(NewMultiArrayExpr)r;
    for (int i=0; i < nmae.getSizeCount(); i++) {
      Value size=nmae.getSize(i);
      if (size instanceof Local) {
        if (!ClassHierarchy.v().typeNode(((Local)size).getType()).hasAncestor_1(ClassHierarchy.v().INT)) {
          if (fix) {
            nmae.setSize(i,insertCast((Local)size,IntType.v(),stmt));
          }
 else {
            error("Type Error(13)");
          }
        }
      }
    }
  }
 else   if (r instanceof LengthExpr) {
    right=ClassHierarchy.v().INT;
  }
 else   if (r instanceof NegExpr) {
    NegExpr ne=(NegExpr)r;
    if (ne.getOp() instanceof Local) {
      Local local=(Local)ne.getOp();
      if (local.getType() instanceof IntegerType) {
        TypeNode ltype=ClassHierarchy.v().typeNode(local.getType());
        if (!ltype.hasAncestor_1(ClassHierarchy.v().INT)) {
          if (fix) {
            ne.setOp(insertCast(local,IntType.v(),stmt));
            ltype=ClassHierarchy.v().BYTE;
          }
 else {
            error("Type Error(14)");
          }
        }
        right=(ltype == ClassHierarchy.v().CHAR) ? ClassHierarchy.v().INT : ltype;
      }
    }
 else     if (ne.getOp() instanceof DoubleConstant) {
    }
 else     if (ne.getOp() instanceof FloatConstant) {
    }
 else     if (ne.getOp() instanceof IntConstant) {
      right=ClassHierarchy.v().INT;
    }
 else     if (ne.getOp() instanceof LongConstant) {
    }
 else {
      throw new RuntimeException("Unhandled neg expression operand type: " + ne.getOp().getClass());
    }
  }
 else   if (r instanceof Local) {
    Local local=(Local)r;
    if (local.getType() instanceof IntegerType) {
      right=ClassHierarchy.v().typeNode(local.getType());
    }
  }
 else   if (r instanceof InstanceFieldRef) {
    InstanceFieldRef ref=(InstanceFieldRef)r;
    if (ref.getField().getType() instanceof IntegerType) {
      right=ClassHierarchy.v().typeNode(ref.getField().getType());
    }
  }
 else   if (r instanceof StaticFieldRef) {
    StaticFieldRef ref=(StaticFieldRef)r;
    if (ref.getField().getType() instanceof IntegerType) {
      right=ClassHierarchy.v().typeNode(ref.getField().getType());
    }
  }
 else {
    throw new RuntimeException("Unhandled assignment right hand side type: " + r.getClass());
  }
  if (left != null && right != null) {
    if (!right.hasAncestor_1(left)) {
      if (fix) {
        stmt.setRightOp(insertCast(stmt.getRightOp(),getTypeForCast(right),getTypeForCast(left),stmt));
      }
 else {
        error("Type Error(15)");
      }
    }
  }
}
