{
  receive_oversize_java_net_DatagramPacket();
  final int[] ports=Support_PortManager.getNextPortsForUDP(2);
  final int portNumber=ports[0];
class TestDGRcv implements Runnable {
    public void run(){
      try {
        InetAddress localHost=InetAddress.getLocalHost();
        Thread.sleep(1000);
        DatagramSocket sds=new DatagramSocket(ports[1]);
        sds.send(new DatagramPacket("Test".getBytes("UTF-8"),"Test".length(),localHost,portNumber));
        sds.send(new DatagramPacket("Longer test".getBytes("UTF-8"),"Longer test".length(),localHost,portNumber));
        sds.send(new DatagramPacket("3 Test".getBytes("UTF-8"),"3 Test".length(),localHost,portNumber));
        sds.send(new DatagramPacket("4 Test".getBytes("UTF-8"),"4 Test".length(),localHost,portNumber));
        sds.send(new DatagramPacket("5".getBytes("UTF-8"),"5".length(),localHost,portNumber));
        sds.close();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
  try {
    new Thread(new TestDGRcv(),"datagram receiver").start();
    ds=new java.net.DatagramSocket(portNumber);
    ds.setSoTimeout(6000);
    byte[] rbuf=new byte[1000];
    DatagramPacket rdp=new DatagramPacket(rbuf,rbuf.length);
    ds.receive(rdp);
    assertEquals("Test",new String(rbuf,0,rdp.getLength()));
    ds.receive(rdp);
    assertEquals("Longer test",new String(rbuf,0,rdp.getLength()));
    rdp.setLength(4);
    ds.receive(rdp);
    assertEquals("3 Te",new String(rbuf,0,rdp.getLength()));
    ds.receive(rdp);
    assertEquals("4 Te",new String(rbuf,0,rdp.getLength()));
    ds.receive(rdp);
    assertEquals("5",new String(rbuf,0,rdp.getLength()));
    ds.close();
  }
  finally {
    ds.close();
  }
  DatagramSocket socket=null;
  try {
    byte rbuf[]=new byte[1000];
    DatagramPacket rdp=new DatagramPacket(rbuf,rbuf.length);
    DatagramChannel channel=DatagramChannel.open();
    channel.configureBlocking(false);
    socket=channel.socket();
    socket.receive(rdp);
    fail("IllegalBlockingModeException was not thrown.");
  }
 catch (  IllegalBlockingModeException expected) {
  }
 finally {
    socket.close();
  }
  try {
    ds=new java.net.DatagramSocket(portNumber);
    ds.setSoTimeout(1000);
    byte rbuf[]=new byte[1000];
    DatagramPacket rdp=new DatagramPacket(rbuf,rbuf.length);
    ds.receive(rdp);
    fail("SocketTimeoutException was not thrown.");
  }
 catch (  SocketTimeoutException expected) {
  }
 finally {
    ds.close();
  }
  interrupted=false;
  final DatagramSocket ds=new DatagramSocket();
  ds.setSoTimeout(12000);
  Runnable runnable=new Runnable(){
    public void run(){
      try {
        ds.receive(new DatagramPacket(new byte[1],1));
      }
 catch (      InterruptedIOException e) {
        interrupted=true;
      }
catch (      IOException ignored) {
      }
    }
  }
;
  Thread thread=new Thread(runnable,"DatagramSocket.receive1");
  thread.start();
  do {
    Thread.sleep(500);
  }
 while (!thread.isAlive());
  ds.close();
  int c=0;
  do {
    Thread.sleep(500);
    if (interrupted) {
      fail("received interrupt");
    }
    if (++c > 4) {
      fail("read call did not exit");
    }
  }
 while (thread.isAlive());
  interrupted=false;
  final int portNum=ports[0];
  final DatagramSocket ds2=new DatagramSocket(ports[1]);
  ds2.setSoTimeout(12000);
  Runnable runnable2=new Runnable(){
    public void run(){
      try {
        ds2.receive(new DatagramPacket(new byte[1],1,InetAddress.getLocalHost(),portNum));
      }
 catch (      InterruptedIOException e) {
        interrupted=true;
      }
catch (      IOException ignored) {
      }
    }
  }
;
  Thread thread2=new Thread(runnable2,"DatagramSocket.receive2");
  thread2.start();
  try {
    do {
      Thread.sleep(500);
    }
 while (!thread2.isAlive());
  }
 catch (  InterruptedException ignored) {
  }
  ds2.close();
  int c2=0;
  do {
    Thread.sleep(500);
    if (interrupted) {
      fail("receive2 was interrupted");
    }
    if (++c2 > 4) {
      fail("read2 call did not exit");
    }
  }
 while (thread2.isAlive());
  interrupted=false;
  DatagramSocket ds3=new DatagramSocket();
  ds3.setSoTimeout(500);
  Date start=new Date();
  try {
    ds3.receive(new DatagramPacket(new byte[1],1));
  }
 catch (  InterruptedIOException e) {
    interrupted=true;
  }
  ds3.close();
  assertTrue("receive not interrupted",interrupted);
  int delay=(int)(new Date().getTime() - start.getTime());
  assertTrue("timeout too soon: " + delay,delay >= 490);
}
