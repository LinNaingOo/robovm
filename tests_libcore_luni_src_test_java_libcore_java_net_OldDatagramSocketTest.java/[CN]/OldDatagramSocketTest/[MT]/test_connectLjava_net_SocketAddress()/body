{
  try {
    ds=new java.net.DatagramSocket();
    InetAddress inetAddress=InetAddress.getLocalHost();
    int portNumber=Support_PortManager.getNextPortForUDP();
    ds.connect(new InetSocketAddress(inetAddress,portNumber));
    DatagramPacket send=new DatagramPacket(new byte[10],10);
    ds.send(send);
    DatagramPacket receive=new DatagramPacket(new byte[20],20);
    ds.setSoTimeout(10000);
    ds.receive(receive);
    ds.close();
    fail("No PortUnreachableException when connected at native level on recv ");
  }
 catch (  Exception e) {
    assertTrue("Wrong exception when trying to connect at native level on recv: " + e.toString(),(e instanceof PortUnreachableException));
  }
  try {
    ds=new java.net.DatagramSocket();
    InetAddress inetAddress=InetAddress.getLocalHost();
    int portNumber=Support_PortManager.getNextPortForUDP();
    ds.connect(new InetSocketAddress("asdfasdf",1));
    ds.close();
    fail("SocketException was not thrown.");
  }
 catch (  Exception e) {
    assertTrue("Wrong exception when trying to connect to unknown host: " + e.toString(),(e instanceof SocketException));
  }
  DatagramServer server=null;
  int[] ports=Support_PortManager.getNextPortsForUDP(3);
  int serverPortNumber=ports[0];
  try {
    InetAddress localHost=InetAddress.getLocalHost();
    DatagramSocket ds=new DatagramSocket(ports[1]);
    DatagramSocket ds2=new DatagramSocket(ports[2]);
    try {
      server=new DatagramServer(serverPortNumber,localHost);
      server.start();
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      fail("Failed to set up datagram server for native connected Dgram socket test ");
    }
    int port=ds.getLocalPort();
    ds.connect(new InetSocketAddress(localHost,serverPortNumber));
    byte[] sendBytes={'T','e','s','t',0};
    DatagramPacket send=new DatagramPacket(sendBytes,sendBytes.length);
    ds.send(send);
    DatagramPacket receive=new DatagramPacket(new byte[20],20);
    ds.setSoTimeout(2000);
    ds.receive(receive);
    ds.close();
    assertTrue("Wrong size data received: " + receive.getLength(),receive.getLength() == sendBytes.length);
    assertTrue("Wrong data received" + new String(receive.getData(),0,receive.getLength()) + ":"+ new String(sendBytes),new String(receive.getData(),0,receive.getLength()).equals(new String(sendBytes)));
    assertTrue("Wrong receiver:" + receive.getAddress() + ":"+ localHost,receive.getAddress().equals(localHost));
  }
 catch (  Exception e) {
    fail("Unexpected exception when sending data on dgram connected at native level:" + e.toString());
  }
  if (server != null) {
    server.stopServer();
  }
  try {
    ds=new java.net.DatagramSocket();
    InetAddress inetAddress=InetAddress.getLocalHost();
    int portNumber=Support_PortManager.getNextPortForUDP();
    ds.connect(new InetSocketAddress(inetAddress,portNumber));
    ds.disconnect();
    ds.close();
  }
 catch (  Exception e) {
    assertTrue("Unexpected exception when trying to connect at native" + e.toString(),(e instanceof PortUnreachableException));
  }
  try {
    ds=new java.net.DatagramSocket();
    InetAddress inetAddress=InetAddress.getLocalHost();
    int portNumber=Support_PortManager.getNextPortForUDP();
    ds.connect(new InetSocketAddress(inetAddress,portNumber));
    DatagramPacket send=new DatagramPacket(new byte[10],10,inetAddress,portNumber + 1);
    ds.send(send);
    ds.close();
    fail("No Exception when trying to send to a different address on a connected socket ");
  }
 catch (  Exception e) {
    assertTrue("Wrong exception when trying to send to a different address on a connected socket: " + e.toString(),(e instanceof IllegalArgumentException));
  }
  server=null;
  ports=Support_PortManager.getNextPortsForUDP(3);
  serverPortNumber=ports[0];
  try {
    InetAddress localHost=InetAddress.getLocalHost();
    DatagramSocket ds=new DatagramSocket(ports[1]);
    DatagramSocket ds2=new DatagramSocket(ports[2]);
    try {
      server=new DatagramServer(serverPortNumber,localHost);
      server.start();
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      fail("Failed to set up datagram server for native connected Dgram socket test ");
    }
    int port=ds.getLocalPort();
    ds.connect(new InetSocketAddress(localHost,serverPortNumber + 1));
    ds.disconnect();
    ds.connect(new InetSocketAddress(localHost,serverPortNumber));
    byte[] sendBytes={'T','e','s','t',0};
    DatagramPacket send=new DatagramPacket(sendBytes,sendBytes.length);
    ds.send(send);
    DatagramPacket receive=new DatagramPacket(new byte[20],20);
    ds.setSoTimeout(2000);
    ds.receive(receive);
    ds.close();
    assertTrue("connect/disconnect/connect - Wrong size data received: " + receive.getLength(),receive.getLength() == sendBytes.length);
    assertTrue("connect/disconnect/connect - Wrong data received" + new String(receive.getData(),0,receive.getLength()) + ":"+ new String(sendBytes),new String(receive.getData(),0,receive.getLength()).equals(new String(sendBytes)));
    assertTrue("connect/disconnect/connect - Wrong receiver:" + receive.getAddress() + ":"+ localHost,receive.getAddress().equals(localHost));
  }
 catch (  Exception e) {
    fail("Unexpected exception when sending data on dgram connected at native level after connect/disconnect/connect:" + e.toString());
  }
  if (server != null) {
    server.stopServer();
  }
  server=null;
  ports=Support_PortManager.getNextPortsForUDP(3);
  serverPortNumber=ports[0];
  try {
    InetAddress localHost=InetAddress.getLocalHost();
    DatagramSocket ds=new DatagramSocket(ports[1]);
    DatagramSocket ds2=new DatagramSocket(ports[2]);
    try {
      server=new DatagramServer(serverPortNumber,localHost);
      server.start();
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      fail("Failed to set up datagram server for native connected Dgram socket test ");
    }
    int port=ds.getLocalPort();
    ds.connect(new InetSocketAddress(localHost,serverPortNumber + 1));
    ds.disconnect();
    byte[] sendBytes={'T','e','s','t',0};
    DatagramPacket send=new DatagramPacket(sendBytes,sendBytes.length,localHost,serverPortNumber);
    ds.send(send);
    DatagramPacket receive=new DatagramPacket(new byte[20],20);
    ds.setSoTimeout(2000);
    ds.receive(receive);
    ds.close();
    assertTrue("connect/disconnect - Wrong size data received: " + receive.getLength(),receive.getLength() == sendBytes.length);
    assertTrue("connect/disconnect - Wrong data received" + new String(receive.getData(),0,receive.getLength()) + ":"+ new String(sendBytes),new String(receive.getData(),0,receive.getLength()).equals(new String(sendBytes)));
    assertTrue("connect/disconnect - Wrong receiver:" + receive.getAddress() + ":"+ localHost,receive.getAddress().equals(localHost));
  }
 catch (  Exception e) {
    fail("Unexpected exception when sending data on dgram connected at native level after connect/disconnect:" + e.toString());
  }
  if (server != null) {
    server.stopServer();
  }
  server=null;
  ports=Support_PortManager.getNextPortsForUDP(3);
  serverPortNumber=ports[0];
  try {
    InetAddress localHost=InetAddress.getLocalHost();
    DatagramSocket ds=new DatagramSocket(ports[1]);
    DatagramSocket ds2=new DatagramSocket(ports[2]);
    try {
      server=new DatagramServer(serverPortNumber,localHost);
      server.start();
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      fail("Failed to set up datagram server for native connected Dgram socket test ");
    }
    int port=ds.getLocalPort();
    ds.connect(new InetSocketAddress(localHost,serverPortNumber + 1));
    ds.connect(new InetSocketAddress(localHost,serverPortNumber));
    byte[] sendBytes={'T','e','s','t',0};
    DatagramPacket send=new DatagramPacket(sendBytes,sendBytes.length);
    ds.send(send);
    DatagramPacket receive=new DatagramPacket(new byte[20],20);
    ds.setSoTimeout(2000);
    ds.receive(receive);
    ds.close();
    assertTrue("connect/connect - Wrong size data received: " + receive.getLength(),receive.getLength() == sendBytes.length);
    assertTrue("connect/connect - Wrong data received" + new String(receive.getData(),0,receive.getLength()) + ":"+ new String(sendBytes),new String(receive.getData(),0,receive.getLength()).equals(new String(sendBytes)));
    assertTrue("connect/connect - Wrong receiver:" + receive.getAddress() + ":"+ localHost,receive.getAddress().equals(localHost));
  }
 catch (  Exception e) {
    fail("Unexpected exception when sending data on dgram connected at native level after connect/connect: " + e.toString());
  }
  if (server != null) {
    server.stopServer();
  }
  try {
    ds=new java.net.DatagramSocket();
    byte[] addressBytes={0,0,0,0};
    InetAddress inetAddress=InetAddress.getByAddress(addressBytes);
    int portNumber=Support_PortManager.getNextPortForUDP();
    InetAddress localHost=InetAddress.getLocalHost();
    ds.connect(new InetSocketAddress(inetAddress,portNumber));
    assertTrue("Is not connected after connect to inaddr any",ds.isConnected());
    byte[] sendBytes={'T','e','s','t',0};
    DatagramPacket send=new DatagramPacket(sendBytes,sendBytes.length,localHost,portNumber);
    ds.send(send);
    fail("No exception when trying to connect at native level with bad address (exception from send)  ");
  }
 catch (  Exception e) {
    assertTrue("Wrong exception when trying to connect at native level with bad address (exception from send): " + e.toString(),(e instanceof IllegalArgumentException));
  }
}
