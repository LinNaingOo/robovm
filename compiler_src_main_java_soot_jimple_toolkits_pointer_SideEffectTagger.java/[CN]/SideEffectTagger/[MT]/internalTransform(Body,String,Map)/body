{
  initializationStuff(phaseName);
  SideEffectAnalysis sea=Scene.v().getSideEffectAnalysis();
  optionNaive=PhaseOptions.getBoolean(options,"naive");
  if (!optionNaive) {
    sea.findNTRWSets(body.getMethod());
  }
  HashMap<Object,RWSet> stmtToReadSet=new HashMap<Object,RWSet>();
  HashMap<Object,RWSet> stmtToWriteSet=new HashMap<Object,RWSet>();
  UniqueRWSets sets=new UniqueRWSets();
  boolean justDoTotallyConservativeThing=body.getMethod().getName().equals("<clinit>");
  for (Iterator stmtIt=body.getUnits().iterator(); stmtIt.hasNext(); ) {
    final Stmt stmt=(Stmt)stmtIt.next();
    if (justDoTotallyConservativeThing || (optionNaive && stmt.containsInvokeExpr())) {
      stmtToReadSet.put(stmt,sets.getUnique(new FullRWSet()));
      stmtToWriteSet.put(stmt,sets.getUnique(new FullRWSet()));
      continue;
    }
    Object key=keyFor(stmt);
    if (!stmtToReadSet.containsKey(key)) {
      stmtToReadSet.put(key,sets.getUnique(sea.readSet(body.getMethod(),stmt)));
      stmtToWriteSet.put(key,sets.getUnique(sea.writeSet(body.getMethod(),stmt)));
    }
  }
  DependenceGraph graph=new DependenceGraph();
  for (Iterator<RWSet> outerIt=sets.iterator(); outerIt.hasNext(); ) {
    final RWSet outer=outerIt.next();
    for (Iterator<RWSet> innerIt=sets.iterator(); innerIt.hasNext(); ) {
      final RWSet inner=innerIt.next();
      if (inner == outer)       break;
      if (outer.hasNonEmptyIntersection(inner)) {
        graph.addEdge(sets.indexOf(outer),sets.indexOf(inner));
      }
    }
  }
  body.getMethod().addTag(graph);
  for (Iterator stmtIt=body.getUnits().iterator(); stmtIt.hasNext(); ) {
    final Stmt stmt=(Stmt)stmtIt.next();
    Object key;
    if (optionNaive && stmt.containsInvokeExpr()) {
      key=stmt;
    }
 else {
      key=keyFor(stmt);
    }
    RWSet read=stmtToReadSet.get(key);
    RWSet write=stmtToWriteSet.get(key);
    if (read != null || write != null) {
      DependenceTag tag=new DependenceTag();
      if (read != null && read.getCallsNative()) {
        tag.setCallsNative();
        numNatives++;
      }
 else       if (write != null && write.getCallsNative()) {
        tag.setCallsNative();
        numNatives++;
      }
      tag.setRead(sets.indexOf(read));
      tag.setWrite(sets.indexOf(write));
      stmt.addTag(tag);
    }
  }
}
