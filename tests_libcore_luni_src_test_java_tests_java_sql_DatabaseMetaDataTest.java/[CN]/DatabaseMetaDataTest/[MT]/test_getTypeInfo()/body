{
  insertNewRecord();
  ResultSet rs=meta.getTypeInfo();
  final String[] names={"TYPE_NAME","DATA_TYPE","PRECISION","LITERAL_PREFIX","LITERAL_SUFFIX","CREATE_PARAMS","NULLABLE","CASE_SENSITIVE","SEARCHABLE","UNSIGNED_ATTRIBUTE","FIXED_PREC_SCALE","AUTO_INCREMENT","LOCAL_TYPE_NAME","MINIMUM_SCALE","MAXIMUM_SCALE","SQL_DATA_TYPE","SQL_DATETIME_SUB","NUM_PREC_RADIX"};
  Arrays.sort(names);
  for (int i=0; i < rs.getMetaData().getColumnCount(); i++) {
    assertTrue("wrong column was return",Arrays.binarySearch(names,rs.getMetaData().getColumnName(i + 1)) > -1);
  }
  int[] types={Types.ARRAY,Types.BIGINT,Types.BINARY,Types.BIT,Types.BLOB,Types.BOOLEAN,Types.CHAR,Types.CLOB,Types.DATALINK,Types.DATE,Types.DECIMAL,Types.DISTINCT,Types.DOUBLE,Types.FLOAT,Types.INTEGER,Types.JAVA_OBJECT,Types.LONGVARBINARY,Types.LONGVARCHAR,Types.NULL,Types.NUMERIC,Types.OTHER,Types.REAL,Types.REF,Types.SMALLINT,Types.STRUCT,Types.TIME,Types.TIMESTAMP,Types.TINYINT,Types.VARBINARY,Types.VARCHAR};
  Arrays.sort(types);
  while (rs.next()) {
    assertTrue("wrong type was return ",Arrays.binarySearch(types,rs.getInt("DATA_TYPE")) > -1);
  }
  rs.close();
  conn.close();
  try {
    meta.getTypeInfo();
    fail("SQLException not thrown");
  }
 catch (  SQLException e) {
  }
}
