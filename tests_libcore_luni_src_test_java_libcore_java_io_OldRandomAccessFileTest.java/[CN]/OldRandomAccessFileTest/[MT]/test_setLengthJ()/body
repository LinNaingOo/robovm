{
  int bytesRead;
  long truncLength=(long)(testLength * 0.75);
  byte[] rbuf=new byte[testLength + 10];
  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");
  raf.write(testString.getBytes());
  assertEquals("Test 1: Incorrect file length;",testLength,raf.length());
  raf.setLength(truncLength);
  assertTrue("Test 2: File pointer not moved to the end of the truncated file.",raf.getFilePointer() == truncLength);
  raf.close();
  raf=new java.io.RandomAccessFile(fileName,"rw");
  assertEquals("Test 3: Incorrect file length;",truncLength,raf.length());
  bytesRead=raf.read(rbuf);
  assertEquals("Test 4: Incorrect number of bytes read;",truncLength,bytesRead);
  assertEquals("Test 5: Incorrect bytes read. ",testString.substring(0,bytesRead),new String(rbuf,0,bytesRead));
  raf.setLength(testLength + 2);
  assertTrue("Test 6: File pointer incorrectly moved.",raf.getFilePointer() == truncLength);
  assertEquals("Test 7: Incorrect file length;",testLength + 2,raf.length());
  try {
    raf.setLength(-1);
    fail("Test 9: IllegalArgumentException expected.");
  }
 catch (  IOException expected) {
  }
catch (  IllegalArgumentException expected) {
  }
  raf.close();
  try {
    raf.setLength(truncLength);
    fail("Test 10: IOException expected.");
  }
 catch (  IOException e) {
  }
}
