{
  if (handle == 0L) {
    return null;
  }
  if (cls == ObjCClass.class) {
    return (T)ObjCClass.toObjCClass(handle);
  }
  if (forceType) {
    return createInstance(ObjCClass.getByType(cls),handle,afterMarshaledFlags,false);
  }
  Class<?> expectedType=cls;
  if (ObjCClass.isObjCProxy(cls)) {
    expectedType=cls.getInterfaces()[0];
  }
synchronized (objcBridgeLock) {
    T o=getPeerObject(handle);
    if (o != null && o.getHandle() != 0) {
      if (!expectedType.isAssignableFrom(o.getClass())) {
        if (ObjCClass.isObjCProxy(o.getClass())) {
          removePeerObject(o);
          o=null;
        }
 else         if (ObjCClass.isObjCProxy(cls)) {
          return createInstance(ObjCClass.getByType(cls),handle,afterMarshaledFlags,false);
        }
 else {
          throw new IllegalStateException("The peer object type " + o.getClass().getName() + " is not compatible with the expected type "+ expectedType.getName());
        }
      }
 else {
        return o;
      }
    }
    ObjCClass objCClass=ObjCClass.getFromObject(handle);
    if (!expectedType.isAssignableFrom(objCClass.getType())) {
      objCClass=ObjCClass.getByType(cls);
    }
    return createInstance(objCClass,handle,afterMarshaledFlags,true);
  }
}
