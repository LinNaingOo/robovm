{
  UnitGraph g=this;
  if (g.getPredsOf(to).size() > 1)   return null;
  LinkedList<Unit> pathStack=new LinkedList<Unit>();
  LinkedList<Integer> pathStackIndex=new LinkedList<Integer>();
  pathStack.add(from);
  pathStackIndex.add(new Integer(0));
  int psiMax=(g.getSuccsOf(pathStack.get(0))).size();
  int level=0;
  while (pathStackIndex.get(0).intValue() != psiMax) {
    int p=(pathStackIndex.get(level)).intValue();
    List<Unit> succs=g.getSuccsOf((pathStack.get(level)));
    if (p >= succs.size()) {
      pathStack.remove(level);
      pathStackIndex.remove(level);
      level--;
      int q=pathStackIndex.get(level).intValue();
      pathStackIndex.set(level,new Integer(q + 1));
      continue;
    }
    Unit betweenUnit=(Unit)(succs.get(p));
    if (betweenUnit == to) {
      pathStack.add(to);
      return pathStack;
    }
    if (g.getPredsOf(betweenUnit).size() > 1) {
      pathStackIndex.set(level,new Integer(p + 1));
      continue;
    }
    level++;
    pathStackIndex.add(new Integer(0));
    pathStack.add(betweenUnit);
  }
  return null;
}
