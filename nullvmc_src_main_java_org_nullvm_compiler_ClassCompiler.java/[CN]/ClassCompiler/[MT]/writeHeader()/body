{
  out.println("%Env = type opaque");
  out.println("%Class = type opaque");
  out.println("%Object = type opaque");
  out.println("%ClassResCommon = type {void ()*, i8*, %Class*}");
  out.println("%NewRes = type {void ()*, %ClassResCommon*, %Class**}");
  out.println("%CheckcastRes = type {void ()*, %ClassResCommon*, %Class**}");
  out.println("%InstanceofRes = type {void ()*, %ClassResCommon*, %Class**}");
  out.println("%LdcClassRes = type {void ()*, %ClassResCommon*, %Class**}");
  out.println("%GetPutStaticCommon = type {void ()*, i8*, i8*, i8*, i8*}");
  out.println("%GetStatic = type {void ()*, %GetPutStaticCommon*, %Class**, i8*}");
  out.println("%PutStatic = type {void ()*, %GetPutStaticCommon*, %Class**, i8*}");
  out.println("%GetPutFieldCommon = type {void ()*, i32, i8*, i8*, i8*}");
  out.println("%GetField = type {void ()*, %GetPutFieldCommon*, %Class**, i32}");
  out.println("%PutField = type {void ()*, %GetPutFieldCommon*, %Class**, i32}");
  out.println("%InvokeVirtualCommon = type {void ()*, i8*, i8*, i8*, i8*, i32}");
  out.println("%InvokeVirtual = type {void ()*, %InvokeVirtualCommon*, %Class**, i32}");
  out.println("%InvokeSpecialCommon = type {void ()*, i8*, i8*, i8*, i8*}");
  out.println("%InvokeSpecial = type {void ()*, %InvokeSpecialCommon*, %Class**}");
  out.println("%InvokeStaticCommon = type {void ()*, i8*, i8*, i8*, i8*}");
  out.println("%InvokeStatic = type {void ()*, %InvokeStaticCommon*, %Class**}");
  out.println("%InvokeInterfaceCommon = type {void ()*, i8*, i8*, i8*, i8*}");
  out.println("%InvokeInterface = type {void ()*, %InvokeInterfaceCommon*, %Class**}");
  out.println("%InvokeNative = type {void (%InvokeNative*)*, void ()*, i8*, i8*}");
  out.println("declare %Class* @_nvmBcAllocateClass(%Env*, i8*, i8*, i32, i32, i32)");
  out.println("declare %Class* @_nvmBcAllocateSystemClass(%Env*, i8*, i8*, i32, i32, i32)");
  out.println("declare void @_nvmBcAddInterface(%Env*, %Class*, i8*)");
  out.println("declare void @_nvmBcAddMethod(%Env*, %Class*, i8*, i8*, i32, i8*)");
  out.println("declare void @_nvmBcAddField(%Env*, %Class*, i8*, i8*, i32, i32)");
  out.println("declare void @_nvmBcRegisterClass(%Env*, %Class*)");
  out.println("declare %Class* @_nvmBcFindClass(%Env*, i8*, %Class*)");
  out.println("declare void @_nvmBcThrow(%Env*, %Object*)");
  out.println("declare void @_nvmBcThrowIfExceptionOccurred(%Env*)");
  out.println("declare void @_nvmBcThrowNullPointerException(%Env*)");
  out.println("declare void @_nvmBcThrowArrayIndexOutOfBoundsException(%Env*, i32)");
  out.println("declare void @_nvmBcThrowVerifyError(%Env*, i8*)");
  out.println("declare %Object* @_nvmBcExceptionClear(%Env*)");
  out.println("declare i32 @_nvmBcExceptionMatch(%Env*, %Object*, %Class*)");
  out.println("declare %Object* @_nvmBcNewBooleanArray(%Env*, i32)");
  out.println("declare %Object* @_nvmBcNewByteArray(%Env*, i32)");
  out.println("declare %Object* @_nvmBcNewCharArray(%Env*, i32)");
  out.println("declare %Object* @_nvmBcNewShortArray(%Env*, i32)");
  out.println("declare %Object* @_nvmBcNewIntArray(%Env*, i32)");
  out.println("declare %Object* @_nvmBcNewLongArray(%Env*, i32)");
  out.println("declare %Object* @_nvmBcNewFloatArray(%Env*, i32)");
  out.println("declare %Object* @_nvmBcNewDoubleArray(%Env*, i32)");
  out.println("declare %Object* @_nvmBcNewObjectArray(%Env*, i32, i8*, %Class*)");
  out.println("declare %Object* @_nvmBcNewMultiArray(%Env*, i32, i32*, i8*, %Class*)");
  out.println("declare %Object* @_nvmBcNewStringAscii(%Env*, i8*)");
  out.println("declare %Object* @_nvmBcLdcClass(%Env*, i8*, %Class*)");
  out.println("declare void @_nvmBcResolveClassResCommon()");
  out.println("declare void @_nvmBcResolveClassForNew0()");
  out.println("declare void @_nvmBcResolveClassForCheckcast0()");
  out.println("declare void @_nvmBcResolveClassForInstanceof0()");
  out.println("declare void @_nvmBcResolveFieldForGetPutStaticCommon()");
  out.println("declare void @_nvmBcResolveFieldForGetStatic0()");
  out.println("declare void @_nvmBcResolveFieldForPutStatic0()");
  out.println("declare void @_nvmBcResolveFieldForGetPutFieldCommon()");
  out.println("declare void @_nvmBcResolveFieldForGetField0()");
  out.println("declare void @_nvmBcResolveFieldForPutField0()");
  out.println("declare void @_nvmBcResolveMethodForInvokeStaticCommon()");
  out.println("declare void @_nvmBcResolveMethodForInvokeStatic0()");
  out.println("declare void @_nvmBcResolveMethodForInvokeVirtualCommon()");
  out.println("declare void @_nvmBcResolveMethodForInvokeVirtual0()");
  out.println("declare void @_nvmBcResolveMethodForInvokeSpecialCommon()");
  out.println("declare void @_nvmBcResolveMethodForInvokeSpecial0()");
  out.println("declare void @_nvmBcResolveMethodForInvokeInterfaceCommon()");
  out.println("declare void @_nvmBcResolveMethodForInvokeInterface0()");
  out.println("declare void @_nvmBcResolveNativeMethod(%InvokeNative*)");
  out.println("declare void @_nvmBcMonitorEnter(%Env*, %Object*)");
  out.println("declare void @_nvmBcMonitorExit(%Env*, %Object*)");
  out.println("declare i8* @llvm.eh.exception() nounwind");
  out.println("declare i64 @llvm.eh.selector.i64(i8*, i8*, ...) nounwind");
  out.println("declare i32 @_nvmPersonality(i32, i32, i64, i8*, i8*)");
  out.println("declare i32 @j_arraylength(%Object*)");
  out.println("declare i32 @j_iaload(%Object* %o, i32 %index)");
  out.println("declare void @j_iastore(%Object* %o, i32 %index, i32 %value)");
  out.println("declare i32 @j_baload(%Object* %o, i32 %index)");
  out.println("declare void @j_bastore(%Object* %o, i32 %index, i32 %value)");
  out.println("declare i32 @j_saload(%Object* %o, i32 %index)");
  out.println("declare void @j_sastore(%Object* %o, i32 %index, i32 %value)");
  out.println("declare i32 @j_caload(%Object* %o, i32 %index)");
  out.println("declare void @j_castore(%Object* %o, i32 %index, i32 %value)");
  out.println("declare float @j_faload(%Object* %o, i32 %index)");
  out.println("declare void @j_fastore(%Object* %o, i32 %index, float %value)");
  out.println("declare i64 @j_laload(%Object* %o, i32 %index)");
  out.println("declare void @j_lastore(%Object* %o, i32 %index, i64 %value)");
  out.println("declare double @j_daload(%Object* %o, i32 %index)");
  out.println("declare void @j_dastore(%Object* %o, i32 %index, double %value)");
  out.println("declare %Object* @j_aaload(%Object* %o, i32 %index)");
  out.println("declare void @j_aastore(%Object* %o, i32 %index, %Object* %value)");
  out.println();
}
