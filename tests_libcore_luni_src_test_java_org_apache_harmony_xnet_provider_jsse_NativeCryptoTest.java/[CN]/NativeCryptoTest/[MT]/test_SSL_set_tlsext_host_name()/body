{
  try {
    NativeCrypto.SSL_set_tlsext_host_name(NULL,null);
    fail();
  }
 catch (  NullPointerException expected) {
  }
  final String hostname="www.android.com";
{
    int c=NativeCrypto.SSL_CTX_new();
    int s=NativeCrypto.SSL_new(c);
    try {
      NativeCrypto.SSL_set_tlsext_host_name(s,null);
      fail();
    }
 catch (    NullPointerException expected) {
    }
    try {
      char[] longHostname=new char[256];
      Arrays.fill(longHostname,'w');
      NativeCrypto.SSL_set_tlsext_host_name(s,new String(longHostname));
      fail();
    }
 catch (    SSLException expected) {
    }
    assertNull(NativeCrypto.SSL_get_servername(s));
    NativeCrypto.SSL_set_tlsext_host_name(s,new String(hostname));
    assertEquals(hostname,NativeCrypto.SSL_get_servername(s));
    NativeCrypto.SSL_free(s);
    NativeCrypto.SSL_CTX_free(c);
  }
  final ServerSocket listener=new ServerSocket(0);
  Hooks cHooks=new Hooks(){
    @Override public int beforeHandshake(    int c) throws SSLException {
      int s=super.beforeHandshake(c);
      NativeCrypto.SSL_set_tlsext_host_name(s,hostname);
      return s;
    }
  }
;
  Hooks sHooks=new ServerHooks(getServerPrivateKey(),getServerCertificates()){
    @Override public void afterHandshake(    int session,    int s,    int c,    Socket sock,    FileDescriptor fd,    SSLHandshakeCallbacks callback) throws Exception {
      assertEquals(hostname,NativeCrypto.SSL_get_servername(s));
      super.afterHandshake(session,s,c,sock,fd,callback);
    }
  }
;
  Future<TestSSLHandshakeCallbacks> client=handshake(listener,0,true,cHooks,null);
  Future<TestSSLHandshakeCallbacks> server=handshake(listener,0,false,sHooks,null);
  client.get(TIMEOUT_SECONDS,TimeUnit.SECONDS);
  server.get(TIMEOUT_SECONDS,TimeUnit.SECONDS);
}
