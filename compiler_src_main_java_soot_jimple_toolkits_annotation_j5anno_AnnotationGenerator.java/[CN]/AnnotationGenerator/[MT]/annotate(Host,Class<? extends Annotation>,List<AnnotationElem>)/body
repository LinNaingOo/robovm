{
  Target t=klass.getAnnotation(Target.class);
  Collection<ElementType> elementTypes=Arrays.asList(t.value());
  final String ERR="Annotation class " + klass + " not applicable to host of type "+ h.getClass()+ ".";
  if (h instanceof SootClass) {
    if (!elementTypes.contains(ElementType.TYPE)) {
      throw new RuntimeException(ERR);
    }
  }
 else   if (h instanceof SootMethod) {
    if (!elementTypes.contains(ElementType.METHOD)) {
      throw new RuntimeException(ERR);
    }
  }
 else   if (h instanceof SootField) {
    if (!elementTypes.contains(ElementType.FIELD)) {
      throw new RuntimeException(ERR);
    }
  }
 else {
    throw new RuntimeException("Tried to attach annotation to host of type " + h.getClass() + ".");
  }
  Retention r=klass.getAnnotation(Retention.class);
  int retPolicy=AnnotationConstants.RUNTIME_INVISIBLE;
  if (r != null) {
switch (r.value()) {
case CLASS:
      retPolicy=AnnotationConstants.RUNTIME_INVISIBLE;
    break;
case RUNTIME:
  retPolicy=AnnotationConstants.RUNTIME_VISIBLE;
break;
default :
throw new RuntimeException("Unexpected retention policy: " + retPolicy);
}
}
annotate(h,klass.getCanonicalName(),retPolicy,elems);
}
