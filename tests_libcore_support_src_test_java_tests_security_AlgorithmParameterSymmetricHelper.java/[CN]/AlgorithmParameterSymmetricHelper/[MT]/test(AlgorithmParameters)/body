{
  KeyGenerator generator=null;
  try {
    generator=KeyGenerator.getInstance(algorithmName);
  }
 catch (  NoSuchAlgorithmException e) {
    Assert.fail(e.getMessage());
  }
  generator.init(keySize);
  Key key=generator.generateKey();
  Cipher cipher=null;
  try {
    String transformation=algorithmName;
    if (blockmode != null) {
      transformation+="/" + blockmode;
    }
    cipher=Cipher.getInstance(transformation);
  }
 catch (  NoSuchAlgorithmException e) {
    Assert.fail(e.getMessage());
  }
catch (  NoSuchPaddingException e) {
    Assert.fail(e.getMessage());
  }
  try {
    cipher.init(Cipher.ENCRYPT_MODE,key,parameters);
  }
 catch (  InvalidKeyException e) {
    Assert.fail(e.getMessage());
  }
catch (  InvalidAlgorithmParameterException e) {
    Assert.fail(e.getMessage());
  }
  byte[] bs=null;
  try {
    bs=cipher.doFinal(plainData.getBytes());
  }
 catch (  IllegalBlockSizeException e) {
    Assert.fail(e.getMessage());
  }
catch (  BadPaddingException e) {
    Assert.fail(e.getMessage());
  }
  try {
    cipher.init(Cipher.DECRYPT_MODE,key,parameters);
  }
 catch (  InvalidKeyException e) {
    Assert.fail(e.getMessage());
  }
catch (  InvalidAlgorithmParameterException e) {
    Assert.fail(e.getMessage());
  }
  byte[] decrypted=null;
  try {
    decrypted=cipher.doFinal(bs);
  }
 catch (  IllegalBlockSizeException e) {
    Assert.fail(e.getMessage());
  }
catch (  BadPaddingException e) {
    Assert.fail(e.getMessage());
  }
  Assert.assertTrue(Arrays.equals(plainData.getBytes(),decrypted));
}
