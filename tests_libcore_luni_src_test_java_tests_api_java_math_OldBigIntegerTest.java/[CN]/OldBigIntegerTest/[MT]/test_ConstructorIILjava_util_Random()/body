{
  BigInteger bi1=new BigInteger(10,5,rand);
  BigInteger bi2=new BigInteger(10,5,rand);
  assertTrue(bi1 + " is negative",bi1.compareTo(BigInteger.ZERO) >= 0);
  assertTrue(bi1 + " is too big",bi1.compareTo(new BigInteger("1024",10)) < 0);
  assertTrue(bi2 + " is negative",bi2.compareTo(BigInteger.ZERO) >= 0);
  assertTrue(bi2 + " is too big",bi2.compareTo(new BigInteger("1024",10)) < 0);
  Random rand=new Random();
  BigInteger bi;
  int certainty[]={0,1,2,3,4,5,6,7,8,9,10,Integer.MIN_VALUE,Integer.MIN_VALUE + 1,-2,-1};
  for (int i=2; i <= 20; i++) {
    for (int c=0; c < certainty.length; c++) {
      bi=new BigInteger(i,c,rand);
      assertEquals(i,bi.bitLength());
    }
  }
  try {
    new BigInteger(1,80,(Random)null);
    fail("ArithmeticException expected");
  }
 catch (  ArithmeticException expected) {
  }
  try {
    new BigInteger(-1,(Random)null);
    fail("IllegalArgumentException expected");
  }
 catch (  IllegalArgumentException expected) {
  }
}
