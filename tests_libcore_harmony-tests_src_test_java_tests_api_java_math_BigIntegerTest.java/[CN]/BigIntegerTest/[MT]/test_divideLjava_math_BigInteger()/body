{
  testAllDivs(bi33,bi3);
  testAllDivs(bi22,bi2);
  testAllDivs(bi11,bi1);
  testAllDivs(bi13,bi1);
  testAllDivs(bi13,bi3);
  testAllDivs(bi12,bi1);
  testAllDivs(bi12,bi2);
  testAllDivs(bi23,bi2);
  testAllDivs(bi23,bi3);
  testAllDivs(largePos,bi1);
  testAllDivs(largePos,bi2);
  testAllDivs(largePos,bi3);
  testAllDivs(largeNeg,bi1);
  testAllDivs(largeNeg,bi2);
  testAllDivs(largeNeg,bi3);
  testAllDivs(largeNeg,largePos);
  testAllDivs(largePos,largeNeg);
  testAllDivs(bi3,bi3);
  testAllDivs(bi2,bi2);
  testAllDivs(bi1,bi1);
  testDivRanges(bi1);
  testDivRanges(bi2);
  testDivRanges(bi3);
  testDivRanges(smallPos);
  testDivRanges(largePos);
  testDivRanges(new BigInteger("62EB40FEF85AA9EB",16));
  testAllDivs(BigInteger.valueOf(0xCC0225953CL),BigInteger.valueOf(0x1B937B765L));
  try {
    largePos.divide(zero);
    fail("ArithmeticException expected");
  }
 catch (  ArithmeticException e) {
  }
  try {
    bi1.divide(zero);
    fail("ArithmeticException expected");
  }
 catch (  ArithmeticException e) {
  }
  try {
    bi3.negate().divide(zero);
    fail("ArithmeticException expected");
  }
 catch (  ArithmeticException e) {
  }
  try {
    zero.divide(zero);
    fail("ArithmeticException expected");
  }
 catch (  ArithmeticException e) {
  }
}
