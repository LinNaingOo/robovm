{
  assertTrue("1 >> 0",BigInteger.valueOf(1).shiftRight(0).equals(BigInteger.ONE));
  assertTrue("1 >> 1",BigInteger.valueOf(1).shiftRight(1).equals(BigInteger.ZERO));
  assertTrue("1 >> 63",BigInteger.valueOf(1).shiftRight(63).equals(BigInteger.ZERO));
  assertTrue("1 >> 64",BigInteger.valueOf(1).shiftRight(64).equals(BigInteger.ZERO));
  assertTrue("1 >> 65",BigInteger.valueOf(1).shiftRight(65).equals(BigInteger.ZERO));
  assertTrue("1 >> 1000",BigInteger.valueOf(1).shiftRight(1000).equals(BigInteger.ZERO));
  assertTrue("-1 >> 0",BigInteger.valueOf(-1).shiftRight(0).equals(minusOne));
  assertTrue("-1 >> 1",BigInteger.valueOf(-1).shiftRight(1).equals(minusOne));
  assertTrue("-1 >> 63",BigInteger.valueOf(-1).shiftRight(63).equals(minusOne));
  assertTrue("-1 >> 64",BigInteger.valueOf(-1).shiftRight(64).equals(minusOne));
  assertTrue("-1 >> 65",BigInteger.valueOf(-1).shiftRight(65).equals(minusOne));
  assertTrue("-1 >> 1000",BigInteger.valueOf(-1).shiftRight(1000).equals(minusOne));
  BigInteger a=BigInteger.ONE;
  BigInteger c=bi3;
  BigInteger E=bi3.negate();
  BigInteger e=E;
  for (int i=0; i < 200; i++) {
    BigInteger b=BigInteger.ZERO.setBit(i);
    assertTrue("a==b",a.equals(b));
    a=a.shiftLeft(1);
    assertTrue("a non-neg",a.signum() >= 0);
    BigInteger d=bi3.shiftRight(i);
    assertTrue("c==d",c.equals(d));
    c=c.shiftRight(1);
    assertTrue(">>1 == /2",d.divide(two).equals(c));
    assertTrue("c non-neg",c.signum() >= 0);
    BigInteger f=E.shiftRight(i);
    assertTrue("e==f",e.equals(f));
    e=e.shiftRight(1);
    assertTrue(">>1 == /2",f.subtract(one).divide(two).equals(e));
    assertTrue("e negative",e.signum() == -1);
    assertTrue("b >> i",b.shiftRight(i).equals(one));
    assertTrue("b >> i+1",b.shiftRight(i + 1).equals(zero));
    assertTrue("b >> i-1",b.shiftRight(i - 1).equals(two));
  }
}
