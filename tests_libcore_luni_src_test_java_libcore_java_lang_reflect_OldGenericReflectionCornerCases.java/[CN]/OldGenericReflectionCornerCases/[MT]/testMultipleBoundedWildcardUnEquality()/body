{
  Class<? extends MultipleBoundedWildcardUnEquality> clazz=MultipleBoundedWildcardUnEquality.class;
  Method method=clazz.getDeclaredMethod("multipleBoundedWildcardUnEquality",Pair.class);
  TypeVariable<?>[] typeParameters=clazz.getTypeParameters();
  assertLenghtOne(typeParameters);
  TypeVariable<?> typeParameter=typeParameters[0];
  Type[] typeParameterBounds=typeParameter.getBounds();
  assertEquals(2,typeParameterBounds.length);
  assertEquals(Object.class,typeParameterBounds[0]);
  assertInstanceOf(ParameterizedType.class,typeParameterBounds[1]);
  ParameterizedType parameterizedType=(ParameterizedType)typeParameterBounds[1];
  assertEquals(Comparable.class,parameterizedType.getRawType());
  Type[] typeArguments=parameterizedType.getActualTypeArguments();
  assertLenghtOne(typeArguments);
  assertInstanceOf(ParameterizedType.class,typeArguments[0]);
  ParameterizedType type=(ParameterizedType)typeArguments[0];
  assertEquals(typeParameter,type.getActualTypeArguments()[0]);
  assertEquals(MultipleBoundedWildcardUnEquality.class,type.getRawType());
  Type[] parameterTypes=method.getGenericParameterTypes();
  assertLenghtOne(parameterTypes);
  Type parameter=parameterTypes[0];
  assertInstanceOf(ParameterizedType.class,parameter);
  ParameterizedType paramType=(ParameterizedType)parameter;
  Type[] actualTypeArguments=paramType.getActualTypeArguments();
  assertEquals(2,actualTypeArguments.length);
  Type firstArgument=actualTypeArguments[0];
  assertInstanceOf(WildcardType.class,firstArgument);
  WildcardType firstWildcardArgument=(WildcardType)firstArgument;
  Type secondArgument=actualTypeArguments[1];
  assertInstanceOf(WildcardType.class,secondArgument);
  WildcardType secondWildcardArgument=(WildcardType)secondArgument;
  assertNotEquals(firstWildcardArgument,secondWildcardArgument);
  Type[] firstWildcardArgumentUpperBounds=firstWildcardArgument.getUpperBounds();
  assertLenghtOne(firstWildcardArgumentUpperBounds);
  Type firstWildcardArgumentUpperBoundsType=firstWildcardArgumentUpperBounds[0];
  Type[] secondWildcardArgumentLowerBounds=secondWildcardArgument.getLowerBounds();
  assertLenghtOne(secondWildcardArgumentLowerBounds);
  Type secondWildcardArgumentLoweroundsType=secondWildcardArgumentLowerBounds[0];
  assertEquals(firstWildcardArgumentUpperBoundsType,secondWildcardArgumentLoweroundsType);
}
