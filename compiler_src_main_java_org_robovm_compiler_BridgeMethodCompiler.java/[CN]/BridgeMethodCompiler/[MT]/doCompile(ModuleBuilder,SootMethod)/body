{
  validateBridgeMethod(method);
  Function outerFn=FunctionBuilder.method(method);
  moduleBuilder.addFunction(outerFn);
  Function innerFn=FunctionBuilder.bridgeInner(method);
  moduleBuilder.addFunction(innerFn);
  Type[] parameterTypes=innerFn.getType().getParameterTypes();
  String[] parameterNames=innerFn.getParameterNames();
  ArrayList<Argument> args=new ArrayList<Argument>();
  for (int i=0; i < parameterTypes.length; i++) {
    args.add(new Argument(new VariableRef(parameterNames[i],parameterTypes[i])));
  }
  Value resultOuter=callWithArguments(outerFn,innerFn.ref(),args);
  outerFn.add(new Ret(resultOuter));
  FunctionType targetFnType=getBridgeFunctionType(method);
  Variable targetFn=innerFn.newVariable(targetFnType);
  Global targetFnPtr=new Global(getTargetFnPtrName(method),_private,new NullConstant(I8_PTR));
  moduleBuilder.addGlobal(targetFnPtr);
  innerFn.add(new Load(targetFn,new ConstantBitcast(targetFnPtr.ref(),new PointerType(targetFnType))));
  Label nullLabel=new Label();
  Label notNullLabel=new Label();
  Variable nullCheck=innerFn.newVariable(I1);
  innerFn.add(new Icmp(nullCheck,Condition.eq,targetFn.ref(),new NullConstant(targetFnType)));
  innerFn.add(new Br(nullCheck.ref(),innerFn.newBasicBlockRef(nullLabel),innerFn.newBasicBlockRef(notNullLabel)));
  innerFn.newBasicBlock(nullLabel);
  VariableRef env=innerFn.getParameterRef(0);
  call(innerFn,BC_THROW_UNSATISIFED_LINK_ERROR,env,moduleBuilder.getString(String.format("Bridge method %s.%s%s not bound",className,method.getName(),getDescriptor(method))));
  innerFn.add(new Unreachable());
  innerFn.newBasicBlock(notNullLabel);
  args.remove(0);
  if (!method.isStatic()) {
    args.remove(0);
  }
class MarshaledValue {
    private Value object;
    private Value handle;
    private int paramIndex;
  }
  List<MarshaledValue> marshaledValues=new ArrayList<MarshaledValue>();
  Type[] targetParameterTypes=targetFnType.getParameterTypes();
  for (int i=0; i < sootMethod.getParameterCount(); i++) {
    soot.Type type=sootMethod.getParameterType(i);
    if (needsMarshaler(type)) {
      ParameterAttribute[] parameterAttributes=new ParameterAttribute[0];
      if (isPassByValue(method,i) || isStructRet(method,i)) {
        call(innerFn,CHECK_NULL,env,args.get(i).getValue());
        parameterAttributes=new ParameterAttribute[1];
        if (isStructRet(method,i)) {
          parameterAttributes[0]=sret;
        }
 else {
          parameterAttributes[0]=byval;
        }
      }
      MarshaledValue marshaledValue=new MarshaledValue();
      marshaledValues.add(marshaledValue);
      marshaledValue.object=args.get(i).getValue();
      marshaledValue.paramIndex=i;
      String marshalerClassName=getMarshalerClassName(method,i,false);
      Invokestatic invokestatic=new Invokestatic(getInternalName(method.getDeclaringClass()),marshalerClassName,"toNative","(Ljava/lang/Object;)J");
      trampolines.add(invokestatic);
      Value argI64=call(innerFn,invokestatic.getFunctionRef(),env,args.get(i).getValue());
      marshaledValue.handle=argI64;
      Variable arg=innerFn.newVariable(targetParameterTypes[i]);
      innerFn.add(new Inttoptr(arg,argI64,arg.getType()));
      args.set(i,new Argument(arg.ref(),parameterAttributes));
    }
 else     if (hasPointerAnnotation(method,i)) {
      Variable arg=innerFn.newVariable(I8_PTR);
      innerFn.add(new Inttoptr(arg,args.get(i).getValue(),I8_PTR));
      args.set(i,new Argument(arg.ref()));
    }
  }
  BasicBlockRef bbSuccess=innerFn.newBasicBlockRef(new Label("success"));
  BasicBlockRef bbFailure=innerFn.newBasicBlockRef(new Label("failure"));
  pushNativeFrame(innerFn);
  trycatchAllEnter(innerFn,env,bbSuccess,bbFailure);
  innerFn.newBasicBlock(bbSuccess.getLabel());
  Value resultInner=callWithArguments(innerFn,targetFn.ref(),args);
  trycatchLeave(innerFn,env);
  popNativeFrame(innerFn);
  for (  MarshaledValue value : marshaledValues) {
    soot.Type type=sootMethod.getParameterType(value.paramIndex);
    String marshalerClassName=getMarshalerClassName(method,value.paramIndex,true);
    if (isPtr(type)) {
      SootClass sootPtrTargetClass=getPtrTargetClass(method,value.paramIndex);
      Value ptrTargetClass=ldcClass(innerFn,getInternalName(sootPtrTargetClass),env);
      int ptrWrapCount=getPtrWrapCount(method,value.paramIndex);
      Invokestatic invokestatic=new Invokestatic(getInternalName(method.getDeclaringClass()),marshalerClassName,"updatePtr","(Lorg/robovm/rt/bro/ptr/Ptr;Ljava/lang/Class;JI)V");
      trampolines.add(invokestatic);
      call(innerFn,invokestatic.getFunctionRef(),env,value.object,ptrTargetClass,value.handle,new IntegerConstant(ptrWrapCount));
    }
 else {
      Invokestatic invokestatic=new Invokestatic(getInternalName(method.getDeclaringClass()),marshalerClassName,"updateObject","(Ljava/lang/Object;J)V");
      trampolines.add(invokestatic);
      call(innerFn,invokestatic.getFunctionRef(),env,value.object,value.handle);
    }
  }
  if (needsMarshaler(method.getReturnType())) {
    String marshalerClassName=getMarshalerClassName(method,true);
    if (isPtr(method.getReturnType())) {
      SootClass sootPtrTargetClass=getPtrTargetClass(method);
      Value ptrTargetClass=ldcClass(innerFn,getInternalName(sootPtrTargetClass),env);
      int ptrWrapCount=getPtrWrapCount(method);
      Invokestatic invokestatic=new Invokestatic(getInternalName(method.getDeclaringClass()),marshalerClassName,"toPtr","(Ljava/lang/Class;JI)Lorg/robovm/rt/bro/ptr/Ptr;");
      trampolines.add(invokestatic);
      Variable handle=innerFn.newVariable(I64);
      innerFn.add(new Ptrtoint(handle,resultInner,I64));
      resultInner=call(innerFn,invokestatic.getFunctionRef(),env,ptrTargetClass,handle.ref(),new IntegerConstant(ptrWrapCount));
    }
 else {
      boolean copy=isPassByValue(method);
      if (copy) {
        Variable stackCopy=innerFn.newVariable(new PointerType(targetFnType.getReturnType()));
        innerFn.add(new Alloca(stackCopy,targetFnType.getReturnType()));
        innerFn.add(new Store(resultInner,stackCopy.ref()));
        resultInner=stackCopy.ref();
      }
      String targetClassName=getInternalName(method.getReturnType());
      Value returnClass=ldcClass(innerFn,targetClassName,env);
      Invokestatic invokestatic=new Invokestatic(getInternalName(method.getDeclaringClass()),marshalerClassName,"toObject","(Ljava/lang/Class;JZ)Ljava/lang/Object;");
      trampolines.add(invokestatic);
      Variable handle=innerFn.newVariable(I64);
      innerFn.add(new Ptrtoint(handle,resultInner,I64));
      resultInner=call(innerFn,invokestatic.getFunctionRef(),env,returnClass,handle.ref(),new IntegerConstant((byte)(copy ? 1 : 0)));
    }
  }
 else   if (hasPointerAnnotation(method)) {
    Variable resultI64=innerFn.newVariable(I64);
    innerFn.add(new Ptrtoint(resultI64,resultInner,I64));
    resultInner=resultI64.ref();
  }
  innerFn.add(new Ret(resultInner));
  innerFn.newBasicBlock(bbFailure.getLabel());
  trycatchLeave(innerFn,env);
  popNativeFrame(innerFn);
  call(innerFn,BC_THROW_IF_EXCEPTION_OCCURRED,env);
  innerFn.add(new Unreachable());
}
