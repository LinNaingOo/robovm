{
  validateBridgeMethod(method);
  AnnotationTag bridgeAnnotation=getAnnotation(method,BRIDGE);
  boolean dynamic=readBooleanElem(bridgeAnnotation,"dynamic",false);
  boolean optional=readBooleanElem(bridgeAnnotation,"optional",false);
  Function fn=FunctionBuilder.method(method);
  moduleBuilder.addFunction(fn);
  Type[] parameterTypes=fn.getType().getParameterTypes();
  String[] parameterNames=fn.getParameterNames();
  ArrayList<Argument> args=new ArrayList<Argument>();
  for (int i=0; i < parameterTypes.length; i++) {
    args.add(new Argument(new VariableRef(parameterNames[i],parameterTypes[i])));
  }
  VariableRef env=fn.getParameterRef(0);
  Variable targetFn=fn.newVariable(I8_PTR);
  if (!dynamic) {
    Global targetFnPtr=new Global(Symbols.bridgePtrSymbol(method),_private,new NullConstant(I8_PTR));
    moduleBuilder.addGlobal(targetFnPtr);
    fn.add(new Load(targetFn,targetFnPtr.ref()));
    Label nullLabel=new Label();
    Label notNullLabel=new Label();
    Variable nullCheck=fn.newVariable(I1);
    fn.add(new Icmp(nullCheck,Condition.eq,targetFn.ref(),new NullConstant(I8_PTR)));
    fn.add(new Br(nullCheck.ref(),fn.newBasicBlockRef(nullLabel),fn.newBasicBlockRef(notNullLabel)));
    fn.newBasicBlock(nullLabel);
    call(fn,BC_THROW_UNSATISIFED_LINK_ERROR,env,moduleBuilder.getString(String.format((optional ? "Optional " : "") + "@Bridge method %s.%s%s not bound",className,method.getName(),getDescriptor(method))));
    fn.add(new Unreachable());
    fn.newBasicBlock(notNullLabel);
  }
 else {
    fn.add(new Inttoptr(targetFn,fn.getParameterRef(1),targetFn.getType()));
    args.remove(1);
  }
  args.remove(0);
  List<MarshaledArg> marshaledArgs=new ArrayList<MarshaledArg>();
  FunctionType targetFnType=getBridgeFunctionType(method,dynamic,false);
  Type[] targetParameterTypes=targetFnType.getParameterTypes();
  if (!method.isStatic()) {
    MarshalerMethod marshalerMethod=config.getMarshalerLookup().findMarshalerMethod(new MarshalSite(method,MarshalSite.RECEIVER));
    MarshaledArg marshaledArg=new MarshaledArg();
    marshaledArg.paramIndex=MarshalSite.RECEIVER;
    marshaledArgs.add(marshaledArg);
    Value nativeValue=marshalObjectToNative(fn,marshalerMethod,marshaledArg,I8_PTR,env,args.get(0).getValue(),MarshalerFlags.CALL_TYPE_BRIDGE);
    args.set(0,new Argument(nativeValue));
  }
  for (int i=0, argIdx=0; i < method.getParameterCount(); i++) {
    if (dynamic && i == 0) {
      continue;
    }
    if (!method.isStatic() && argIdx == 0) {
      argIdx++;
    }
    soot.Type type=method.getParameterType(i);
    if (needsMarshaler(type)) {
      MarshalerMethod marshalerMethod=config.getMarshalerLookup().findMarshalerMethod(new MarshalSite(method,i));
      Type nativeType=targetParameterTypes[argIdx];
      if (nativeType instanceof PrimitiveType) {
        Value nativeValue=marshalValueObjectToNative(fn,marshalerMethod,nativeType,env,args.get(argIdx).getValue(),MarshalerFlags.CALL_TYPE_BRIDGE);
        args.set(argIdx,new Argument(nativeValue));
      }
 else {
        ParameterAttribute[] parameterAttributes=new ParameterAttribute[0];
        if (isPassByValue(method,i) || isStructRet(method,i)) {
          call(fn,CHECK_NULL,env,args.get(argIdx).getValue());
        }
        MarshaledArg marshaledArg=new MarshaledArg();
        marshaledArg.paramIndex=i;
        marshaledArgs.add(marshaledArg);
        Value nativeValue=marshalObjectToNative(fn,marshalerMethod,marshaledArg,I8_PTR,env,args.get(argIdx).getValue(),MarshalerFlags.CALL_TYPE_BRIDGE,false);
        args.set(argIdx,new Argument(nativeValue,parameterAttributes));
      }
    }
 else {
      args.set(argIdx,new Argument(marshalPrimitiveToNative(fn,method,i,args.get(argIdx).getValue())));
    }
    argIdx++;
  }
  args.add(0,new Argument(targetFn.ref()));
  Variable structResult=null;
  if (targetFnType.getReturnType() instanceof StructureType) {
    Variable tmp=fn.newVariable(new PointerType(targetFnType.getReturnType()));
    fn.add(new Alloca(tmp,targetFnType.getReturnType()));
    structResult=fn.newVariable(I8_PTR);
    fn.add(new Bitcast(structResult,tmp.ref(),I8_PTR));
    args.add(1,new Argument(structResult.ref()));
  }
  String wrapperName=Symbols.bridgeCSymbol(method);
  FunctionType wrapperFnType=getBridgeFunctionType(method,dynamic,true);
  getCWrapperFunctions().add(createBridgeCWrapper(targetFnType.getReturnType(),targetFnType.getParameterTypes(),wrapperFnType.getParameterTypes(),wrapperName));
  FunctionRef wrapperFnRef=getBridgeCWrapperRef(wrapperFnType,wrapperName);
  moduleBuilder.addFunctionDeclaration(new FunctionDeclaration(wrapperFnRef));
  BasicBlockRef bbSuccess=fn.newBasicBlockRef(new Label("success"));
  BasicBlockRef bbFailure=fn.newBasicBlockRef(new Label("failure"));
  pushNativeFrame(fn);
  trycatchAllEnter(fn,env,bbSuccess,bbFailure);
  fn.newBasicBlock(bbSuccess.getLabel());
  Value result=callWithArguments(fn,wrapperFnRef,args);
  trycatchLeave(fn,env);
  popNativeFrame(fn);
  updateObject(method,fn,env,MarshalerFlags.CALL_TYPE_BRIDGE,marshaledArgs);
  if (needsMarshaler(method.getReturnType())) {
    MarshalerMethod marshalerMethod=config.getMarshalerLookup().findMarshalerMethod(new MarshalSite(method));
    String targetClassName=getInternalName(method.getReturnType());
    if (structResult != null) {
      DataLayout dataLayout=config.getDataLayout();
      Value heapCopy=call(fn,BC_COPY_STRUCT,env,structResult.ref(),new IntegerConstant(dataLayout.getAllocSize(targetFnType.getReturnType())));
      result=marshalNativeToObject(fn,marshalerMethod,null,env,targetClassName,heapCopy,MarshalerFlags.CALL_TYPE_BRIDGE);
    }
 else     if (targetFnType.getReturnType() instanceof PrimitiveType) {
      result=marshalNativeToValueObject(fn,marshalerMethod,env,targetClassName,result,MarshalerFlags.CALL_TYPE_BRIDGE);
    }
 else {
      result=marshalNativeToObject(fn,marshalerMethod,null,env,targetClassName,result,MarshalerFlags.CALL_TYPE_BRIDGE);
    }
  }
 else {
    result=marshalNativeToPrimitive(fn,method,result);
  }
  fn.add(new Ret(result));
  fn.newBasicBlock(bbFailure.getLabel());
  trycatchLeave(fn,env);
  popNativeFrame(fn);
  Value ex=call(fn,BC_EXCEPTION_CLEAR,env);
  updateObject(method,fn,env,MarshalerFlags.CALL_TYPE_BRIDGE,marshaledArgs);
  call(fn,BC_THROW,env,ex);
  fn.add(new Unreachable());
  return fn;
}
