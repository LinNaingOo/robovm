{
  LinkedList<Object> stmtStack=new LinkedList<Object>();
  LinkedList<Integer> indexStack=new LinkedList<Integer>();
  stmtToColor.put(startStmt,new Integer(GRAY));
  stmtStack.addLast(startStmt);
  indexStack.addLast(new Integer(-1));
  while (!stmtStack.isEmpty()) {
    int toVisitIndex=indexStack.removeLast().intValue();
    Object toVisitNode=stmtStack.getLast();
    toVisitIndex++;
    indexStack.addLast(new Integer(toVisitIndex));
    if (toVisitIndex >= graph.getPredsOf(toVisitNode).size()) {
      if (mIsReversed)       order.addLast(toVisitNode);
 else       order.addFirst(toVisitNode);
      stmtToColor.put(toVisitNode,new Integer(BLACK));
      stmtStack.removeLast();
      indexStack.removeLast();
    }
 else {
      Object childNode=graph.getPredsOf(toVisitNode).get(toVisitIndex);
      if (stmtToColor.get(childNode).intValue() == WHITE) {
        stmtToColor.put(childNode,new Integer(GRAY));
        stmtStack.addLast(childNode);
        indexStack.addLast(new Integer(-1));
      }
    }
  }
}
