{
  if (!DEFSupported) {
    fail(NotSupportMsg);
    return;
  }
  createKeys();
  KeyAgreement[] kAgs=createKAs();
  DHParameterSpec dhPs=((DHPrivateKey)privKey).getParams();
  AlgorithmParameterSpec aps=new RSAKeyGenParameterSpec(10,new BigInteger("10"));
  byte[] bbRes1;
  byte[] bbRes2;
  byte[] bbRes3;
  SecureRandom randomNull=null;
  SecureRandom random=new SecureRandom();
  for (int i=0; i < kAgs.length; i++) {
    kAgs[i].init(privKey,dhPs);
    kAgs[i].doPhase(publKey,true);
    bbRes1=kAgs[i].generateSecret();
    kAgs[i].init(privKey,dhPs,random);
    kAgs[i].doPhase(publKey,true);
    bbRes2=kAgs[i].generateSecret();
    assertEquals("Incorrect byte array length",bbRes1.length,bbRes2.length);
    for (int j=0; j < bbRes1.length; j++) {
      assertEquals("Incorrect byte (index: ".concat(Integer.toString(i)).concat(")"),bbRes1[j],bbRes2[j]);
    }
    kAgs[i].init(privKey,dhPs,randomNull);
    kAgs[i].doPhase(publKey,true);
    bbRes3=kAgs[i].generateSecret();
    assertEquals("Incorrect byte array length",bbRes1.length,bbRes3.length);
    for (int j=0; j < bbRes1.length; j++) {
      assertEquals("Incorrect byte (index: ".concat(Integer.toString(i)).concat(")"),bbRes1[j],bbRes3[j]);
    }
    try {
      kAgs[i].init(publKey,dhPs,random);
      fail("InvalidKeyException expected");
    }
 catch (    InvalidKeyException e) {
    }
    try {
      kAgs[i].init(privKey,aps,random);
      fail("InvalidAlgorithmParameterException expected");
    }
 catch (    InvalidAlgorithmParameterException e) {
    }
  }
}
