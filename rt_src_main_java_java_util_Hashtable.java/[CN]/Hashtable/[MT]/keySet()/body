{
  return new Collections.SynchronizedSet<K>(new AbstractSet<K>(){
    @Override public boolean contains(    Object object){
      return containsKey(object);
    }
    @Override public int size(){
      return elementCount;
    }
    @Override public void clear(){
      Hashtable.this.clear();
    }
    @Override public boolean remove(    Object key){
      if (containsKey(key)) {
        Hashtable.this.remove(key);
        return true;
      }
      return false;
    }
    @Override public Iterator<K> iterator(){
      if (this.size() == 0) {
        return (Iterator<K>)EMPTY_ITERATOR;
      }
      return new HashEnumIterator<K>(new MapEntry.Type<K,K,V>(){
        public K get(        MapEntry<K,V> entry){
          return entry.key;
        }
      }
);
    }
  }
,this);
}
