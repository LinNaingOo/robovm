{
  try {
    InetAddress allAddresses[]=InetAddress.getAllByName(InetAddress.getLocalHost().getHostName());
    if (allAddresses.length > 1) {
      ServerSocket serverSocket=new ServerSocket(0,5);
      InetSocketAddress theLocalAddress=new InetSocketAddress((InetAddress)allAddresses[1],0);
      InetSocketAddress theOtherLocalAddress=new InetSocketAddress((InetAddress)allAddresses[0],theLocalAddress.getPort());
      Socket theSocket=new Socket();
      theSocket.setReuseAddress(false);
      theSocket.bind(theLocalAddress);
      Socket theSocket2=null;
      String platform=System.getProperty("os.name");
      theSocket2=new Socket();
      theSocket2.setReuseAddress(false);
      theSocket2.bind(theOtherLocalAddress);
      if ((!platform.startsWith("Linux") && !platform.contains("iOS") && !platform.contains("Mac")) && ((!platform.startsWith("Windows")) || !((((InetAddress)allAddresses[0]) instanceof Inet4Address) && (((InetAddress)allAddresses[1]) instanceof Inet4Address)))) {
        fail("No exception when setReuseAddress is false and we bind:" + theLocalAddress.toString() + ":"+ theOtherLocalAddress.toString());
      }
      theSocket.close();
      theSocket2.close();
      theLocalAddress=new InetSocketAddress((InetAddress)allAddresses[0],0);
      theSocket=new Socket();
      theSocket.setReuseAddress(true);
      theSocket.bind(theLocalAddress);
      theSocket2=new Socket();
      theSocket2.setReuseAddress(true);
      theOtherLocalAddress=new InetSocketAddress((InetAddress)allAddresses[1],theSocket.getLocalPort());
      theSocket2.bind(theOtherLocalAddress);
      theSocket2.close();
      theSocket.close();
      serverSocket.close();
      theLocalAddress=new InetSocketAddress((InetAddress)allAddresses[0],0);
      theSocket=new Socket();
      theSocket.bind(theLocalAddress);
      theSocket2=new Socket();
      theOtherLocalAddress=new InetSocketAddress((InetAddress)allAddresses[1],theSocket.getLocalPort());
      theSocket2.bind(theOtherLocalAddress);
      theSocket2.close();
      theSocket.close();
      serverSocket.close();
      ensureExceptionThrownIfOptionIsUnsupportedOnOS(SO_REUSEADDR);
    }
  }
 catch (  Exception e) {
    handleException(e,SO_REUSEADDR);
  }
  try {
    Socket theSocket=new Socket();
    theSocket.close();
    theSocket.setReuseAddress(true);
    fail("SocketException was not thrown.");
  }
 catch (  SocketException ioe) {
  }
catch (  IOException ioe) {
    fail("IOException was thrown.");
  }
}
