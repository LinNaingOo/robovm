{
class mySocketAddress extends SocketAddress {
    public mySocketAddress(){
    }
  }
  Socket theSocket=new Socket();
  try {
    theSocket.bind(new InetSocketAddress(InetAddress.getByAddress(Support_Configuration.nonLocalAddressBytes),80));
    fail("No exception when binding to bad address:" + theSocket.getLocalSocketAddress().toString());
  }
 catch (  IOException ex) {
  }
  theSocket.close();
  theSocket=new Socket();
  theSocket.bind(new InetSocketAddress(InetAddress.getLocalHost(),0));
  assertEquals(new InetSocketAddress(InetAddress.getLocalHost(),theSocket.getLocalPort()),theSocket.getLocalSocketAddress());
  ServerSocket serverSocket=new ServerSocket(0,5);
  theSocket.connect(serverSocket.getLocalSocketAddress());
  Socket servSock=serverSocket.accept();
  assertEquals(new InetSocketAddress(InetAddress.getLocalHost(),theSocket.getLocalPort()),servSock.getRemoteSocketAddress());
  theSocket.close();
  servSock.close();
  serverSocket.close();
  theSocket=new Socket();
  theSocket.bind(null);
  assertNotNull("Bind with null did not work",theSocket.getLocalSocketAddress());
  theSocket.close();
  theSocket=new Socket();
  Socket theSocket2=new Socket();
  try {
    theSocket.bind(null);
    theSocket2.bind(theSocket.getLocalSocketAddress());
    fail("No exception binding to address that is not available");
  }
 catch (  IOException ex) {
  }
  theSocket.close();
  theSocket2.close();
  theSocket=new Socket();
  try {
    theSocket.bind(new mySocketAddress());
    fail("No exception when binding using unsupported SocketAddress subclass");
  }
 catch (  IllegalArgumentException ex) {
  }
  theSocket.close();
}
