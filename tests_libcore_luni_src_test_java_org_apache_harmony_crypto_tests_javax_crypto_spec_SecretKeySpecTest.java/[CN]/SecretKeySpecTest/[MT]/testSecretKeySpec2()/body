{
  byte[] key=new byte[]{1,2,3,4,5};
  int offset=1;
  int len=4;
  String algorithm="Algorithm";
  try {
    new SecretKeySpec(new byte[]{},0,0,algorithm);
    fail("An IllegalArgumentException should be thrown " + "in the case of empty key.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    new SecretKeySpec(null,0,0,algorithm);
    fail("An IllegalArgumentException should be thrown " + "in the case of null key.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    new SecretKeySpec(key,offset,len,null);
    fail("An IllegalArgumentException should be thrown " + "in the case of short key algorithm.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    new SecretKeySpec(key,offset,key.length,algorithm);
    fail("An IllegalArgumentException should be thrown " + "in the case of null key.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    new SecretKeySpec(key,0,-1,algorithm);
    fail("An ArrayIndexOutOfBoundsException should be thrown " + "in the case of illegal length.");
  }
 catch (  IllegalArgumentException e) {
    fail("Not expected IllegalArgumentException was thrown.");
  }
catch (  ArrayIndexOutOfBoundsException e) {
  }
  SecretKeySpec ks=new SecretKeySpec(key,algorithm);
  key[offset]++;
  assertFalse("The change of key specified in the constructor " + "should not cause the change of internal array.",key[offset] == ks.getEncoded()[0]);
  try {
    new SecretKeySpec(new byte[]{2},4,-100,"CCC");
    fail("ArrayIndexOutOfBoundsException expected");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
}
