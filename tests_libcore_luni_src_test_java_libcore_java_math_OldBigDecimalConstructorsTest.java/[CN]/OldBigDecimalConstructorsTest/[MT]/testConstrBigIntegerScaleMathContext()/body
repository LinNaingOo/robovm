{
  String a="1231212478987482988429808779810457634781384756794987";
  BigInteger bA=new BigInteger(a);
  int aScale=10;
  int precision=46;
  RoundingMode rm=RoundingMode.CEILING;
  MathContext mc=new MathContext(precision,rm);
  String res="1231212478987482988429808779810457634781384757";
  int resScale=4;
  BigDecimal result=new BigDecimal(bA,aScale,mc);
  assertEquals("incorrect value",res,result.unscaledValue().toString());
  assertEquals("incorrect scale",resScale,result.scale());
  BigDecimal bd;
  BigInteger bi=new BigInteger("12345678901234567890123456789012345");
  BigInteger nbi=new BigInteger("-12345678901234567890123456789012345");
  mc=new MathContext(31,RoundingMode.UP);
  bd=new BigDecimal(bi,-10,mc);
  assertEquals("incorrect value","1.234567890123456789012345678902E+44",bd.toString());
  bd=new BigDecimal(nbi,-10,mc);
  assertEquals("incorrect value","-1.234567890123456789012345678902E+44",bd.toString());
  mc=new MathContext(28,RoundingMode.DOWN);
  bd=new BigDecimal(bi,-10,mc);
  assertEquals("incorrect value","1.234567890123456789012345678E+44",bd.toString());
  bd=new BigDecimal(nbi,-10,mc);
  assertEquals("incorrect value","-1.234567890123456789012345678E+44",bd.toString());
  mc=new MathContext(33,RoundingMode.CEILING);
  bd=new BigDecimal(bi,-10,mc);
  assertEquals("incorrect value","1.23456789012345678901234567890124E+44",bd.toString());
  bd=new BigDecimal(nbi,-10,mc);
  assertEquals("incorrect value","-1.23456789012345678901234567890123E+44",bd.toString());
  mc=new MathContext(34,RoundingMode.FLOOR);
  bd=new BigDecimal(bi,-10,mc);
  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());
  bd=new BigDecimal(nbi,-10,mc);
  assertEquals("incorrect value","-1.234567890123456789012345678901235E+44",bd.toString());
  mc=new MathContext(34,RoundingMode.HALF_EVEN);
  bd=new BigDecimal(bi,-10,mc);
  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());
  bd=new BigDecimal(nbi,-10,mc);
  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());
  bd=new BigDecimal(new BigInteger("-12345678901234567890123456789012335"),-10,mc);
  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());
  mc=new MathContext(34,RoundingMode.HALF_UP);
  bd=new BigDecimal(bi,-10,mc);
  assertEquals("incorrect value","1.234567890123456789012345678901235E+44",bd.toString());
  bd=new BigDecimal(nbi,-10,mc);
  assertEquals("incorrect value","-1.234567890123456789012345678901235E+44",bd.toString());
  mc=new MathContext(34,RoundingMode.HALF_DOWN);
  bd=new BigDecimal(bi,-10,mc);
  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());
  bd=new BigDecimal(nbi,-10,mc);
  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());
  mc=new MathContext(34,RoundingMode.UNNECESSARY);
  try {
    bd=new BigDecimal(bi,-10,mc);
    fail("No ArithmeticException for RoundingMode.UNNECESSARY");
  }
 catch (  ArithmeticException e) {
  }
  try {
    bd=new BigDecimal(nbi,-10,mc);
    fail("No ArithmeticException for RoundingMode.UNNECESSARY");
  }
 catch (  ArithmeticException e) {
  }
  mc=new MathContext(31,RoundingMode.UP);
  bd=new BigDecimal(bi,10,mc);
  assertEquals("incorrect value","1234567890123456789012345.678902",bd.toString());
  bd=new BigDecimal(nbi,10,mc);
  assertEquals("incorrect value","-1234567890123456789012345.678902",bd.toString());
  mc=new MathContext(28,RoundingMode.DOWN);
  bd=new BigDecimal(bi,10,mc);
  assertEquals("incorrect value","1234567890123456789012345.678",bd.toString());
  bd=new BigDecimal(nbi,10,mc);
  assertEquals("incorrect value","-1234567890123456789012345.678",bd.toString());
  mc=new MathContext(33,RoundingMode.CEILING);
  bd=new BigDecimal(bi,10,mc);
  assertEquals("incorrect value","1234567890123456789012345.67890124",bd.toString());
  bd=new BigDecimal(nbi,10,mc);
  assertEquals("incorrect value","-1234567890123456789012345.67890123",bd.toString());
  mc=new MathContext(34,RoundingMode.FLOOR);
  bd=new BigDecimal(bi,10,mc);
  assertEquals("incorrect value","1234567890123456789012345.678901234",bd.toString());
  bd=new BigDecimal(nbi,10,mc);
  assertEquals("incorrect value","-1234567890123456789012345.678901235",bd.toString());
  mc=new MathContext(34,RoundingMode.HALF_EVEN);
  bd=new BigDecimal(bi,10,mc);
  assertEquals("incorrect value","1234567890123456789012345.678901234",bd.toString());
  bd=new BigDecimal(nbi,10,mc);
  assertEquals("incorrect value","-1234567890123456789012345.678901234",bd.toString());
  bd=new BigDecimal(new BigInteger("-12345678901234567890123456789012335"),10,mc);
  assertEquals("incorrect value","-1234567890123456789012345.678901234",bd.toString());
  mc=new MathContext(34,RoundingMode.HALF_UP);
  bd=new BigDecimal(bi,10,mc);
  assertEquals("incorrect value","1234567890123456789012345.678901235",bd.toString());
  bd=new BigDecimal(nbi,10,mc);
  assertEquals("incorrect value","-1234567890123456789012345.678901235",bd.toString());
  mc=new MathContext(34,RoundingMode.HALF_DOWN);
  bd=new BigDecimal(bi,10,mc);
  assertEquals("incorrect value","1234567890123456789012345.678901234",bd.toString());
  bd=new BigDecimal(nbi,10,mc);
  assertEquals("incorrect value","-1234567890123456789012345.678901234",bd.toString());
  mc=new MathContext(34,RoundingMode.UNNECESSARY);
  try {
    bd=new BigDecimal(bi,10,mc);
    fail("No ArithmeticException for RoundingMode.UNNECESSARY");
  }
 catch (  ArithmeticException e) {
  }
  try {
    bd=new BigDecimal(nbi,10,mc);
    fail("No ArithmeticException for RoundingMode.UNNECESSARY");
  }
 catch (  ArithmeticException e) {
  }
  mc=new MathContext(28,RoundingMode.FLOOR);
  bd=new BigDecimal(bi,10,mc);
  assertEquals("incorrect value","1234567890123456789012345.678",bd.toString());
  bd=new BigDecimal(nbi,10,mc);
  assertEquals("incorrect value","-1234567890123456789012345.679",bd.toString());
}
