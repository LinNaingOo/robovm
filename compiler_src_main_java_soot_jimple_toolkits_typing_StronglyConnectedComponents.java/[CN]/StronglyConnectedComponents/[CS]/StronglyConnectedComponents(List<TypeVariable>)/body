{
  variables=typeVariableList;
  black=new TreeSet<TypeVariable>();
  finished=new LinkedList<TypeVariable>();
  for (  TypeVariable var : variables) {
    if (!black.contains(var)) {
      black.add(var);
      dfsg_visit(var);
    }
  }
  black=new TreeSet<TypeVariable>();
  for (  TypeVariable var : finished) {
    if (!black.contains(var)) {
      current_tree=new LinkedList<TypeVariable>();
      forest.add(current_tree);
      black.add(var);
      dfsgt_visit(var);
    }
  }
  for (Iterator<LinkedList<TypeVariable>> i=forest.iterator(); i.hasNext(); ) {
    LinkedList list=i.next();
    TypeVariable previous=null;
    StringBuffer s=null;
    if (DEBUG) {
      s=new StringBuffer("scc:\n");
    }
    for (Iterator j=list.iterator(); j.hasNext(); ) {
      TypeVariable current=(TypeVariable)j.next();
      if (DEBUG) {
        s.append(" " + current + "\n");
      }
      if (previous == null) {
        previous=current;
      }
 else {
        try {
          previous=previous.union(current);
        }
 catch (        TypeException e) {
          if (DEBUG) {
            G.v().out.println(s);
          }
          throw e;
        }
      }
    }
  }
}
