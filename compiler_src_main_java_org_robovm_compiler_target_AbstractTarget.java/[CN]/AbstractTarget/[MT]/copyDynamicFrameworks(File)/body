{
  final Set<String> swiftLibraries=new HashSet<>();
  File frameworksDir=new File(destDir,"Frameworks");
  for (  String framework : config.getFrameworks()) {
    boolean isCustomFramework=false;
    File frameworkDir=null;
    for (    File path : config.getFrameworkPaths()) {
      frameworkDir=new File(path,framework + ".framework");
      if (frameworkDir.exists() && frameworkDir.isDirectory()) {
        isCustomFramework=true;
        break;
      }
    }
    if (isCustomFramework) {
      boolean isDynamicFramework=false;
      for (      File file : frameworkDir.listFiles()) {
        if (file.isFile() && isDynamicLibrary(file)) {
          isDynamicFramework=true;
        }
      }
      if (isDynamicFramework) {
        config.getLogger().debug("Copying framework %s from %s to %s",framework,frameworkDir,destDir);
        new Resource(frameworkDir).walk(new Walker(){
          @Override public boolean processDir(          Resource resource,          File dir,          File destDir) throws IOException {
            return !(dir.getName().equals("Headers") || dir.getName().equals("PrivateHeaders") || dir.getName().equals("Modules")|| dir.getName().equals("_CodeSignature")|| dir.getName().equals("Versions")|| dir.getName().equals("Documentation"));
          }
          @Override public void processFile(          Resource resource,          File file,          File destDir) throws IOException {
            if (!isStaticLibrary(file)) {
              copyFile(resource,file,destDir);
              if (isDynamicLibrary(file)) {
                if (config.getOs() == OS.ios && config.getArch().isArm()) {
                  File inFile=new File(destDir,file.getName());
                  File tmpFile=new File(destDir,file.getName() + ".tmp");
                  ToolchainUtil.lipoRemoveArchs(config,inFile,tmpFile,Arch.x86,Arch.x86_64);
                  FileUtils.copyFile(tmpFile,inFile);
                  tmpFile.delete();
                }
                String dependencies=ToolchainUtil.otool(file);
                Pattern swiftLibraryPattern=Pattern.compile("libswift.+\\.dylib");
                Matcher matcher=swiftLibraryPattern.matcher(dependencies);
                while (matcher.find()) {
                  String library=dependencies.substring(matcher.start(),matcher.end());
                  swiftLibraries.add(library);
                }
              }
            }
          }
        }
,frameworksDir);
      }
    }
  }
  if (!swiftLibraries.isEmpty()) {
    String system=null;
    if (config.getOs() == OS.ios) {
      if (config.getArch().isArm()) {
        system="iphoneos";
      }
 else {
        system="iphonesimulator";
      }
    }
 else {
      system="mac";
    }
    File swiftDir=new File(ToolchainUtil.findXcodePath(),"Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/" + system);
    for (    String library : swiftLibraries) {
      File swiftLibrary=new File(swiftDir,library);
      FileUtils.copyFileToDirectory(swiftLibrary,frameworksDir);
    }
  }
}
