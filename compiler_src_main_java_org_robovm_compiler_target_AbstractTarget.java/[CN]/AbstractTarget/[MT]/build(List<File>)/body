{
  File outFile=new File(config.getTmpDir(),config.getExecutableName());
  config.getLogger().debug("Building executable %s",outFile);
  LinkedList<String> ccArgs=new LinkedList<String>();
  LinkedList<String> libs=new LinkedList<String>();
  String libSuffix=config.isUseDebugLibs() ? "-dbg" : "";
  libs.add("-lrobovm-bc" + libSuffix);
  if (config.getOs().getFamily() == OS.Family.darwin) {
    libs.add("-force_load");
    libs.add(new File(config.getOsArchDepLibDir(),"librobovm-rt" + libSuffix + ".a").getAbsolutePath());
  }
 else {
    libs.addAll(Arrays.asList("-Wl,--whole-archive","-lrobovm-rt" + libSuffix,"-Wl,--no-whole-archive"));
  }
  if (config.isSkipInstall()) {
    libs.add("-lrobovm-debug" + libSuffix);
  }
  libs.addAll(Arrays.asList("-lrobovm-core" + libSuffix,"-lgc" + libSuffix,"-lpthread","-ldl","-lm"));
  if (config.getOs().getFamily() == OS.Family.linux) {
    libs.add("-lrt");
  }
  if (config.getOs().getFamily() == OS.Family.darwin) {
    libs.add("-liconv");
    libs.add("-lsqlite3");
    libs.add("-framework");
    libs.add("Foundation");
  }
  ccArgs.add("-L");
  ccArgs.add(config.getOsArchDepLibDir().getAbsolutePath());
  if (config.getOs().getFamily() == OS.Family.linux) {
    ccArgs.add("-Wl,-rpath=$ORIGIN");
    ccArgs.add("-Wl,--gc-sections");
  }
 else   if (config.getOs().getFamily() == OS.Family.darwin) {
    ccArgs.add("-ObjC");
    File exportedSymbolsFile=new File(config.getTmpDir(),"exported_symbols");
    List<String> exportedSymbols=new ArrayList<String>();
    if (config.isSkipInstall()) {
      exportedSymbols.add("catch_exception_raise");
    }
    exportedSymbols.addAll(config.getExportedSymbols());
    for (int i=0; i < exportedSymbols.size(); i++) {
      exportedSymbols.set(i,"_" + exportedSymbols.get(i));
    }
    FileUtils.writeLines(exportedSymbolsFile,"ASCII",exportedSymbols);
    ccArgs.add("-exported_symbols_list");
    ccArgs.add(exportedSymbolsFile.getAbsolutePath());
    ccArgs.add("-Wl,-no_implicit_dylibs");
    ccArgs.add("-Wl,-dead_strip");
  }
  if (config.getOs().getFamily() == OS.Family.darwin && !config.getFrameworks().isEmpty()) {
    for (    String p : config.getFrameworks()) {
      libs.add("-framework");
      libs.add(p);
    }
  }
  if (config.getOs().getFamily() == OS.Family.darwin && !config.getWeakFrameworks().isEmpty()) {
    for (    String p : config.getWeakFrameworks()) {
      libs.add("-weak_framework");
      libs.add(p);
    }
  }
  if (config.getOs().getFamily() == OS.Family.darwin && !config.getFrameworkPaths().isEmpty()) {
    for (    File p : config.getFrameworkPaths()) {
      ccArgs.add("-F" + p.getAbsolutePath());
    }
  }
  if (!config.getLibs().isEmpty()) {
    objectFiles=new ArrayList<File>(objectFiles);
    for (    Config.Lib lib : config.getLibs()) {
      String p=lib.getValue();
      if (p.endsWith(".o")) {
        objectFiles.add(new File(p));
      }
 else       if (p.endsWith(".a")) {
        if (config.getOs().getFamily() == OS.Family.darwin) {
          if (lib.isForce()) {
            libs.add("-force_load");
          }
          libs.add(new File(p).getAbsolutePath());
        }
 else {
          if (lib.isForce()) {
            libs.add("-Wl,--whole-archive");
          }
          libs.add(new File(p).getAbsolutePath());
          if (lib.isForce()) {
            libs.add("-Wl,--no-whole-archive");
          }
        }
      }
 else       if (p.endsWith(".dylib") || p.endsWith(".so")) {
        libs.add(new File(p).getAbsolutePath());
      }
 else {
        libs.add("-l" + p);
      }
    }
  }
  if (config.getOs() == OS.macosx) {
    if (!config.getFrameworks().contains("CoreServices")) {
      libs.add("-framework");
      libs.add("CoreServices");
    }
  }
 else   if (config.getOs() == OS.ios) {
    if (!config.getFrameworks().contains("MobileCoreServices")) {
      libs.add("-framework");
      libs.add("MobileCoreServices");
    }
  }
  doBuild(outFile,ccArgs,objectFiles,libs);
}
