{
  CPOptions options=new CPOptions(opts);
  StmtBody stmtBody=(StmtBody)b;
  int fastCopyPropagationCount=0;
  int slowCopyPropagationCount=0;
  if (Options.v().verbose())   G.v().out.println("[" + stmtBody.getMethod().getName() + "] Propagating copies...");
  if (Options.v().time())   Timers.v().propagatorTimer.start();
  Chain units=stmtBody.getUnits();
  Map<Local,Integer> localToDefCount=new HashMap<Local,Integer>();
{
    Iterator stmtIt=units.iterator();
    while (stmtIt.hasNext()) {
      Stmt s=(Stmt)stmtIt.next();
      if (s instanceof DefinitionStmt && ((DefinitionStmt)s).getLeftOp() instanceof Local) {
        Local l=(Local)((DefinitionStmt)s).getLeftOp();
        if (!localToDefCount.containsKey(l))         localToDefCount.put(l,new Integer(1));
 else         localToDefCount.put(l,new Integer(localToDefCount.get(l).intValue() + 1));
      }
    }
  }
  ExceptionalUnitGraph graph=new ExceptionalUnitGraph(stmtBody);
  LocalDefs localDefs;
  localDefs=new SmartLocalDefs(graph,new SimpleLiveLocals(graph));
{
    Iterator stmtIt=(new PseudoTopologicalOrderer()).newList(graph,false).iterator();
    while (stmtIt.hasNext()) {
      Stmt stmt=(Stmt)stmtIt.next();
      Iterator useBoxIt=stmt.getUseBoxes().iterator();
      while (useBoxIt.hasNext()) {
        ValueBox useBox=(ValueBox)useBoxIt.next();
        if (useBox.getValue() instanceof Local) {
          Local l=(Local)useBox.getValue();
          if (options.only_regular_locals() && l.getName().startsWith("$"))           continue;
          if (options.only_stack_locals() && !l.getName().startsWith("$"))           continue;
          List<Unit> defsOfUse=localDefs.getDefsOfAt(l,stmt);
          if (defsOfUse.size() == 1) {
            DefinitionStmt def=(DefinitionStmt)defsOfUse.get(0);
            if (def.getRightOp() instanceof Local) {
              Local m=(Local)def.getRightOp();
              if (l != m) {
                Object dcObj=localToDefCount.get(m);
                if (dcObj == null)                 throw new RuntimeException("Variable " + m + " used without definition!");
                int defCount=((Integer)dcObj).intValue();
                if (defCount == 0)                 throw new RuntimeException("Variable " + m + " used without definition!");
 else                 if (defCount == 1) {
                  useBox.setValue(m);
                  fastCopyPropagationCount++;
                  continue;
                }
                List<Unit> path=graph.getExtendedBasicBlockPathBetween(def,stmt);
                if (path == null) {
                  continue;
                }
                Iterator<Unit> pathIt=path.iterator();
                pathIt.next();
{
                  boolean isRedefined=false;
                  while (pathIt.hasNext()) {
                    Stmt s=(Stmt)pathIt.next();
                    if (stmt == s) {
                      break;
                    }
                    if (s instanceof DefinitionStmt) {
                      if (((DefinitionStmt)s).getLeftOp() == m) {
                        isRedefined=true;
                        break;
                      }
                    }
                  }
                  if (isRedefined)                   continue;
                }
                useBox.setValue(m);
                slowCopyPropagationCount++;
              }
            }
          }
        }
      }
    }
  }
  if (Options.v().verbose())   G.v().out.println("[" + stmtBody.getMethod().getName() + "]     Propagated: "+ fastCopyPropagationCount+ " fast copies  "+ slowCopyPropagationCount+ " slow copies");
  if (Options.v().time())   Timers.v().propagatorTimer.end();
}
