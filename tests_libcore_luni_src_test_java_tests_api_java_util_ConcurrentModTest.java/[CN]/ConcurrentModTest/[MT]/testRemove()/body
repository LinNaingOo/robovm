{
  AbstractList al=new ArrayList();
  Double one=new Double(1.0);
  Double two=new Double(2.0);
  Double three=new Double(3.0);
  Double four=new Double(4.0);
  al.add(one);
  al.add(two);
  al.add(three);
  al.add(four);
  List sub=al.subList(1,3);
  assertEquals(2,sub.size());
  assertTrue(((Double)sub.get(1)).doubleValue() <= 3.0);
  assertTrue(((Double)sub.get(1)).doubleValue() > 2.0);
  al.remove(1);
  try {
    sub.remove(1);
    fail("It should throws ConcurrentModificationException.");
  }
 catch (  ConcurrentModificationException e) {
    return;
  }
  try {
    sub.remove(-1);
    fail("IndexOutOfBoundsException expected");
  }
 catch (  IndexOutOfBoundsException ee) {
  }
  try {
    sub.remove(sub.size() + 1);
    fail("IndexOutOfBoundsException expected");
  }
 catch (  IndexOutOfBoundsException ee) {
  }
  al=new AbstractList(){
    @Override public Object get(    int index){
      return null;
    }
    @Override public int size(){
      return 0;
    }
  }
;
  try {
    al.remove(1);
    fail("UnsupportedOperationException expected");
  }
 catch (  UnsupportedOperationException ee) {
  }
}
