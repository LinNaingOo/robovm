{
  final Map<N,Integer> numbers=new HashMap<N,Integer>();
  List<N> orderedUnits=constructOrderer().newList(graph,true);
  int i=1;
  for (Iterator<N> uIt=orderedUnits.iterator(); uIt.hasNext(); ) {
    final N u=uIt.next();
    numbers.put(u,new Integer(i));
    i++;
  }
  Collection<N> changedUnits=constructWorklist(numbers);
{
    Iterator<N> it=graph.iterator();
    while (it.hasNext()) {
      N s=it.next();
      changedUnits.add(s);
      unitToBeforeFlow.put(s,newInitialFlow());
      unitToAfterFlow.put(s,newInitialFlow());
    }
  }
  List<N> tails=graph.getTails();
{
    Iterator<N> it=tails.iterator();
    while (it.hasNext()) {
      N s=it.next();
      unitToAfterFlow.put(s,entryInitialFlow());
    }
  }
{
    A previousBeforeFlow=newInitialFlow();
    while (!changedUnits.isEmpty()) {
      A beforeFlow;
      A afterFlow;
      N s=changedUnits.iterator().next();
      changedUnits.remove(s);
      boolean isTail=tails.contains(s);
      copy(unitToBeforeFlow.get(s),previousBeforeFlow);
{
        List<N> succs=graph.getSuccsOf(s);
        afterFlow=unitToAfterFlow.get(s);
        if (succs.size() == 1)         copy(unitToBeforeFlow.get(succs.get(0)),afterFlow);
 else         if (succs.size() != 0) {
          Iterator<N> succIt=succs.iterator();
          copy(unitToBeforeFlow.get(succIt.next()),afterFlow);
          while (succIt.hasNext()) {
            A otherBranchFlow=unitToBeforeFlow.get(succIt.next());
            mergeInto(s,afterFlow,otherBranchFlow);
          }
          if (isTail && succs.size() != 0)           mergeInto(s,afterFlow,entryInitialFlow());
        }
      }
{
        beforeFlow=unitToBeforeFlow.get(s);
        if (Options.v().interactive_mode()) {
          A savedFlow=newInitialFlow();
          if (filterUnitToAfterFlow != null) {
            savedFlow=filterUnitToAfterFlow.get(s);
            copy(filterUnitToAfterFlow.get(s),savedFlow);
          }
 else {
            copy(afterFlow,savedFlow);
          }
          FlowInfo fi=new FlowInfo(savedFlow,s,false);
          if (InteractionHandler.v().getStopUnitList() != null && InteractionHandler.v().getStopUnitList().contains(s)) {
            InteractionHandler.v().handleStopAtNodeEvent(s);
          }
          InteractionHandler.v().handleAfterAnalysisEvent(fi);
        }
        flowThrough(afterFlow,s,beforeFlow);
        if (Options.v().interactive_mode()) {
          A bSavedFlow=newInitialFlow();
          if (filterUnitToBeforeFlow != null) {
            bSavedFlow=filterUnitToBeforeFlow.get(s);
            copy(filterUnitToBeforeFlow.get(s),bSavedFlow);
          }
 else {
            copy(beforeFlow,bSavedFlow);
          }
          FlowInfo fi=new FlowInfo(bSavedFlow,s,true);
          InteractionHandler.v().handleBeforeAnalysisEvent(fi);
        }
      }
      if (!beforeFlow.equals(previousBeforeFlow)) {
        Iterator<N> predIt=graph.getPredsOf(s).iterator();
        while (predIt.hasNext()) {
          N pred=predIt.next();
          changedUnits.add(pred);
        }
      }
    }
  }
}
