{
  if (isValidIPV4Address(ipAddressString)) {
    StringTokenizer tokenizer=new StringTokenizer(ipAddressString,".");
    String token="";
    int tempInt=0;
    byte[] byteAddress=new byte[4];
    for (int i=0; i < 4; i++) {
      token=tokenizer.nextToken();
      tempInt=Integer.parseInt(token);
      byteAddress[i]=(byte)tempInt;
    }
    return byteAddress;
  }
  if (ipAddressString.charAt(0) == '[') {
    ipAddressString=ipAddressString.substring(1,ipAddressString.length() - 1);
  }
  StringTokenizer tokenizer=new StringTokenizer(ipAddressString,":.",true);
  ArrayList<String> hexStrings=new ArrayList<String>();
  ArrayList<String> decStrings=new ArrayList<String>();
  String token="";
  String prevToken="";
  int doubleColonIndex=-1;
  while (tokenizer.hasMoreTokens()) {
    prevToken=token;
    token=tokenizer.nextToken();
    if (token.equals(":")) {
      if (prevToken.equals(":")) {
        doubleColonIndex=hexStrings.size();
      }
 else       if (!prevToken.equals("")) {
        hexStrings.add(prevToken);
      }
    }
 else     if (token.equals(".")) {
      decStrings.add(prevToken);
    }
  }
  if (prevToken.equals(":")) {
    if (token.equals(":")) {
      doubleColonIndex=hexStrings.size();
    }
 else {
      hexStrings.add(token);
    }
  }
 else   if (prevToken.equals(".")) {
    decStrings.add(token);
  }
  int hexStringsLength=8;
  if (decStrings.size() > 0) {
    hexStringsLength-=2;
  }
  if (doubleColonIndex != -1) {
    int numberToInsert=hexStringsLength - hexStrings.size();
    for (int i=0; i < numberToInsert; i++) {
      hexStrings.add(doubleColonIndex,"0");
    }
  }
  byte ipByteArray[]=new byte[16];
  for (int i=0; i < hexStrings.size(); i++) {
    convertToBytes(hexStrings.get(i),ipByteArray,i * 2);
  }
  for (int i=0; i < decStrings.size(); i++) {
    ipByteArray[i + 12]=(byte)(Integer.parseInt(decStrings.get(i)) & 255);
  }
  boolean ipV4=true;
  for (int i=0; i < 10; i++) {
    if (ipByteArray[i] != 0) {
      ipV4=false;
      break;
    }
  }
  if (ipByteArray[10] != -1 || ipByteArray[11] != -1) {
    ipV4=false;
  }
  if (ipV4) {
    byte ipv4ByteArray[]=new byte[4];
    for (int i=0; i < 4; i++) {
      ipv4ByteArray[i]=ipByteArray[i + 12];
    }
    return ipv4ByteArray;
  }
  return ipByteArray;
}
