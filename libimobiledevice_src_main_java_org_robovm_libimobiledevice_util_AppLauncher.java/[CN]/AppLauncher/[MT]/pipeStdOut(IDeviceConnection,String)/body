{
  log("App Path: %s",appPath);
  sendGdbPacket(conn,"+");
  sendReceivePacket(conn,encode("QStartNoAckMode"),"OK",true);
  sendGdbPacket(conn,"+");
  sendReceivePacket(conn,encode("QEnvironment:NSUnbufferedIO=YES"),"OK",false);
  for (  Entry<String,String> entry : env.entrySet()) {
    String cmd=String.format("QEnvironment:%s=%s",entry.getKey(),entry.getValue());
    sendReceivePacket(conn,encode(cmd),"OK",false);
  }
  sendReceivePacket(conn,encode("QListThreadsInStopReply"),"OK",false);
  sendReceivePacket(conn,encode("A" + encodeArgs(appPath)),"OK",false);
  sendReceivePacket(conn,encode("qLaunchSuccess"),"OK",false);
  sendGdbPacket(conn,encode("c"));
  boolean wasInterrupted=false;
  try {
    StringBuilder messages=new StringBuilder();
    while (true) {
      try {
        String response=receiveGdbPacket(conn);
        String payload=decode(response);
        if (payload.charAt(0) == 'W') {
          int exitCode=Integer.parseInt(payload.substring(1),16);
          return exitCode;
        }
 else         if (payload.charAt(0) == 'O') {
          byte[] msg=fromHex(payload.substring(1));
          if (appLauncherCallback != null) {
            try {
              String str=new String(msg,"UTF-8");
              messages.append(str);
              String[] lines=messages.toString().split("\n");
              for (              String line : lines) {
                if (line.startsWith("[DEBUG] hooks: debugPort=")) {
                  if (line == lines[lines.length - 1] && !line.endsWith("\r"))                   break;
                  int debugPort=Integer.parseInt(line.substring("[DEBUG] hooks: debugPort=".length()).trim());
                  appLauncherCallback.setDebugPort(debugPort);
                  appLauncherCallback=null;
                }
              }
            }
 catch (            Throwable t) {
            }
          }
          stdout.write(msg);
        }
 else         if (payload.charAt(0) == 'T') {
          String signal=payload.substring(1,3);
          String data=payload.substring(3);
          String threadId=data.replaceAll(".*thread:([0-9a-fA-F]+).*","$1");
          String allThreadIds=data.replaceAll(".*threads:([0-9a-fA-F,]+).*","$1");
          Set<String> ids=new TreeSet<>(Arrays.asList(allThreadIds.split(",")));
          ids.remove(threadId);
          StringBuilder sb=new StringBuilder("vCont;");
          for (          String id : ids) {
            sb.append("c:").append(id).append(';');
          }
          sb.append('C').append(signal).append(':').append(threadId);
          sendGdbPacket(conn,encode(sb.toString()));
        }
 else         if (payload.charAt(0) == 'X') {
          int signal=Integer.parseInt(payload.substring(1,3),16);
          String data=payload.substring(3);
          String description=null;
          if (data.contains("description:")) {
            description=new String(fromHex(data.replaceAll(".*description:([0-9a-fA-F]+).*","$1")),"UTF8").trim();
            description=description.trim();
            description=description.isEmpty() ? null : description;
          }
          String message=signal > 0 ? "The app crashed with signal " + signal : "The app crashed";
          if (description != null) {
            message+=": " + description;
          }
          message+=". Check the device logs in Xcode (Window->Devices) for more info.";
          throw new RuntimeException(message);
        }
 else {
          throw new RuntimeException("Unexpected response " + "from debugserver: " + response);
        }
      }
 catch (      InterruptedIOException e) {
        wasInterrupted=Thread.currentThread().isInterrupted();
        kill(conn);
      }
    }
  }
  finally {
    if (wasInterrupted) {
      Thread.currentThread().interrupt();
    }
  }
}
