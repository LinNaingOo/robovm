{
  log("App Path: %s",appPath);
  sendGdbPacket(conn,"+");
  sendReceivePacket(conn,encode("QStartNoAckMode"),"OK",true);
  sendGdbPacket(conn,"+");
  sendReceivePacket(conn,encode("QEnvironment:NSUnbufferedIO=YES"),"OK",false);
  for (  Entry<String,String> entry : env.entrySet()) {
    String cmd=String.format("QEnvironment:%s=%s",entry.getKey(),entry.getValue());
    sendReceivePacket(conn,encode(cmd),"OK",false);
  }
  sendReceivePacket(conn,encode("QListThreadsInStopReply"),"OK",false);
  sendReceivePacket(conn,encode("A" + encodeArgs(appPath)),"OK",false);
  sendReceivePacket(conn,encode("qLaunchSuccess"),"OK",false);
  sendGdbPacket(conn,encode("c"));
  boolean wasInterrupted=false;
  try {
    while (true) {
      try {
        String response=receiveGdbPacket(conn);
        String payload=decode(response);
        if (payload.charAt(0) == 'W') {
          int exitCode=Integer.parseInt(payload.substring(1),16);
          return exitCode;
        }
 else         if (payload.charAt(0) == 'O') {
          stdout.write(fromHex(payload.substring(1)));
        }
 else         if (payload.charAt(0) == 'T') {
          String signal=payload.substring(1,3);
          String data=payload.substring(3);
          String threadId=data.replaceAll(".*thread:([0-9a-fA-F]+).*","$1");
          String allThreadIds=data.replaceAll(".*threads:([0-9a-fA-F,]+).*","$1");
          Set<String> ids=new TreeSet<>(Arrays.asList(allThreadIds.split(",")));
          ids.remove(threadId);
          StringBuilder sb=new StringBuilder("vCont;");
          for (          String id : ids) {
            sb.append("c:").append(id).append(';');
          }
          sb.append('C').append(signal).append(':').append(threadId);
          sendGdbPacket(conn,encode(sb.toString()));
        }
 else {
          throw new RuntimeException("Unexpected response " + "from debugserver: " + response);
        }
      }
 catch (      InterruptedIOException e) {
        wasInterrupted=Thread.currentThread().isInterrupted();
        kill(conn);
      }
    }
  }
  finally {
    if (wasInterrupted) {
      Thread.currentThread().interrupt();
    }
  }
}
