{
  String name=mangleMethod(method) + "_lookup";
  Function function=createFunction(name,method);
  FunctionType functionType=function.getType();
  Variable fptr=function.newVariable(I8_PTR);
  Value nameRef=getString(method.getName());
  Value descRef=getString(getDescriptor(method.makeRef()));
  if (sootClass.isInterface()) {
    function.add(new Call(fptr,NVM_BC_LOOKUP_INTERFACE_METHOD,ENV,getCaller(function),new VariableRef("this",OBJECT_PTR),nameRef,descRef));
  }
 else {
    function.add(new Call(fptr,NVM_BC_LOOKUP_VIRTUAL_METHOD,ENV,getCaller(function),new VariableRef("this",OBJECT_PTR),nameRef,descRef));
  }
  Variable f=function.newVariable(functionType);
  function.add(new Bitcast(f,fptr.ref(),function.getType()));
  String[] parameterNames=function.getParameterNames();
  Type[] parameterTypes=function.getType().getParameterTypes();
  Value[] args=new Value[parameterNames.length];
  for (int i=0; i < args.length; i++) {
    args[i]=new VariableRef(parameterNames[i],parameterTypes[i]);
  }
  if (function.getType().getReturnType() == VOID) {
    function.add(new Call(f.ref(),args));
    function.add(new Ret());
  }
 else {
    Variable result=function.newVariable(functionType.getReturnType());
    function.add(new Call(result,f.ref(),args));
    function.add(new Ret(result.ref()));
  }
}
