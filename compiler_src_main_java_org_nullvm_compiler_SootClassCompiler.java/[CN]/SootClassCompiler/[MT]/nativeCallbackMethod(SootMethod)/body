{
  if (!method.isStatic()) {
    throw new IllegalArgumentException("@Callback annotated method must be static: " + method);
  }
  if (!method.getReturnType().equals(VoidType.v()) && !(method.getReturnType() instanceof PrimType)) {
    throw new IllegalArgumentException("@Callback annotated method must return void or primitive type");
  }
  for (int i=0; i < method.getParameterCount(); i++) {
    if (!(method.getParameterType(i) instanceof PrimType)) {
      throw new IllegalArgumentException("@Callback annotated method must take only primitive type arguments");
    }
  }
  FunctionType targetFunctionType=getFunctionType(method);
  FunctionRef targetFunctionRef=new FunctionRef(mangleMethod(method.makeRef()),targetFunctionType);
  FunctionType callbackFunctionType=getBridgeOrCallbackFunctionType(method);
  Type[] parameterTypes=callbackFunctionType.getParameterTypes();
  String[] parameterNames=new String[callbackFunctionType.getParameterTypes().length];
  for (int i=0; i < parameterNames.length; i++) {
    parameterNames[i]="p" + i;
  }
  Function callbackFunction=module.newFunction(internal,new FunctionAttribute[]{noinline,optsize},mangleMethod(method.makeRef()) + "_callback",callbackFunctionType,parameterNames);
  Variable env=callbackFunction.newVariable(ENV.getName().substring(1),ENV_PTR);
  callbackFunction.add(new Call(env,NVM_BC_ATTACH_THREAD_FROM_CALLBACK));
  ArrayList<Value> args=new ArrayList<Value>();
  args.add(env.ref());
  for (int i=0; i < parameterTypes.length; i++) {
    VariableRef ref=new VariableRef(parameterNames[i],parameterTypes[i]);
    if (ref.getType() == I8_PTR) {
      Variable tmp=callbackFunction.newVariable(I64);
      callbackFunction.add(new Ptrtoint(tmp,ref,I64));
      ref=tmp.ref();
    }
    args.add(ref);
  }
  if (callbackFunction.getType().getReturnType() == VOID) {
    callbackFunction.add(new Call(targetFunctionRef,args.toArray(new Value[args.size()])));
    callbackFunction.add(new Call(NVM_BC_DETACH_THREAD_FROM_CALLBACK,env.ref()));
    callbackFunction.add(new Ret());
  }
 else {
    Variable result=callbackFunction.newVariable(targetFunctionType.getReturnType());
    callbackFunction.add(new Call(result,targetFunctionRef,args.toArray(new Value[args.size()])));
    if (callbackFunctionType.getReturnType() == I8_PTR) {
      Variable resultI8Ptr=callbackFunction.newVariable(I8_PTR);
      callbackFunction.add(new Inttoptr(resultI8Ptr,result.ref(),I8_PTR));
      callbackFunction.add(new Call(NVM_BC_DETACH_THREAD_FROM_CALLBACK,env.ref()));
      callbackFunction.add(new Ret(resultI8Ptr.ref()));
    }
 else {
      callbackFunction.add(new Call(NVM_BC_DETACH_THREAD_FROM_CALLBACK,env.ref()));
      callbackFunction.add(new Ret(result.ref()));
    }
  }
}
