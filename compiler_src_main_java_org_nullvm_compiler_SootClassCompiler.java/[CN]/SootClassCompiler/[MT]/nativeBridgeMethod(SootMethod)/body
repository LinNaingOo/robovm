{
  if (!method.getReturnType().equals(VoidType.v()) && !(method.getReturnType() instanceof PrimType)) {
    throw new IllegalArgumentException("@Bridge annotated method must return void or primitive type");
  }
  for (int i=0; i < method.getParameterCount(); i++) {
    if (!(method.getParameterType(i) instanceof PrimType)) {
      throw new IllegalArgumentException("@Bridge annotated method must take only primitive type arguments");
    }
  }
  Function outerFunction=createFunction(method);
  Function innerFunction=createFunction(mangleMethod(method.makeRef()) + "_inner",method);
  Type[] parameterTypes=innerFunction.getType().getParameterTypes();
  String[] parameterNames=innerFunction.getParameterNames();
  ArrayList<Value> args=new ArrayList<Value>();
  for (int i=0; i < parameterTypes.length; i++) {
    args.add(new VariableRef(parameterNames[i],parameterTypes[i]));
  }
  if (outerFunction.getType().getReturnType() == VOID) {
    outerFunction.add(new Call(innerFunction.ref(),args.toArray(new Value[args.size()])));
    outerFunction.add(new Ret());
  }
 else {
    Variable result=outerFunction.newVariable(outerFunction.getType().getReturnType());
    outerFunction.add(new Call(result,innerFunction.ref(),args.toArray(new Value[args.size()])));
    outerFunction.add(new Ret(result.ref()));
  }
  FunctionType targetFunctionType=getBridgeOrCallbackFunctionType(method);
  args.remove(0);
  if (!method.isStatic()) {
    args.remove(0);
  }
  Type[] targetParameterTypes=targetFunctionType.getParameterTypes();
  for (int i=0; i < targetParameterTypes.length; i++) {
    if (targetParameterTypes[i] == I8_PTR) {
      Variable argI8Ptr=innerFunction.newVariable(I8_PTR);
      innerFunction.add(new Inttoptr(argI8Ptr,args.get(i),I8_PTR));
      args.set(i,argI8Ptr.ref());
    }
  }
  Variable targetFunction=innerFunction.newVariable(targetFunctionType);
  Global targetFunctionPtr=new Global(outerFunction.getName().substring(1) + "_ptr",Linkage._private,new NullConstant(targetFunctionType));
  module.addGlobal(targetFunctionPtr);
  innerFunction.add(new Load(targetFunction,targetFunctionPtr.ref()));
  Label nullLabel=new Label();
  Label notNullLabel=new Label();
  Variable nullCheck=innerFunction.newVariable(I1);
  innerFunction.add(new Icmp(nullCheck,Condition.eq,targetFunction.ref(),new NullConstant(targetFunctionType)));
  innerFunction.add(new Br(nullCheck.ref(),innerFunction.newBasicBlockRef(nullLabel),innerFunction.newBasicBlockRef(notNullLabel)));
  innerFunction.newBasicBlock(nullLabel);
  innerFunction.add(new Call(NVM_BC_THROW_UNSATISIFED_LINK_ERROR,ENV));
  innerFunction.add(new Unreachable());
  innerFunction.newBasicBlock(notNullLabel);
  Variable frameAddress=innerFunction.newVariable(I8_PTR);
  innerFunction.add(new Call(frameAddress,LLVM_FRAMEADDRESS,new IntegerConstant(0)));
  innerFunction.add(new Call(NVM_BC_PUSH_NATIVE_FRAME,ENV,frameAddress.ref()));
  if (innerFunction.getType().getReturnType() == VOID) {
    innerFunction.add(new Call(targetFunction.ref(),args.toArray(new Value[args.size()])));
    innerFunction.add(new Call(NVM_BC_POP_NATIVE_FRAME,ENV));
    innerFunction.add(new Ret());
  }
 else {
    Variable result=innerFunction.newVariable(targetFunctionType.getReturnType());
    innerFunction.add(new Call(result,targetFunction.ref(),args.toArray(new Value[args.size()])));
    innerFunction.add(new Call(NVM_BC_POP_NATIVE_FRAME,ENV));
    if (targetFunctionType.getReturnType() == I8_PTR) {
      Variable resultI64=innerFunction.newVariable(I64);
      innerFunction.add(new Ptrtoint(resultI64,result.ref(),I64));
      innerFunction.add(new Ret(resultI64.ref()));
    }
 else {
      innerFunction.add(new Ret(result.ref()));
    }
  }
}
