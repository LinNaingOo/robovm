{
  soot.Type sootRetType=method.getReturnType();
  if (!sootRetType.equals(VoidType.v()) && !(sootRetType instanceof PrimType) && !isStruct(sootRetType)) {
    throw new IllegalArgumentException("@Bridge annotated method must return void or a primitive or Struct type");
  }
  for (int i=0; i < method.getParameterCount(); i++) {
    soot.Type t=method.getParameterType(i);
    if (!(t instanceof PrimType) && !isStruct(t)) {
      throw new IllegalArgumentException("@Bridge annotated method must take only primitive or Struct type arguments");
    }
  }
  Function outerFunction=createFunction(method);
  Function innerFunction=createFunction(mangleMethod(method.makeRef()) + "_inner",method);
  Type[] parameterTypes=innerFunction.getType().getParameterTypes();
  String[] parameterNames=innerFunction.getParameterNames();
  ArrayList<Argument> args=new ArrayList<Argument>();
  for (int i=0; i < parameterTypes.length; i++) {
    args.add(new Argument(new VariableRef(parameterNames[i],parameterTypes[i])));
  }
  if (outerFunction.getType().getReturnType() == VOID) {
    outerFunction.add(new Call(innerFunction.ref(),args.toArray(new Argument[args.size()])));
    outerFunction.add(new Ret());
  }
 else {
    Variable result=outerFunction.newVariable(outerFunction.getType().getReturnType());
    outerFunction.add(new Call(result,innerFunction.ref(),args.toArray(new Argument[args.size()])));
    outerFunction.add(new Ret(result.ref()));
  }
  FunctionType targetFunctionType=getBridgeOrCallbackFunctionType(method);
  args.remove(0);
  if (!method.isStatic()) {
    args.remove(0);
  }
  Type[] targetParameterTypes=targetFunctionType.getParameterTypes();
  for (int i=0; i < targetParameterTypes.length; i++) {
    if (targetParameterTypes[i] instanceof PointerType && ((PointerType)targetParameterTypes[i]).getBase() instanceof StructureType) {
      Variable tmp=innerFunction.newVariable(I8_PTR);
      innerFunction.add(new Call(tmp,NVM_BC_BY_VALUE_GET_STRUCT_HANDLE,ENV,args.get(i).getValue()));
      Variable arg=innerFunction.newVariable(targetParameterTypes[i]);
      innerFunction.add(new Bitcast(arg,tmp.ref(),arg.getType()));
      args.set(i,new Argument(arg.ref(),ParameterAttribute.byval));
    }
 else     if (targetParameterTypes[i] == I8_PTR) {
      Variable arg=innerFunction.newVariable(I8_PTR);
      innerFunction.add(new Inttoptr(arg,args.get(i).getValue(),I8_PTR));
      if (hasParameterAnnotation(method,i,"Lorg/nullvm/rt/bro/annotation/StructRet;")) {
        args.set(i,new Argument(arg.ref(),ParameterAttribute.sret));
      }
 else {
        args.set(i,new Argument(arg.ref()));
      }
    }
 else     if (targetParameterTypes[i] == MACHINE_INT) {
      Variable arg=innerFunction.newVariable(MACHINE_INT);
      innerFunction.add(new Inttoptr(arg,args.get(i).getValue(),MACHINE_INT));
      args.set(i,new Argument(arg.ref()));
    }
 else     if (targetParameterTypes[i] == MACHINE_FP) {
      Variable arg=innerFunction.newVariable(MACHINE_FP);
      innerFunction.add(new Call(arg,DOUBLE_TO_MACHINE_FP,args.get(i)));
      args.set(i,new Argument(arg.ref()));
    }
  }
  Variable targetFunction=innerFunction.newVariable(targetFunctionType);
  Global targetFunctionPtr=new Global(outerFunction.getName().substring(1) + "_ptr",Linkage._private,new NullConstant(targetFunctionType));
  module.addGlobal(targetFunctionPtr);
  innerFunction.add(new Load(targetFunction,targetFunctionPtr.ref()));
  Label nullLabel=new Label();
  Label notNullLabel=new Label();
  Variable nullCheck=innerFunction.newVariable(I1);
  innerFunction.add(new Icmp(nullCheck,Condition.eq,targetFunction.ref(),new NullConstant(targetFunctionType)));
  innerFunction.add(new Br(nullCheck.ref(),innerFunction.newBasicBlockRef(nullLabel),innerFunction.newBasicBlockRef(notNullLabel)));
  innerFunction.newBasicBlock(nullLabel);
  innerFunction.add(new Call(NVM_BC_THROW_UNSATISIFED_LINK_ERROR,ENV));
  innerFunction.add(new Unreachable());
  innerFunction.newBasicBlock(notNullLabel);
  Variable frameAddress=innerFunction.newVariable(I8_PTR);
  innerFunction.add(new Call(frameAddress,LLVM_FRAMEADDRESS,new IntegerConstant(0)));
  innerFunction.add(new Call(NVM_BC_PUSH_NATIVE_FRAME,ENV,frameAddress.ref()));
  if (innerFunction.getType().getReturnType() == VOID) {
    innerFunction.add(new Call(targetFunction.ref(),args.toArray(new Argument[args.size()])));
    innerFunction.add(new Call(NVM_BC_POP_NATIVE_FRAME,ENV));
    innerFunction.add(new Ret());
  }
 else {
    Variable result=innerFunction.newVariable(targetFunctionType.getReturnType());
    innerFunction.add(new Call(result,targetFunction.ref(),args.toArray(new Argument[args.size()])));
    innerFunction.add(new Call(NVM_BC_POP_NATIVE_FRAME,ENV));
    if (targetFunctionType.getReturnType() == I8_PTR) {
      Variable resultI64=innerFunction.newVariable(I64);
      innerFunction.add(new Ptrtoint(resultI64,result.ref(),I64));
      innerFunction.add(new Ret(resultI64.ref()));
    }
 else     if (targetFunctionType.getReturnType() == MACHINE_INT) {
      Variable resultI64=innerFunction.newVariable(I64);
      innerFunction.add(new Ptrtoint(resultI64,result.ref(),I64));
      innerFunction.add(new Ret(resultI64.ref()));
    }
 else     if (targetFunctionType.getReturnType() == MACHINE_FP) {
      Variable resultDouble=innerFunction.newVariable(DOUBLE);
      innerFunction.add(new Call(resultDouble,MACHINE_FP_TO_DOUBLE,result.ref()));
      innerFunction.add(new Ret(resultDouble.ref()));
    }
 else {
      innerFunction.add(new Ret(result.ref()));
    }
  }
}
