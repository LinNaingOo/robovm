{
  Type returnType=getType(method.getReturnType());
  VisibilityAnnotationTag vatag=(VisibilityAnnotationTag)method.getTag("VisibilityAnnotationTag");
  for (  AnnotationTag tag : vatag.getAnnotations()) {
    if ("Lorg/nullvm/rt/bro/Pointer;".equals(tag.getType())) {
      if (!method.getReturnType().equals(LongType.v())) {
        throw new IllegalArgumentException("@Bridge annotated method " + method.getName() + " must return long when annotated with @Pointer");
      }
      returnType=I8_PTR;
      break;
    }
  }
  Type[] paramTypes=new Type[method.getParameterTypes().size()];
  int i=0;
  for (  soot.Type t : (List<soot.Type>)method.getParameterTypes()) {
    paramTypes[i++]=getType(t);
  }
  VisibilityParameterAnnotationTag vpatag=(VisibilityParameterAnnotationTag)method.getTag("VisibilityParameterAnnotationTag");
  if (vpatag != null) {
    List<VisibilityAnnotationTag> tags=vpatag.getVisibilityAnnotations();
    for (i=0; i < paramTypes.length; i++) {
      List<AnnotationTag> annotations=tags.get(i).getAnnotations();
      if (annotations != null) {
        for (        AnnotationTag tag : annotations) {
          if ("Lorg/nullvm/rt/bro/Pointer;".equals(tag.getType())) {
            if (!method.getParameterType(i).equals(LongType.v())) {
              throw new IllegalArgumentException("Parameter " + (i + 1) + " of @Bridge annotated method "+ method.getName()+ " must be of type long when annotated with @Pointer");
            }
            paramTypes[i]=I8_PTR;
            break;
          }
        }
      }
    }
  }
  return new FunctionType(returnType,paramTypes);
}
