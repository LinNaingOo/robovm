{
  Function outerFunction=createFunction(method);
  Function innerFunction=createFunction(mangleMethod(method.makeRef()) + "_inner",method);
  Type[] parameterTypes=innerFunction.getType().getParameterTypes();
  String[] parameterNames=innerFunction.getParameterNames();
  ArrayList<Value> args=new ArrayList<Value>();
  for (int i=0; i < parameterTypes.length; i++) {
    args.add(new VariableRef(parameterNames[i],parameterTypes[i]));
  }
  if (outerFunction.getType().getReturnType() == VOID) {
    outerFunction.add(new Call(innerFunction.ref(),args.toArray(new Value[args.size()])));
    outerFunction.add(new Ret());
  }
 else {
    Variable result=outerFunction.newVariable(outerFunction.getType().getReturnType());
    outerFunction.add(new Call(result,innerFunction.ref(),args.toArray(new Value[args.size()])));
    outerFunction.add(new Ret(new VariableRef(result)));
  }
  FunctionType nativeFunctionType=innerFunction.getType();
  if (method.isStatic()) {
    Variable tmp=innerFunction.newVariable(CLASS_PTR);
    innerFunction.add(new Load(tmp,THE_CLASS.ref()));
    args.add(1,tmp.ref());
    ArrayList<Type> ptypes=new ArrayList<Type>(Arrays.asList(parameterTypes));
    ptypes.add(1,CLASS_PTR);
    nativeFunctionType=new FunctionType(innerFunction.getType().getReturnType(),ptypes.toArray(new Type[ptypes.size()]));
  }
  String targetClassName=getInternalName(method.getDeclaringClass());
  String methodName=method.getName();
  String methodDesc=getDescriptor(method);
  Trampoline trampoline=new NativeCall(targetClassName,methodName,methodDesc);
  addTrampoline(trampoline,nativeFunctionType);
  Variable frameAddress=innerFunction.newVariable(I8_PTR);
  innerFunction.add(new Call(frameAddress,LLVM_FRAMEADDRESS,new IntegerConstant(0)));
  innerFunction.add(new Call(NVM_BC_PUSH_NATIVE_FRAME,ENV,frameAddress.ref()));
  if (innerFunction.getType().getReturnType() == VOID) {
    callTrampoline(innerFunction,trampoline,null,args.toArray(new Value[args.size()]));
    innerFunction.add(new Call(NVM_BC_POP_NATIVE_FRAME,ENV));
    innerFunction.add(new Call(NVM_BC_THROW_IF_EXCEPTION_OCCURRED,ENV));
    innerFunction.add(new Ret());
  }
 else {
    Variable result=innerFunction.newVariable(innerFunction.getType().getReturnType());
    callTrampoline(innerFunction,trampoline,result,args.toArray(new Value[args.size()]));
    innerFunction.add(new Call(NVM_BC_POP_NATIVE_FRAME,ENV));
    innerFunction.add(new Call(NVM_BC_THROW_IF_EXCEPTION_OCCURRED,ENV));
    innerFunction.add(new Ret(new VariableRef(result)));
  }
}
