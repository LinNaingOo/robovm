{
  List<Type> types=new ArrayList<Type>();
  Map<String,Type> members=new HashMap<String,Type>();
  int index=0;
  for (  SootMethod method : clazz.getMethods()) {
    if (isStructMember(method)) {
      validateStructMember(method);
      String name=method.getName().substring(3,4).toLowerCase() + method.getName().substring(4);
      Type type=getType(method.getName().startsWith("get") ? method.getReturnType() : method.getParameterType(0));
      if (method.getName().startsWith("get") && hasAnnotation(method,"Lorg/nullvm/rt/bro/annotation/Pointer;")) {
        if (!method.getReturnType().equals(LongType.v())) {
          throw new IllegalArgumentException("@StructMember annotated getter method " + method.getName() + " must return long when annotated with @Pointer");
        }
        type=I8_PTR;
      }
 else       if (hasParameterAnnotation(method,0,"Lorg/nullvm/rt/bro/annotation/Pointer;")) {
        if (!method.getParameterType(0).equals(LongType.v())) {
          throw new IllegalArgumentException("First parameter of @StructMember annotated setter method " + method.getName() + " must be of type long when annotated with @Pointer");
        }
        type=I8_PTR;
      }
      if (members.containsKey(name)) {
        if (members.get(name) != type) {
          throw new IllegalArgumentException("@StructMember annotated getter and setter methods for property " + name + " have different types");
        }
      }
 else {
        members.put(name,type);
        types.add(type);
        if (indexes != null) {
          indexes.put(name,index);
        }
        index++;
      }
    }
  }
  if (!types.isEmpty()) {
    return new StructureType(types.toArray(new Type[types.size()]));
  }
  return null;
}
