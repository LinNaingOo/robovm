{
  ObjectStreamField[] fields=classDesc.fields();
  Class<?> declaringClass=classDesc.forClass();
  for (  ObjectStreamField fieldDesc : fields) {
    try {
      long fieldID=fieldDesc.getFieldID(accessor,declaringClass);
      if (fieldDesc.isPrimitive()) {
switch (fieldDesc.getTypeCode()) {
case 'B':
          output.writeByte(accessor.getByte(obj,fieldID));
        break;
case 'C':
      output.writeChar(accessor.getChar(obj,fieldID));
    break;
case 'D':
  output.writeDouble(accessor.getDouble(obj,fieldID));
break;
case 'F':
output.writeFloat(accessor.getFloat(obj,fieldID));
break;
case 'I':
output.writeInt(accessor.getInt(obj,fieldID));
break;
case 'J':
output.writeLong(accessor.getLong(obj,fieldID));
break;
case 'S':
output.writeShort(accessor.getShort(obj,fieldID));
break;
case 'Z':
output.writeBoolean(accessor.getBoolean(obj,fieldID));
break;
default :
throw new IOException(Messages.getString("luni.BF",fieldDesc.getTypeCode()));
}
}
 else {
Object objField=accessor.getObject(obj,fieldID);
if (fieldDesc.isUnshared()) {
writeUnshared(objField);
}
 else {
writeObject(objField);
}
}
}
 catch (NoSuchFieldError nsf) {
throw new InvalidClassException(classDesc.getName());
}
}
}
