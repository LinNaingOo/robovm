{
  if (currentEntry != null) {
    closeEntry();
  }
  int method=ze.getMethod();
  if (method == -1) {
    method=defaultCompressionMethod;
  }
  if (method == STORED) {
    if (ze.getCompressedSize() == -1) {
      ze.setCompressedSize(ze.getSize());
    }
 else     if (ze.getSize() == -1) {
      ze.setSize(ze.getCompressedSize());
    }
    if (ze.getCrc() == -1) {
      throw new ZipException("STORED entry missing CRC");
    }
    if (ze.getSize() == -1) {
      throw new ZipException("STORED entry missing size");
    }
    if (ze.size != ze.compressedSize) {
      throw new ZipException("STORED entry size/compressed size mismatch");
    }
  }
  checkOpen();
  if (entries.contains(ze.name)) {
    throw new ZipException("Entry already exists: " + ze.name);
  }
  if (entries.size() == 64 * 1024 - 1) {
    throw new ZipException("Too many entries for the zip file format's 16-bit entry count");
  }
  nameBytes=ze.name.getBytes(StandardCharsets.UTF_8);
  nameLength=nameBytes.length;
  if (nameLength > 0xffff) {
    throw new IllegalArgumentException("Name too long: " + nameLength + " UTF-8 bytes");
  }
  def.setLevel(compressionLevel);
  ze.setMethod(method);
  currentEntry=ze;
  entries.add(currentEntry.name);
  int flags=(method == STORED) ? 0 : ZipFile.GPBF_DATA_DESCRIPTOR_FLAG;
  flags|=ZipFile.GPBF_UTF8_FLAG;
  writeLong(out,LOCSIG);
  writeShort(out,ZIP_VERSION_2_0);
  writeShort(out,flags);
  writeShort(out,method);
  if (currentEntry.getTime() == -1) {
    currentEntry.setTime(System.currentTimeMillis());
  }
  writeShort(out,currentEntry.time);
  writeShort(out,currentEntry.modDate);
  if (method == STORED) {
    writeLong(out,currentEntry.crc);
    writeLong(out,currentEntry.size);
    writeLong(out,currentEntry.size);
  }
 else {
    writeLong(out,0);
    writeLong(out,0);
    writeLong(out,0);
  }
  writeShort(out,nameLength);
  if (currentEntry.extra != null) {
    writeShort(out,currentEntry.extra.length);
  }
 else {
    writeShort(out,0);
  }
  out.write(nameBytes);
  if (currentEntry.extra != null) {
    out.write(currentEntry.extra);
  }
}
