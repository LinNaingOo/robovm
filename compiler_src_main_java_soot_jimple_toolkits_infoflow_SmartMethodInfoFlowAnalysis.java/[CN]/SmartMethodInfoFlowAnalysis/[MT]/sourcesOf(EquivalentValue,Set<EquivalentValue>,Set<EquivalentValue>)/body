{
  visitedSources.add(node);
  List<EquivalentValue> ret=new LinkedList<EquivalentValue>();
  if (!abbreviatedInfoFlowGraph.containsNode(node))   return ret;
  Set preds=abbreviatedInfoFlowGraph.getPredsOfAsSet(node);
  Iterator predsIt=preds.iterator();
  while (predsIt.hasNext()) {
    EquivalentValue pred=(EquivalentValue)predsIt.next();
    if (!visitedSources.contains(pred)) {
      ret.add(pred);
      ret.addAll(sourcesOf(pred,visitedSources,visitedSinks));
    }
  }
  List<EquivalentValue> sinks=sinksOf(node,visitedSources,visitedSinks);
  Iterator<EquivalentValue> sinksIt=sinks.iterator();
  while (sinksIt.hasNext()) {
    EquivalentValue sink=sinksIt.next();
    if (!visitedSources.contains(sink)) {
      EquivalentValue flowsToSourcesOf=new CachedEquivalentValue(new AbstractDataSource(sink.getValue()));
      if (abbreviatedInfoFlowGraph.getPredsOfAsSet(sink).contains(flowsToSourcesOf)) {
        ret.addAll(sourcesOf(flowsToSourcesOf,visitedSources,visitedSinks));
      }
    }
  }
  return ret;
}
