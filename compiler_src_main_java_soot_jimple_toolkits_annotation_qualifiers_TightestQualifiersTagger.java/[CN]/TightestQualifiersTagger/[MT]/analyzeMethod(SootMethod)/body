{
  CallGraph cg=Scene.v().getCallGraph();
  if (methodToContexts == null) {
    methodToContexts=new MethodToContexts(Scene.v().getReachableMethods().listener());
  }
  for (Iterator momcIt=methodToContexts.get(sm).iterator(); momcIt.hasNext(); ) {
    final MethodOrMethodContext momc=(MethodOrMethodContext)momcIt.next();
    Iterator callerEdges=cg.edgesInto(momc);
    while (callerEdges.hasNext()) {
      Edge callEdge=(Edge)callerEdges.next();
      if (!callEdge.isExplicit())       continue;
      SootMethod methodCaller=callEdge.src();
      SootClass callingClass=methodCaller.getDeclaringClass();
      if (Modifier.isPublic(sm.getModifiers())) {
        analyzePublicMethod(sm,callingClass);
      }
 else       if (Modifier.isProtected(sm.getModifiers())) {
        analyzeProtectedMethod(sm,callingClass);
      }
 else       if (Modifier.isPrivate(sm.getModifiers())) {
      }
 else {
        analyzePackageMethod(sm,callingClass);
      }
    }
  }
}
