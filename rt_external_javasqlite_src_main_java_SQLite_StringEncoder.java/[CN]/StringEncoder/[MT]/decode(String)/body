{
  char[] a=s.toCharArray();
  if (a.length > 2 && a[0] == 'X' && a[1] == '\'' && a[a.length - 1] == '\'') {
    byte[] result=new byte[(a.length - 3) / 2];
    for (int i=2, k=0; i < a.length - 1; i+=2, k++) {
      byte tmp;
switch (a[i]) {
case '0':
        tmp=0;
      break;
case '1':
    tmp=1;
  break;
case '2':
tmp=2;
break;
case '3':
tmp=3;
break;
case '4':
tmp=4;
break;
case '5':
tmp=5;
break;
case '6':
tmp=6;
break;
case '7':
tmp=7;
break;
case '8':
tmp=8;
break;
case '9':
tmp=9;
break;
case 'A':
case 'a':
tmp=10;
break;
case 'B':
case 'b':
tmp=11;
break;
case 'C':
case 'c':
tmp=12;
break;
case 'D':
case 'd':
tmp=13;
break;
case 'E':
case 'e':
tmp=14;
break;
case 'F':
case 'f':
tmp=15;
break;
default :
tmp=0;
break;
}
result[k]=(byte)(tmp << 4);
switch (a[i + 1]) {
case '0':
tmp=0;
break;
case '1':
tmp=1;
break;
case '2':
tmp=2;
break;
case '3':
tmp=3;
break;
case '4':
tmp=4;
break;
case '5':
tmp=5;
break;
case '6':
tmp=6;
break;
case '7':
tmp=7;
break;
case '8':
tmp=8;
break;
case '9':
tmp=9;
break;
case 'A':
case 'a':
tmp=10;
break;
case 'B':
case 'b':
tmp=11;
break;
case 'C':
case 'c':
tmp=12;
break;
case 'D':
case 'd':
tmp=13;
break;
case 'E':
case 'e':
tmp=14;
break;
case 'F':
case 'f':
tmp=15;
break;
default :
tmp=0;
break;
}
result[k]|=tmp;
}
return result;
}
byte[] result=new byte[a.length - 1];
int i=0;
int shift=s.charAt(i++);
int j=0;
while (i < s.length()) {
int c;
if ((c=s.charAt(i++)) == 1) {
if ((c=s.charAt(i++)) == 1) {
c=0;
}
 else if (c == 2) {
c=1;
}
 else if (c == 3) {
c='\'';
}
 else {
throw new IllegalArgumentException("invalid string passed to decoder: " + j);
}
}
result[j++]=(byte)((c + shift) & 0xff);
}
int outLen=j;
if (result.length != outLen) {
result=byteCopy(result,0,outLen,new byte[outLen]);
}
return result;
}
