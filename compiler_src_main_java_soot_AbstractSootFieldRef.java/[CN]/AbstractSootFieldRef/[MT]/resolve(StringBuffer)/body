{
  SootClass cl=declaringClass;
  while (true) {
    if (trace != null)     trace.append("Looking in " + cl + " which has fields "+ cl.getFields()+ "\n");
    if (cl.declaresField(name,type)) {
      return checkStatic(cl.getField(name,type));
    }
    if (Scene.v().allowsPhantomRefs() && cl.isPhantom()) {
      SootField f=new SootField(name,type,isStatic() ? Modifier.STATIC : 0);
      f.setPhantom(true);
      cl.addField(f);
      return f;
    }
 else {
      LinkedList<SootClass> queue=new LinkedList<SootClass>();
      queue.addAll(cl.getInterfaces());
      while (!queue.isEmpty()) {
        SootClass iface=queue.removeFirst();
        if (trace != null)         trace.append("Looking in " + iface + " which has fields "+ iface.getFields()+ "\n");
        if (iface.declaresField(name,type)) {
          return checkStatic(iface.getField(name,type));
        }
        queue.addAll(iface.getInterfaces());
      }
      if (cl.hasSuperclass())       cl=cl.getSuperclass();
 else       break;
    }
  }
  if (trace == null)   throw new FieldResolutionFailedException();
  return null;
}
