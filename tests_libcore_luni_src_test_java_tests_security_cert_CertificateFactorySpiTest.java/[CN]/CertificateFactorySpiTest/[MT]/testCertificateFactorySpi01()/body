{
  CertificateFactorySpi certFactorySpi=new extCertificateFactorySpi();
  ByteArrayInputStream bais=new ByteArrayInputStream(new byte[0]);
  try {
    certFactorySpi.engineGenerateCertPath(bais);
    fail("UnsupportedOperationException must be thrown");
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    certFactorySpi.engineGenerateCertPath(bais,"");
    fail("UnsupportedOperationException must be thrown");
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    List<Certificate> list=null;
    certFactorySpi.engineGenerateCertPath(list);
    fail("UnsupportedOperationException must be thrown");
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    certFactorySpi.engineGetCertPathEncodings();
    fail("UnsupportedOperationException must be thrown");
  }
 catch (  UnsupportedOperationException e) {
  }
  Certificate cc=certFactorySpi.engineGenerateCertificate(bais);
  assertNull("Not null Cerificate",cc);
  try {
    certFactorySpi.engineGenerateCertificate(null);
    fail("CertificateException must be thrown");
  }
 catch (  CertificateException e) {
  }
  Collection<? extends Certificate> col=certFactorySpi.engineGenerateCertificates(bais);
  assertNull("Not null Collection",col);
  try {
    certFactorySpi.engineGenerateCertificates(null);
    fail("CertificateException must be thrown");
  }
 catch (  CertificateException e) {
  }
  CRL ccCRL=certFactorySpi.engineGenerateCRL(bais);
  assertNull("Not null CRL",ccCRL);
  try {
    certFactorySpi.engineGenerateCRL(null);
    fail("CRLException must be thrown");
  }
 catch (  CRLException e) {
  }
  Collection<? extends CRL> colCRL=certFactorySpi.engineGenerateCRLs(bais);
  assertNull("Not null CRL",colCRL);
  try {
    certFactorySpi.engineGenerateCRLs(null);
    fail("CRLException must be thrown");
  }
 catch (  CRLException e) {
  }
}
