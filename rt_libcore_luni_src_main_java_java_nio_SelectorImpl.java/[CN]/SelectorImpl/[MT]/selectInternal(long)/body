{
  checkClosed();
synchronized (this) {
synchronized (unmodifiableKeys) {
synchronized (selectedKeys) {
        doCancel();
        boolean isBlocking=(timeout != 0);
synchronized (keysLock) {
          preparePollFds();
        }
        int rc=-1;
        try {
          if (isBlocking) {
            begin();
          }
          try {
            rc=Libcore.os.poll(pollFds.array(),(int)timeout);
          }
 catch (          ErrnoException errnoException) {
            if (errnoException.errno != EINTR) {
              throw errnoException.rethrowAsIOException();
            }
          }
        }
  finally {
          if (isBlocking) {
            end();
          }
        }
        int readyCount=(rc > 0) ? processPollFds() : 0;
        readyCount-=doCancel();
        return readyCount;
      }
    }
  }
}
