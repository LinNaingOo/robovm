{
  if (!method.isConcrete())   return;
  Body body=method.retrieveActiveBody();
  if (body == null)   return;
{
    boolean hasArrayLocal=false;
    Chain locals=body.getLocals();
    Iterator localIt=locals.iterator();
    while (localIt.hasNext()) {
      Local local=(Local)localIt.next();
      Type type=local.getType();
      if (type instanceof ArrayType) {
        hasArrayLocal=true;
        break;
      }
    }
    if (!hasArrayLocal) {
      return;
    }
  }
  HashMap<Stmt,SootField> stmtfield=new HashMap<Stmt,SootField>();
{
    Iterator unitIt=body.getUnits().iterator();
    while (unitIt.hasNext()) {
      Stmt stmt=(Stmt)unitIt.next();
      if (stmt.containsFieldRef()) {
        Value leftOp=((AssignStmt)stmt).getLeftOp();
        if (leftOp instanceof FieldRef) {
          FieldRef fref=(FieldRef)leftOp;
          SootField field=fref.getField();
          if (candidates.contains(field))           stmtfield.put(stmt,field);
        }
      }
    }
    if (stmtfield.size() == 0) {
      return;
    }
  }
  if (Options.v().verbose()) {
    G.v().out.println("[] ScanMethod for field started.");
  }
{
    UnitGraph g=new ExceptionalUnitGraph(body);
    LocalDefs localDefs=new SmartLocalDefs(g,new SimpleLiveLocals(g));
    Set entries=stmtfield.entrySet();
    Iterator entryIt=entries.iterator();
    while (entryIt.hasNext()) {
      Map.Entry entry=(Map.Entry)entryIt.next();
      Stmt where=(Stmt)entry.getKey();
      SootField which=(SootField)entry.getValue();
      IntValueContainer length=new IntValueContainer();
      Value rightOp=((AssignStmt)where).getRightOp();
      if (rightOp instanceof Local) {
        Local local=(Local)rightOp;
        DefinitionStmt usestmt=(DefinitionStmt)where;
        while (length.isBottom()) {
          List<Unit> defs=localDefs.getDefsOfAt(local,usestmt);
          if (defs.size() == 1) {
            usestmt=(DefinitionStmt)defs.get(0);
            if (Options.v().debug())             G.v().out.println("        " + usestmt);
            Value tmp_rhs=usestmt.getRightOp();
            if ((tmp_rhs instanceof NewArrayExpr) || (tmp_rhs instanceof NewMultiArrayExpr)) {
              Value size;
              if (tmp_rhs instanceof NewArrayExpr)               size=((NewArrayExpr)tmp_rhs).getSize();
 else               size=((NewMultiArrayExpr)tmp_rhs).getSize(0);
              if (size instanceof IntConstant)               length.setValue(((IntConstant)size).value);
 else               if (size instanceof Local) {
                local=(Local)size;
                continue;
              }
 else               length.setTop();
            }
 else             if (tmp_rhs instanceof IntConstant) {
              length.setValue(((IntConstant)tmp_rhs).value);
            }
 else             if (tmp_rhs instanceof Local) {
              local=(Local)tmp_rhs;
              continue;
            }
 else             length.setTop();
          }
 else           length.setTop();
        }
      }
 else       continue;
      IntValueContainer oldv=fieldinfo.get(which);
      if (length.isTop()) {
        if (oldv == null)         fieldinfo.put(which,length.dup());
 else         oldv.setTop();
        candidates.remove(which);
      }
 else       if (length.isInteger()) {
        if (oldv == null) {
          fieldinfo.put(which,length.dup());
        }
 else {
          if (oldv.isInteger() && oldv.getValue() != length.getValue()) {
            oldv.setTop();
            candidates.remove(which);
          }
        }
      }
    }
  }
  if (Options.v().verbose()) {
    G.v().out.println("[] ScanMethod finished.");
  }
}
