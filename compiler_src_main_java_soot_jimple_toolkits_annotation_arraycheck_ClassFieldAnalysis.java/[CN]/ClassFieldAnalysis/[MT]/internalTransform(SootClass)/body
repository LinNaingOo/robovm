{
  if (classToFieldInfoMap.containsKey(c))   return;
  Date start=new Date();
  if (Options.v().verbose())   G.v().out.println("[] ClassFieldAnalysis started on : " + start + " for "+ c.getPackageName()+ c.getName());
  Hashtable<SootField,IntValueContainer> fieldInfoTable=new Hashtable<SootField,IntValueContainer>();
  classToFieldInfoMap.put(c,fieldInfoTable);
  HashSet<SootField> candidSet=new HashSet<SootField>();
  int arrayTypeFieldNum=0;
  Iterator fieldIt=c.getFields().iterator();
  while (fieldIt.hasNext()) {
    SootField field=(SootField)fieldIt.next();
    int modifiers=field.getModifiers();
    Type type=field.getType();
    if (type instanceof ArrayType) {
      if ((final_in && ((modifiers & Modifier.FINAL) != 0)) || (private_in && ((modifiers & Modifier.PRIVATE) != 0))) {
        candidSet.add(field);
        arrayTypeFieldNum++;
      }
    }
  }
  if (arrayTypeFieldNum == 0) {
    if (Options.v().verbose())     G.v().out.println("[] ClassFieldAnalysis finished with nothing");
    return;
  }
  Iterator methodIt=c.methodIterator();
  while (methodIt.hasNext()) {
    ScanMethod((SootMethod)methodIt.next(),candidSet,fieldInfoTable);
  }
  Date finish=new Date();
  if (Options.v().verbose()) {
    long runtime=finish.getTime() - start.getTime();
    long mins=runtime / 60000;
    long secs=(runtime % 60000) / 1000;
    G.v().out.println("[] ClassFieldAnalysis finished normally. " + "It took " + mins + " mins and "+ secs+ " secs.");
  }
}
