{
  boolean isUnsplit=PhaseOptions.getBoolean(options,"unsplit-original-locals");
  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "] Packing locals...");
  Map<Local,Object> localToGroup=new DeterministicHashMap(body.getLocalCount() * 2 + 1,0.7f);
  Map<Object,Integer> groupToColorCount=new HashMap<Object,Integer>(body.getLocalCount() * 2 + 1,0.7f);
  Map<Local,Integer> localToColor=new HashMap<Local,Integer>(body.getLocalCount() * 2 + 1,0.7f);
  Map localToNewLocal;
{
    Iterator localIt=body.getLocals().iterator();
    while (localIt.hasNext()) {
      Local l=(Local)localIt.next();
      Object g=l.getType();
      localToGroup.put(l,g);
      if (!groupToColorCount.containsKey(g)) {
        groupToColorCount.put(g,new Integer(0));
      }
    }
  }
{
    Iterator codeIt=body.getUnits().iterator();
    while (codeIt.hasNext()) {
      Unit s=(Unit)codeIt.next();
      if (s instanceof IdentityUnit && ((IdentityUnit)s).getLeftOp() instanceof Local) {
        Local l=(Local)((IdentityUnit)s).getLeftOp();
        Object group=localToGroup.get(l);
        int count=groupToColorCount.get(group).intValue();
        localToColor.put(l,new Integer(count));
        count++;
        groupToColorCount.put(group,new Integer(count));
      }
    }
  }
  if (isUnsplit)   FastColorer.unsplitAssignColorsToLocals(body,localToGroup,localToColor,groupToColorCount);
 else   FastColorer.assignColorsToLocals(body,localToGroup,localToColor,groupToColorCount);
{
    List originalLocals=new ArrayList();
    localToNewLocal=new HashMap(body.getLocalCount() * 2 + 1,0.7f);
    Map groupIntToLocal=new HashMap(body.getLocalCount() * 2 + 1,0.7f);
    originalLocals.addAll(body.getLocals());
    body.getLocals().clear();
    Iterator localIt=originalLocals.iterator();
    while (localIt.hasNext()) {
      Local original=(Local)localIt.next();
      Object group=localToGroup.get(original);
      int color=localToColor.get(original).intValue();
      GroupIntPair pair=new GroupIntPair(group,color);
      Local newLocal;
      if (groupIntToLocal.containsKey(pair))       newLocal=(Local)groupIntToLocal.get(pair);
 else {
        newLocal=(Local)original.clone();
        newLocal.setType((Type)group);
        int signIndex=newLocal.getName().indexOf("#");
        if (signIndex != -1)         newLocal.setName(newLocal.getName().substring(0,signIndex));
        groupIntToLocal.put(pair,newLocal);
        body.getLocals().add(newLocal);
      }
      localToNewLocal.put(original,newLocal);
    }
  }
{
    Iterator codeIt=body.getUnits().iterator();
    while (codeIt.hasNext()) {
      Unit s=(Unit)codeIt.next();
      Iterator boxIt;
      boxIt=s.getUseBoxes().iterator();
      while (boxIt.hasNext()) {
        ValueBox box=(ValueBox)boxIt.next();
        if (box.getValue() instanceof Local) {
          Local l=(Local)box.getValue();
          box.setValue((Local)localToNewLocal.get(l));
        }
      }
      boxIt=s.getDefBoxes().iterator();
      while (boxIt.hasNext()) {
        ValueBox box=(ValueBox)boxIt.next();
        if (box.getValue() instanceof Local) {
          Local l=(Local)box.getValue();
          box.setValue((Local)localToNewLocal.get(l));
        }
      }
    }
  }
}
