{
  TargetType currTarget=config.getTargetType();
  OS currOs=config.getOs();
  if (currOs == null) {
    if (currTarget != null) {
      currOs=currTarget == TargetType.console ? OS.getDefaultOS() : OS.ios;
    }
 else {
      currOs=OS.getDefaultOS();
    }
  }
  Arch currArch=config.getArch();
  if (currArch == null) {
    if (currTarget != null) {
      currArch=currTarget == TargetType.console ? Arch.getDefaultArch() : Arch.thumbv7;
    }
 else {
      currArch=Arch.getDefaultArch();
    }
  }
  CacheDir currCacheDir=constructCacheDir(volume,currOs,currArch,config.isDebug());
  List<CacheDir> cacheDirs=new ArrayList<CacheDir>();
  for (  OS os : OS.values()) {
    for (    Arch arch : Arch.values()) {
      for (      boolean isDebug : new boolean[]{false,true}) {
        CacheDir cacheDir=constructCacheDir(volume,os,arch,isDebug);
        if (cacheDir != null && !cacheDir.directory.equals(currCacheDir.directory)) {
          cacheDirs.add(cacheDir);
        }
      }
    }
  }
  cacheDirs.sort(new Comparator<CacheDir>(){
    @Override public int compare(    CacheDir o1,    CacheDir o2){
      return new Date(o1.lastModified).compareTo(new Date(o2.lastModified));
    }
  }
);
  if (currCacheDir != null) {
    cacheDirs.add(currCacheDir);
  }
  for (  CacheDir dir : cacheDirs) {
    for (    File file : dir.objFiles) {
      file.delete();
      if (store.getUsableSpace() > MIN_FREE_SPACE) {
        return;
      }
    }
  }
  FileUtils.deleteDirectory(new File(volume,"cache"));
}
