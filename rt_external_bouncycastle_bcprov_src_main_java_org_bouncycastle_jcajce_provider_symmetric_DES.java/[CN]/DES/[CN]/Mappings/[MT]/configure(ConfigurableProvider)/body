{
  provider.addAlgorithm("Cipher.DES",PREFIX + "$ECB");
  provider.addAlgorithm("KeyGenerator.DES",PREFIX + "$KeyGenerator");
  provider.addAlgorithm("SecretKeyFactory.DES",PREFIX + "$KeyFactory");
  provider.addAlgorithm("AlgorithmParameters.DES",PACKAGE + ".util.IvAlgorithmParameters");
  provider.addAlgorithm("Alg.Alias.AlgorithmParameters." + OIWObjectIdentifiers.desCBC,"DES");
  provider.addAlgorithm("Cipher.PBEWITHMD5ANDDES",PREFIX + "$PBEWithMD5");
  provider.addAlgorithm("Cipher.PBEWITHSHA1ANDDES",PREFIX + "$PBEWithSHA1");
  provider.addAlgorithm("Alg.Alias.Cipher." + PKCSObjectIdentifiers.pbeWithMD5AndDES_CBC,"PBEWITHMD5ANDDES");
  provider.addAlgorithm("Alg.Alias.Cipher." + PKCSObjectIdentifiers.pbeWithSHA1AndDES_CBC,"PBEWITHSHA1ANDDES");
  provider.addAlgorithm("SecretKeyFactory.PBEWITHMD5ANDDES",PREFIX + "$PBEWithMD5KeyFactory");
  provider.addAlgorithm("SecretKeyFactory.PBEWITHSHA1ANDDES",PREFIX + "$PBEWithSHA1KeyFactory");
  provider.addAlgorithm("Alg.Alias.SecretKeyFactory.PBEWITHMD5ANDDES-CBC","PBEWITHMD5ANDDES");
  provider.addAlgorithm("Alg.Alias.SecretKeyFactory.PBEWITHSHA1ANDDES-CBC","PBEWITHSHA1ANDDES");
  provider.addAlgorithm("Alg.Alias.SecretKeyFactory." + PKCSObjectIdentifiers.pbeWithMD5AndDES_CBC,"PBEWITHMD5ANDDES");
  provider.addAlgorithm("Alg.Alias.SecretKeyFactory." + PKCSObjectIdentifiers.pbeWithSHA1AndDES_CBC,"PBEWITHSHA1ANDDES");
}
