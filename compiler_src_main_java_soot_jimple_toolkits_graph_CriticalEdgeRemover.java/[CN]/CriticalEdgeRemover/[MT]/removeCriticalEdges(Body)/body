{
  Chain unitChain=b.getUnits();
  int size=unitChain.size();
  Map<Unit,List> predecessors=new HashMap<Unit,List>(2 * size + 1,0.7f);
{
    Iterator unitIt=unitChain.snapshotIterator();
    while (unitIt.hasNext()) {
      Unit currentUnit=(Unit)unitIt.next();
      Iterator succsIt=currentUnit.getUnitBoxes().iterator();
      while (succsIt.hasNext()) {
        Unit target=((UnitBox)succsIt.next()).getUnit();
        List<Unit> predList=predecessors.get(target);
        if (predList == null) {
          predList=new ArrayList<Unit>();
          predList.add(currentUnit);
          predecessors.put(target,predList);
        }
 else         predList.add(currentUnit);
      }
    }
  }
{
    Iterator unitIt=unitChain.snapshotIterator();
    Unit currentUnit=null;
    Unit directPredecessor;
    while (unitIt.hasNext()) {
      directPredecessor=currentUnit;
      currentUnit=(Unit)unitIt.next();
      List predList=predecessors.get(currentUnit);
      int nbPreds=(predList == null) ? 0 : predList.size();
      if (directPredecessor != null && directPredecessor.fallsThrough())       nbPreds++;
      if (nbPreds >= 2) {
        if (directPredecessor != null && directPredecessor.fallsThrough()) {
          directPredecessor=insertGotoAfter(unitChain,directPredecessor,currentUnit);
        }
        Iterator predIt=predList.iterator();
        while (predIt.hasNext()) {
          Unit predecessor=(Unit)predIt.next();
          int nbSuccs=predecessor.getUnitBoxes().size();
          nbSuccs+=predecessor.fallsThrough() ? 1 : 0;
          if (nbSuccs >= 2) {
            if (directPredecessor == null)             directPredecessor=insertGotoBefore(unitChain,currentUnit,currentUnit);
 else             directPredecessor=insertGotoAfter(unitChain,directPredecessor,currentUnit);
            redirectBranch(predecessor,currentUnit,directPredecessor);
          }
        }
      }
    }
  }
}
