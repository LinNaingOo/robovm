{
  SootClass scJLO=getSootClass("java.lang.Object");
  SootClass scA=getSootClass("org.robovm.compiler.a.A");
  SootClass scB=getSootClass("org.robovm.compiler.b.B");
  VTable.Cache cache=new VTable.Cache();
  VTable vtableJLO=cache.get(scJLO);
  VTable vtableA=cache.get(scA);
  VTable vtableB=cache.get(scB);
  assertEquals(16,vtableB.size());
  Entry toStringEntry=vtableB.findEntry("toString","()Ljava/lang/String;");
  assertEquals(scA.getName(),toStringEntry.getDeclaringClass());
  Entry superToStringEntry=vtableA.findEntry("toString","()Ljava/lang/String;");
  assertSame(toStringEntry,superToStringEntry);
  Entry equalsEntry=vtableB.findEntry("equals","(Ljava/lang/Object;)Z");
  assertEquals(scA.getName(),equalsEntry.getDeclaringClass());
  Entry superEqualsEntry=vtableA.findEntry("equals","(Ljava/lang/Object;)Z");
  assertSame(superEqualsEntry,equalsEntry);
  Entry cloneEntry=vtableB.findEntry("clone","()Ljava/lang/Object;");
  assertEquals(scJLO.getName(),cloneEntry.getDeclaringClass());
  Entry superCloneEntry=vtableJLO.findEntry("clone","()Ljava/lang/Object;");
  assertSame(superCloneEntry,cloneEntry);
  Entry fooInAEntry=vtableB.findEntry("org.robovm.compiler.a","foo","()V");
  assertEquals(scA.getName(),fooInAEntry.getDeclaringClass());
  assertEquals(11,fooInAEntry.getIndex());
  Entry fooInBEntry=vtableB.findEntry("org.robovm.compiler.b","foo","()V");
  assertEquals(scB.getName(),fooInBEntry.getDeclaringClass());
  assertEquals(14,fooInBEntry.getIndex());
  assertNotSame(fooInAEntry,fooInBEntry);
  Entry fooIVEntry=vtableB.findEntry("foo","(I)V");
  assertEquals(scB.getName(),fooIVEntry.getDeclaringClass());
  Entry superFooIVEntry=vtableA.findEntry("foo","(I)V");
  assertEquals(superFooIVEntry.getIndex(),fooIVEntry.getIndex());
  assertNotSame(superFooIVEntry,fooIVEntry);
  Entry barInAEntry=vtableB.findEntry("org.robovm.compiler.a","bar","()V");
  assertEquals(scA.getName(),barInAEntry.getDeclaringClass());
  assertEquals(12,barInAEntry.getIndex());
  Entry barInBEntry=vtableB.findEntry("org.robovm.compiler.b","bar","()V");
  assertEquals(scB.getName(),barInBEntry.getDeclaringClass());
  assertEquals(15,barInBEntry.getIndex());
  assertNotSame(barInAEntry,barInBEntry);
}
