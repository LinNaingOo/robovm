{
  InputStream in=null;
  Hashtable<String,String> props=new Hashtable<String,String>();
  String iniName=System.getProperty("test.ini.file","JCLAuto.ini");
  try {
    in=new FileInputStream(iniName);
  }
 catch (  IOException e) {
  }
catch (  Exception e) {
    System.out.println("SupportConfiguration.loadProperties()");
    System.out.println(e);
    e.printStackTrace();
  }
  if (in == null) {
    try {
      Class<?> cl=Class.forName("com.ibm.support.Support_Configuration");
      in=cl.getResourceAsStream(iniName);
    }
 catch (    ClassNotFoundException e) {
    }
  }
  try {
    if (in != null) {
      load(in,props);
    }
  }
 catch (  IOException e) {
  }
  if (props.size() == 0) {
    return;
  }
  String value;
  value=props.get("DomainAddress");
  if (value != null) {
    DomainAddress=value;
  }
  value=props.get("WebName");
  if (value != null) {
    WebName=value;
  }
  value=props.get("TestResourcesDir");
  if (value != null) {
    TestResourcesDir=value;
  }
  value=props.get("HomeAddressResponse");
  if (value != null) {
    HomeAddressResponse=value;
  }
  value=props.get("HomeAddressSoftware");
  if (value != null) {
    HomeAddressSoftware=value;
  }
  value=props.get("SocksServerTestHost");
  if (value != null) {
    SocksServerTestHost=value;
  }
  value=props.get("SocksServerTestPort");
  if (value != null) {
    SocksServerTestPort=Integer.parseInt(value);
  }
  value=props.get("UnresolvedIP");
  if (value != null) {
    UnresolvedIP=value;
  }
  value=props.get("InetTestAddress");
  if (value != null) {
    InetTestAddress=value;
  }
  value=props.get("InetTestIP");
  if (value != null) {
    InetTestIP=value;
    byte[] addr=new byte[4];
    int last=0;
    try {
      for (int i=0; i < 3; i++) {
        int dot=InetTestIP.indexOf('.',last);
        addr[i]=(byte)Integer.parseInt(InetTestIP.substring(last,dot));
        last=dot + 1;
      }
      addr[3]=(byte)Integer.parseInt(InetTestIP.substring(last));
      InetTestCaddr=addr;
    }
 catch (    RuntimeException e) {
      System.out.println("Error parsing InetTestIP (" + InetTestIP + ")");
      System.out.println(e);
    }
  }
  value=props.get("NonLocalAddressBytes");
  if (value != null) {
    String nonLocalAddressBytesString=value;
    byte[] addr=new byte[4];
    int last=0;
    try {
      for (int i=0; i < 3; i++) {
        int dot=nonLocalAddressBytesString.indexOf('.',last);
        addr[i]=(byte)Integer.parseInt(nonLocalAddressBytesString.substring(last,dot));
        last=dot + 1;
      }
      addr[3]=(byte)Integer.parseInt(nonLocalAddressBytesString.substring(last));
      nonLocalAddressBytes=addr;
    }
 catch (    RuntimeException e) {
      System.out.println("Error parsing NonLocalAddressBytes (" + nonLocalAddressBytesString + ")");
      System.out.println(e);
    }
  }
  value=props.get("InetTestAddress2");
  if (value != null) {
    InetTestAddress2=value;
  }
  value=props.get("InetTestIP2");
  if (value != null) {
    InetTestIP2=value;
  }
  value=props.get("SpecialInetTestAddress");
  if (value != null) {
    SpecialInetTestAddress=value;
  }
  value=props.get("SpecialInetTestAddressNumber");
  if (value != null) {
    SpecialInetTestAddressNumber=Integer.parseInt(value);
  }
  value=props.get("FTPTestAddress");
  if (value != null) {
    FTPTestAddress=value;
  }
  value=props.get("URLConnectionLastModifiedString");
  if (value != null) {
    URLConnectionLastModifiedString=value;
  }
  value=props.get("URLConnectionLastModified");
  if (value != null) {
    URLConnectionLastModified=Long.parseLong(value);
  }
  value=props.get("URLConnectionDate");
  if (value != null) {
    URLConnectionDate=Long.parseLong(value);
  }
  value=props.get("ResolvedNotExistingHost");
  if (value != null) {
    ResolvedNotExistingHost=value;
  }
  value=props.get("InetAlias1");
  if (value != null) {
    InetAlias1=value;
  }
  value=props.get("InetAlias2");
  if (value != null) {
    InetAlias2=value;
  }
  value=props.get("IPv6GlobalAddressJcl4");
  if (value != null) {
    IPv6GlobalAddressJcl4=value;
  }
}
