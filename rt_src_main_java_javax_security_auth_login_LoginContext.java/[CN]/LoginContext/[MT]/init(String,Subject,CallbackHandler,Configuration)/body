{
  userProvidedSubject=(this.subject=subject) != null;
  if (name == null) {
    throw new LoginException(Messages.getString("auth.00"));
  }
  if (config == null) {
    config=Configuration.getAccessibleConfiguration();
  }
 else {
    userProvidedConfig=true;
  }
  SecurityManager sm=System.getSecurityManager();
  if (sm != null && !userProvidedConfig) {
    sm.checkPermission(new AuthPermission("createLoginContext." + name));
  }
  AppConfigurationEntry[] entries=config.getAppConfigurationEntry(name);
  if (entries == null) {
    if (sm != null && !userProvidedConfig) {
      sm.checkPermission(new AuthPermission("createLoginContext.other"));
    }
    entries=config.getAppConfigurationEntry("other");
    if (entries == null) {
      throw new LoginException(Messages.getString("auth.35",name));
    }
  }
  modules=new Module[entries.length];
  for (int i=0; i < modules.length; i++) {
    modules[i]=new Module(entries[i]);
  }
  try {
    AccessController.doPrivileged(new PrivilegedExceptionAction<Void>(){
      public Void run() throws Exception {
        contextClassLoader=Thread.currentThread().getContextClassLoader();
        if (contextClassLoader == null) {
          contextClassLoader=ClassLoader.getSystemClassLoader();
        }
        if (cbHandler == null) {
          String klassName=Security.getProperty(DEFAULT_CALLBACK_HANDLER_PROPERTY);
          if (klassName == null || klassName.length() == 0) {
            return null;
          }
          Class<?> klass=Class.forName(klassName,true,contextClassLoader);
          callbackHandler=(CallbackHandler)klass.newInstance();
        }
 else {
          callbackHandler=cbHandler;
        }
        return null;
      }
    }
);
  }
 catch (  PrivilegedActionException ex) {
    Throwable cause=ex.getCause();
    throw (LoginException)new LoginException(Messages.getString("auth.36")).initCause(cause);
  }
  if (userProvidedConfig) {
    userContext=AccessController.getContext();
  }
 else   if (callbackHandler != null) {
    userContext=AccessController.getContext();
    callbackHandler=new ContextedCallbackHandler(callbackHandler);
  }
}
