{
  for (  KeyStore keyStore : keyStores()) {
    try {
      keyStore.setKeyEntry(null,null,null);
      fail();
    }
 catch (    KeyStoreException expected) {
    }
  }
  for (  KeyStore keyStore : keyStores()) {
    keyStore.load(null,null);
    if (isReadOnly(keyStore)) {
      try {
        keyStore.setKeyEntry(null,null,null);
        fail();
      }
 catch (      UnsupportedOperationException expected) {
      }
      continue;
    }
    try {
      keyStore.setKeyEntry(null,null,null);
      fail();
    }
 catch (    Exception e) {
      if (e.getClass() != NullPointerException.class && e.getClass() != IllegalArgumentException.class && e.getClass() != KeyStoreException.class && e.getClass() != RuntimeException.class) {
        throw e;
      }
    }
  }
  for (  KeyStore keyStore : keyStores()) {
    if (!isNullPasswordAllowed(keyStore)) {
      continue;
    }
    if (isSetKeyByteArrayUnimplemented(keyStore)) {
      continue;
    }
    keyStore.load(null,null);
    assertNull(keyStore.getKey(ALIAS_PRIVATE,PASSWORD_KEY));
    if (isReadOnly(keyStore)) {
      try {
        setPrivateKeyBytes(keyStore);
        fail();
      }
 catch (      UnsupportedOperationException expected) {
      }
      continue;
    }
    setPrivateKeyBytes(keyStore);
    assertPrivateKey(keyStore.getKey(ALIAS_PRIVATE,PASSWORD_KEY));
    assertCertificateChain(keyStore.getCertificateChain(ALIAS_PRIVATE));
    if (isSecretKeyEnabled(keyStore)) {
      assertNull(keyStore.getKey(ALIAS_SECRET,PASSWORD_KEY));
      setSecretKeyBytes(keyStore);
      assertSecretKey(keyStore.getKey(ALIAS_SECRET,PASSWORD_KEY));
    }
 else {
      try {
        keyStore.setKeyEntry(ALIAS_SECRET,getSecretKey().getEncoded(),null);
        fail();
      }
 catch (      KeyStoreException expected) {
      }
    }
  }
  for (  KeyStore keyStore : keyStores()) {
    if (!isNullPasswordAllowed(keyStore)) {
      continue;
    }
    if (isSetKeyByteArrayUnimplemented(keyStore)) {
      continue;
    }
    populate(keyStore);
    if (isReadOnly(keyStore)) {
      assertNull(keyStore.getKey(ALIAS_PRIVATE,PASSWORD_KEY));
      assertNull(keyStore.getKey(ALIAS_ALT_CASE_PRIVATE,PASSWORD_KEY));
      assertNull(keyStore.getKey(ALIAS_SECRET,PASSWORD_KEY));
      assertNull(keyStore.getKey(ALIAS_ALT_CASE_SECRET,PASSWORD_KEY));
    }
 else     if (isCaseSensitive(keyStore)) {
      assertPrivateKey(keyStore.getKey(ALIAS_PRIVATE,PASSWORD_KEY));
      assertNull(keyStore.getKey(ALIAS_ALT_CASE_PRIVATE,PASSWORD_KEY));
      setPrivateKeyBytes(keyStore,ALIAS_ALT_CASE_PRIVATE,getPrivateKey2());
      assertPrivateKey(keyStore.getKey(ALIAS_PRIVATE,PASSWORD_KEY));
      assertPrivateKey2(keyStore.getKey(ALIAS_ALT_CASE_PRIVATE,PASSWORD_KEY));
      if (isSecretKeyEnabled(keyStore)) {
        assertSecretKey(keyStore.getKey(ALIAS_SECRET,PASSWORD_KEY));
        assertNull(keyStore.getKey(ALIAS_ALT_CASE_SECRET,PASSWORD_KEY));
        setSecretKeyBytes(keyStore,ALIAS_ALT_CASE_PRIVATE,getSecretKey2());
        assertSecretKey(keyStore.getKey(ALIAS_SECRET,PASSWORD_KEY));
        assertSecretKey2(keyStore.getKey(ALIAS_ALT_CASE_SECRET,PASSWORD_KEY));
      }
    }
 else {
      assertPrivateKey(keyStore.getKey(ALIAS_PRIVATE,PASSWORD_KEY));
      assertPrivateKey(keyStore.getKey(ALIAS_ALT_CASE_PRIVATE,PASSWORD_KEY));
      setPrivateKeyBytes(keyStore,ALIAS_ALT_CASE_PRIVATE,getPrivateKey2());
      assertPrivateKey2(keyStore.getKey(ALIAS_PRIVATE,PASSWORD_KEY));
      assertPrivateKey2(keyStore.getKey(ALIAS_ALT_CASE_PRIVATE,PASSWORD_KEY));
      if (isSecretKeyEnabled(keyStore)) {
        assertSecretKey(keyStore.getKey(ALIAS_SECRET,PASSWORD_KEY));
        assertSecretKey(keyStore.getKey(ALIAS_ALT_CASE_SECRET,PASSWORD_KEY));
        setSecretKeyBytes(keyStore,ALIAS_ALT_CASE_PRIVATE,getSecretKey2());
        assertSecretKey2(keyStore.getKey(ALIAS_SECRET,PASSWORD_KEY));
        assertSecretKey2(keyStore.getKey(ALIAS_ALT_CASE_SECRET,PASSWORD_KEY));
      }
    }
  }
}
