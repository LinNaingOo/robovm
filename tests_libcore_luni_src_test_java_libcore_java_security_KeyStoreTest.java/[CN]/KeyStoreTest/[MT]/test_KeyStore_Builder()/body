{
  for (  KeyStore keyStore : keyStores()) {
    keyStore.load(null,null);
    try {
      Builder.newInstance(keyStore,null);
      fail(keyStore.getType());
    }
 catch (    NullPointerException expected) {
    }
  }
  for (  KeyStore keyStore : keyStores()) {
    try {
      Builder.newInstance(keyStore.getType(),keyStore.getProvider(),null);
      fail(keyStore.getType());
    }
 catch (    NullPointerException expected) {
    }
  }
  for (  KeyStore keyStore : keyStores()) {
    try {
      Builder.newInstance(null,null,null,null);
      fail(keyStore.getType());
    }
 catch (    NullPointerException expected) {
    }
    try {
      Builder.newInstance(keyStore.getType(),keyStore.getProvider(),null,null);
      fail(keyStore.getType());
    }
 catch (    NullPointerException expected) {
    }
  }
  for (  KeyStore keyStore : keyStores()) {
    keyStore.load(null,null);
    Builder builder=Builder.newInstance(keyStore,PARAM_STORE);
    try {
      builder.getProtectionParameter(null);
      fail(keyStore.getType());
    }
 catch (    NullPointerException expected) {
    }
    assertEquals(keyStore,builder.getKeyStore());
    try {
      builder.getProtectionParameter(null);
      fail(keyStore.getType());
    }
 catch (    NullPointerException expected) {
    }
    assertEquals(PARAM_STORE,builder.getProtectionParameter(""));
  }
  for (  KeyStore keyStore : keyStores()) {
    populate(keyStore);
    File file=File.createTempFile("keystore",keyStore.getProvider().getName());
    OutputStream os=null;
    try {
      os=new FileOutputStream(file);
      if (isLoadStoreUnsupported(keyStore) || isReadOnly(keyStore)) {
        try {
          keyStore.store(os,PASSWORD_STORE);
          fail(keyStore.getType());
        }
 catch (        UnsupportedOperationException expected) {
        }
        continue;
      }
      keyStore.store(os,PASSWORD_STORE);
      os.close();
      Builder builder=Builder.newInstance(keyStore.getType(),keyStore.getProvider(),file,PARAM_STORE);
      assertEquals(keyStore.getType(),builder.getKeyStore().getType());
      assertEquals(keyStore.getProvider(),builder.getKeyStore().getProvider());
      assertEquals(PARAM_STORE,builder.getProtectionParameter(""));
      assertEqualsKeyStores(file,PASSWORD_STORE,keyStore);
    }
  finally {
      try {
        if (os != null) {
          os.close();
        }
      }
 catch (      IOException ignored) {
      }
      file.delete();
    }
  }
  for (  KeyStore keyStore : keyStores()) {
    if (isLoadStoreUnsupported(keyStore)) {
      continue;
    }
    Builder builder=Builder.newInstance(keyStore.getType(),keyStore.getProvider(),PARAM_STORE);
    assertEquals(keyStore.getType(),builder.getKeyStore().getType());
    assertEquals(keyStore.getProvider(),builder.getKeyStore().getProvider());
    assertEquals(PARAM_STORE,builder.getProtectionParameter(""));
  }
}
