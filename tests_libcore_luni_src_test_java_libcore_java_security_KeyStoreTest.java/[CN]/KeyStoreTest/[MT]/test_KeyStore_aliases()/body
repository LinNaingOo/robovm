{
  for (  KeyStore keyStore : keyStores()) {
    try {
      keyStore.aliases();
      fail(keyStore.getType());
    }
 catch (    KeyStoreException expected) {
    }
  }
  for (  KeyStore keyStore : keyStores()) {
    keyStore.load(null,null);
    if (isPersistentStorage(keyStore)) {
      assertNotNull("Should be able to query size: " + keyStore.getType(),keyStore.aliases());
    }
 else     if (hasDefaultContents(keyStore)) {
      assertTrue("Should have more than one alias already: " + keyStore.getType(),keyStore.aliases().hasMoreElements());
    }
 else {
      assertEquals("Should have no aliases:" + keyStore.getType(),Collections.EMPTY_SET,new HashSet(Collections.list(keyStore.aliases())));
    }
  }
  for (  KeyStore keyStore : keyStores()) {
    populate(keyStore);
    Set<String> expected=new HashSet<String>();
    if (isKeyPasswordSupported(keyStore)) {
      expected.add(ALIAS_PRIVATE);
    }
    if (isNullPasswordAllowed(keyStore)) {
      expected.add(ALIAS_NO_PASSWORD_PRIVATE);
    }
    if (isSecretKeyEnabled(keyStore)) {
      expected.add(ALIAS_SECRET);
      if (isNullPasswordAllowed(keyStore)) {
        expected.add(ALIAS_NO_PASSWORD_SECRET);
      }
    }
    if (isCertificateEnabled(keyStore)) {
      expected.add(ALIAS_CERTIFICATE);
    }
    if (isPersistentStorage(keyStore)) {
      assertNotNull("Should be able to query size: " + keyStore.getType(),keyStore.aliases());
    }
 else     if (hasDefaultContents(keyStore)) {
      assertTrue(keyStore.aliases().hasMoreElements());
    }
 else {
      assertEquals(expected,new HashSet<String>(Collections.list(keyStore.aliases())));
    }
  }
}
