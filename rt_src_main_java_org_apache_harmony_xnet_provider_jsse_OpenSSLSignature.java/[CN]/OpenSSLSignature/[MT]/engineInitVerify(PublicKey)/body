{
  destroyContextIfExists();
  if (publicKey instanceof OpenSSLDSAPublicKey) {
    if (engineType != EngineType.DSA) {
      throw new InvalidKeyException("Signature not initialized as DSA");
    }
    OpenSSLDSAPublicKey dsaPublicKey=(OpenSSLDSAPublicKey)publicKey;
    key=dsaPublicKey.getOpenSSLKey();
  }
 else   if (publicKey instanceof DSAPublicKey) {
    if (engineType != EngineType.DSA) {
      throw new InvalidKeyException("Signature not initialized as DSA");
    }
    DSAPublicKey dsaPublicKey=(DSAPublicKey)publicKey;
    key=OpenSSLDSAPublicKey.getInstance(dsaPublicKey);
  }
 else   if (publicKey instanceof OpenSSLRSAPublicKey) {
    if (engineType != EngineType.RSA) {
      throw new InvalidKeyException("Signature not initialized as RSA");
    }
    OpenSSLRSAPublicKey rsaPublicKey=(OpenSSLRSAPublicKey)publicKey;
    key=rsaPublicKey.getOpenSSLKey();
  }
 else   if (publicKey instanceof RSAPublicKey) {
    if (engineType != EngineType.RSA) {
      throw new InvalidKeyException("Signature not initialized as RSA");
    }
    RSAPublicKey rsaPublicKey=(RSAPublicKey)publicKey;
    key=OpenSSLRSAPublicKey.getInstance(rsaPublicKey);
  }
 else {
    throw new InvalidKeyException("Need DSA or RSA public key");
  }
}
