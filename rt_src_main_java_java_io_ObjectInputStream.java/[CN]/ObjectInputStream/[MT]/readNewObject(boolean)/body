{
  ObjectStreamClass classDesc=readClassDesc();
  if (classDesc == null) {
    throw new InvalidClassException(Messages.getString("luni.C1"));
  }
  Integer newHandle=nextHandle();
  boolean wasExternalizable=(classDesc.getFlags() & SC_EXTERNALIZABLE) > 0;
  boolean wasSerializable=(classDesc.getFlags() & SC_SERIALIZABLE) > 0;
  Class<?> objectClass=classDesc.forClass();
  Object result, registeredResult=null;
  if (objectClass != null) {
    long constructor=classDesc.getConstructor();
    if (constructor == ObjectStreamClass.CONSTRUCTOR_IS_NOT_RESOLVED) {
      constructor=accessor.getMethodID(resolveConstructorClass(objectClass,wasSerializable,wasExternalizable),null,new Class[0]);
      classDesc.setConstructor(constructor);
    }
    result=accessor.newInstance(objectClass,constructor,null);
    registerObjectRead(result,newHandle,unshared);
    registeredResult=result;
  }
 else {
    result=null;
  }
  try {
    currentObject=result;
    currentClass=classDesc;
    if (wasExternalizable) {
      boolean blockData=(classDesc.getFlags() & SC_BLOCK_DATA) > 0;
      if (!blockData) {
        primitiveData=input;
      }
      if (mustResolve) {
        Externalizable extern=(Externalizable)result;
        extern.readExternal(this);
      }
      if (blockData) {
        discardData();
      }
 else {
        primitiveData=emptyStream;
      }
    }
 else {
      readHierarchy(result,classDesc);
    }
  }
  finally {
    currentObject=null;
    currentClass=null;
  }
  if (objectClass != null) {
    if (classDesc.hasMethodReadResolve()) {
      Method methodReadResolve=classDesc.getMethodReadResolve();
      try {
        result=methodReadResolve.invoke(result,(Object[])null);
      }
 catch (      IllegalAccessException iae) {
      }
catch (      InvocationTargetException ite) {
        Throwable target=ite.getTargetException();
        if (target instanceof ObjectStreamException) {
          throw (ObjectStreamException)target;
        }
 else         if (target instanceof Error) {
          throw (Error)target;
        }
 else {
          throw (RuntimeException)target;
        }
      }
    }
  }
  if (result != null && enableResolve) {
    result=resolveObject(result);
  }
  if (registeredResult != result) {
    registerObjectRead(result,newHandle,unshared);
  }
  return result;
}
