{
  try {
    final Signature sig=helper.createSignature(sigAlgId);
    if (random != null) {
      sig.initSign(privateKey,random);
    }
 else {
      sig.initSign(privateKey);
    }
    return new ContentSigner(){
      private SignatureOutputStream stream=new SignatureOutputStream(sig);
      public AlgorithmIdentifier getAlgorithmIdentifier(){
        return sigAlgId;
      }
      public OutputStream getOutputStream(){
        return stream;
      }
      public byte[] getSignature(){
        try {
          return stream.getSignature();
        }
 catch (        SignatureException e) {
          throw new RuntimeOperatorException("exception obtaining signature: " + e.getMessage(),e);
        }
      }
    }
;
  }
 catch (  GeneralSecurityException e) {
    throw new OperatorCreationException("cannot create signer: " + e.getMessage(),e);
  }
}
