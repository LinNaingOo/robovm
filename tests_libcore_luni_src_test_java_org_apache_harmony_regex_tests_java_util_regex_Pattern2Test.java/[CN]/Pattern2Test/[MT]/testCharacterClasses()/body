{
  Pattern p;
  Matcher m;
  p=Pattern.compile("[p].*[l]");
  m=p.matcher("paul");
  assertTrue(m.matches());
  m=p.matcher("pool");
  assertTrue(m.matches());
  m=p.matcher("pong");
  assertFalse(m.matches());
  m=p.matcher("pl");
  assertTrue(m.matches());
  p=Pattern.compile("[pm].*[lp]");
  m=p.matcher("prop");
  assertTrue(m.matches());
  m=p.matcher("mall");
  assertTrue(m.matches());
  m=p.matcher("pong");
  assertFalse(m.matches());
  m=p.matcher("pill");
  assertTrue(m.matches());
  p=Pattern.compile("[<\\[].*[\\]>]");
  m=p.matcher("<foo>");
  assertTrue(m.matches());
  m=p.matcher("[bar]");
  assertTrue(m.matches());
  m=p.matcher("{foobar]");
  assertFalse(m.matches());
  m=p.matcher("<pill]");
  assertTrue(m.matches());
  p=Pattern.compile("[^bc][a-z]+[tr]");
  m=p.matcher("pat");
  assertTrue(m.matches());
  m=p.matcher("liar");
  assertTrue(m.matches());
  m=p.matcher("car");
  assertFalse(m.matches());
  m=p.matcher("gnat");
  assertTrue(m.matches());
  p=Pattern.compile("[a-z]_+[a-zA-Z]-+[0-9p-z]");
  m=p.matcher("d__F-8");
  assertTrue(m.matches());
  m=p.matcher("c_a-q");
  assertTrue(m.matches());
  m=p.matcher("a__R-a");
  assertFalse(m.matches());
  m=p.matcher("r_____d-----5");
  assertTrue(m.matches());
  p=Pattern.compile("[\\u1234-\\u2345]_+[a-z]-+[\u0001-\\x11]");
  m=p.matcher("\u2000_q-\u0007");
  assertTrue(m.matches());
  m=p.matcher("\u1234_z-\u0001");
  assertTrue(m.matches());
  m=p.matcher("r_p-q");
  assertFalse(m.matches());
  m=p.matcher("\u2345_____d-----\n");
  assertTrue(m.matches());
  p=Pattern.compile("[pm[t]][a-z]+[[r]lp]");
  m=p.matcher("prop");
  assertTrue(m.matches());
  m=p.matcher("tsar");
  assertTrue(m.matches());
  m=p.matcher("pong");
  assertFalse(m.matches());
  m=p.matcher("moor");
  assertTrue(m.matches());
  p=Pattern.compile("[[a-p]&&[g-z]]+-+[[a-z]&&q]-+[x&&[a-z]]-+");
  m=p.matcher("h--q--x--");
  assertTrue(m.matches());
  m=p.matcher("hog--q-x-");
  assertTrue(m.matches());
  m=p.matcher("ape--q-x-");
  assertFalse(m.matches());
  m=p.matcher("mop--q-x----");
  assertTrue(m.matches());
  p=Pattern.compile("[[xyz]&[axy]]");
  m=p.matcher("x");
  m=p.matcher("z");
  m=p.matcher("&");
  p=Pattern.compile("[abc[123]&&[345]def]");
  m=p.matcher("a");
  p=Pattern.compile("[[abc]&]");
  try {
    p=Pattern.compile("[[abc]&&");
    fail("PatternSyntaxException expected");
  }
 catch (  PatternSyntaxException e) {
  }
  p=Pattern.compile("[[abc]\\&&[xyz]]");
  p=Pattern.compile("[[abc]&\\&[xyz]]");
  p=Pattern.compile("[[a-p]&&[g-z]&&[d-k]]");
  m=p.matcher("g");
  assertTrue(m.matches());
  m=p.matcher("m");
  assertFalse(m.matches());
  p=Pattern.compile("[[[a-p]&&[g-z]]&&[d-k]]");
  m=p.matcher("g");
  assertTrue(m.matches());
  m=p.matcher("m");
  assertFalse(m.matches());
  p=Pattern.compile("[[a-z]&&[^aeiou]][aeiou][[^xyz]&&[a-z]]");
  m=p.matcher("pop");
  assertTrue(m.matches());
  m=p.matcher("tag");
  assertTrue(m.matches());
  m=p.matcher("eat");
  assertFalse(m.matches());
  m=p.matcher("tax");
  assertFalse(m.matches());
  m=p.matcher("zip");
  assertTrue(m.matches());
  p=Pattern.compile(".+/x.z");
  m=p.matcher("!$/xyz");
  assertTrue(m.matches());
  m=p.matcher("%\n\r/x\nz");
  assertFalse(m.matches());
  p=Pattern.compile(".+/x.z",Pattern.DOTALL);
  m=p.matcher("%\n\r/x\nz");
  assertTrue(m.matches());
  p=Pattern.compile("\\d+[a-z][\\dx]");
  m=p.matcher("42a6");
  assertTrue(m.matches());
  m=p.matcher("21zx");
  assertTrue(m.matches());
  m=p.matcher("ab6");
  assertFalse(m.matches());
  m=p.matcher("56912f9");
  assertTrue(m.matches());
  p=Pattern.compile("\\D+[a-z]-[\\D3]");
  m=p.matcher("za-p");
  assertTrue(m.matches());
  m=p.matcher("%!e-3");
  assertTrue(m.matches());
  m=p.matcher("9a-x");
  assertFalse(m.matches());
  m=p.matcher("\u1234pp\ny-3");
  assertTrue(m.matches());
  p=Pattern.compile("<[a-zA-Z]+\\s+[0-9]+[\\sx][^\\s]>");
  m=p.matcher("<cat \t1\fx>");
  assertTrue(m.matches());
  m=p.matcher("<cat \t1\f >");
  assertFalse(m.matches());
  m=p.matcher("xyz <foo\n\r22 5> <pp \t\n\f\r \u000b41x\u1234><pp \nx7\rc> zzz");
  assertTrue(m.find());
  assertTrue(m.find());
  assertFalse(m.find());
  p=Pattern.compile("<[a-z] \\S[0-9][\\S\n]+[^\\S]221>");
  m=p.matcher("<f $0**\n** 221>");
  assertTrue(m.matches());
  m=p.matcher("<x 441\t221>");
  assertTrue(m.matches());
  m=p.matcher("<z \t9\ng 221>");
  assertFalse(m.matches());
  m=p.matcher("<z 60\ngg\u1234\f221>");
  assertTrue(m.matches());
  p=Pattern.compile("<[a-z] \\S[0-9][\\S\n]+[^\\S]221[\\S&&[^abc]]>");
  m=p.matcher("<f $0**\n** 221x>");
  assertTrue(m.matches());
  m=p.matcher("<x 441\t221z>");
  assertTrue(m.matches());
  m=p.matcher("<x 441\t221 >");
  assertFalse(m.matches());
  m=p.matcher("<x 441\t221c>");
  assertFalse(m.matches());
  m=p.matcher("<z \t9\ng 221x>");
  assertFalse(m.matches());
  m=p.matcher("<z 60\ngg\u1234\f221\u0001>");
  assertTrue(m.matches());
  p=Pattern.compile("<\\w+\\s[0-9]+;[^\\w]\\w+/[\\w$]+;");
  m=p.matcher("<f1 99;!foo5/a$7;");
  assertTrue(m.matches());
  m=p.matcher("<f$ 99;!foo5/a$7;");
  assertFalse(m.matches());
  m=p.matcher("<abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789 99;!foo5/a$7;");
  assertTrue(m.matches());
  p=Pattern.compile("<\\W\\w+\\s[0-9]+;[\\W_][^\\W]+\\s[0-9]+;");
  m=p.matcher("<$foo3\n99;_bar\t0;");
  assertTrue(m.matches());
  m=p.matcher("<hh 99;_g 0;");
  assertFalse(m.matches());
  m=p.matcher("<*xx\t00;^zz\f11;");
  assertTrue(m.matches());
}
