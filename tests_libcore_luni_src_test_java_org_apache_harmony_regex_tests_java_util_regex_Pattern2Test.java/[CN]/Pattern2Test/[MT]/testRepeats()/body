{
  Pattern p;
  Matcher m;
  p=Pattern.compile("(abc)?c");
  m=p.matcher("abcc");
  assertTrue(m.matches());
  m=p.matcher("c");
  assertTrue(m.matches());
  m=p.matcher("cc");
  assertFalse(m.matches());
  m=p.matcher("abcabcc");
  assertFalse(m.matches());
  p=Pattern.compile("(abc)*c");
  m=p.matcher("abcc");
  assertTrue(m.matches());
  m=p.matcher("c");
  assertTrue(m.matches());
  m=p.matcher("cc");
  assertFalse(m.matches());
  m=p.matcher("abcabcc");
  assertTrue(m.matches());
  p=Pattern.compile("(abc)+c");
  m=p.matcher("abcc");
  assertTrue(m.matches());
  m=p.matcher("c");
  assertFalse(m.matches());
  m=p.matcher("cc");
  assertFalse(m.matches());
  m=p.matcher("abcabcc");
  assertTrue(m.matches());
  p=Pattern.compile("(abc){0}c");
  m=p.matcher("abcc");
  assertFalse(m.matches());
  m=p.matcher("c");
  assertTrue(m.matches());
  p=Pattern.compile("(abc){1}c");
  m=p.matcher("abcc");
  assertTrue(m.matches());
  m=p.matcher("c");
  assertFalse(m.matches());
  m=p.matcher("abcabcc");
  assertFalse(m.matches());
  p=Pattern.compile("(abc){2}c");
  m=p.matcher("abcc");
  assertFalse(m.matches());
  m=p.matcher("c");
  assertFalse(m.matches());
  m=p.matcher("cc");
  assertFalse(m.matches());
  m=p.matcher("abcabcc");
  assertTrue(m.matches());
}
