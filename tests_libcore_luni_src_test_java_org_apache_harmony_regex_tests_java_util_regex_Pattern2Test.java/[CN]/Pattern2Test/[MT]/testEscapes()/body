{
  Pattern p;
  Matcher m;
  p=Pattern.compile("([a-z]+)\\\\([a-z]+);");
  m=p.matcher("fred\\ginger;abbott\\costello;jekell\\hyde;");
  assertTrue(m.find());
  assertEquals("fred",m.group(1));
  assertEquals("ginger",m.group(2));
  assertTrue(m.find());
  assertEquals("abbott",m.group(1));
  assertEquals("costello",m.group(2));
  assertTrue(m.find());
  assertEquals("jekell",m.group(1));
  assertEquals("hyde",m.group(2));
  assertFalse(m.find());
  p=Pattern.compile("([a-z]+)[\\n\\t\\r\\f\\e\\a]+([a-z]+)");
  m=p.matcher("aa\nbb;cc\u0009\rdd;ee\u000C\u001Bff;gg\n\u0007hh");
  assertTrue(m.find());
  assertEquals("aa",m.group(1));
  assertEquals("bb",m.group(2));
  assertTrue(m.find());
  assertEquals("cc",m.group(1));
  assertEquals("dd",m.group(2));
  assertTrue(m.find());
  assertEquals("ee",m.group(1));
  assertEquals("ff",m.group(2));
  assertTrue(m.find());
  assertEquals("gg",m.group(1));
  assertEquals("hh",m.group(2));
  assertFalse(m.find());
  p=Pattern.compile("([0-9]+)[\\07\\040\\0160];");
  m=p.matcher("11\u0007;22:;33 ;44p;");
  assertTrue(m.find());
  assertEquals("11",m.group(1));
  assertTrue(m.find());
  assertEquals("33",m.group(1));
  assertTrue(m.find());
  assertEquals("44",m.group(1));
  assertFalse(m.find());
  try {
    p=Pattern.compile("\\08");
    fail("PatternSyntaxException expected");
  }
 catch (  PatternSyntaxException e) {
  }
  try {
    p=Pattern.compile("\\0");
    fail("PatternSyntaxException expected");
  }
 catch (  PatternSyntaxException e) {
  }
  try {
    p=Pattern.compile("\\0;");
    fail("PatternSyntaxException expected");
  }
 catch (  PatternSyntaxException e) {
  }
  p=Pattern.compile("([0-9]+)[\\cA\\cB\\cC\\cD];");
  m=p.matcher("11\u0001;22:;33\u0002;44p;55\u0003;66\u0004;");
  assertTrue(m.find());
  assertEquals("11",m.group(1));
  assertTrue(m.find());
  assertEquals("33",m.group(1));
  assertTrue(m.find());
  assertEquals("55",m.group(1));
  assertTrue(m.find());
  assertEquals("66",m.group(1));
  assertFalse(m.find());
  int i, j;
  for (i=0; i < 26; i++) {
    p=Pattern.compile("\\c" + Character.toString((char)('A' + i)));
    int match_char=-1;
    for (j=0; j < 255; j++) {
      m=p.matcher(Character.toString((char)j));
      if (m.matches()) {
        assertEquals(-1,match_char);
        match_char=j;
      }
    }
    assertTrue(match_char == i + 1);
  }
}
