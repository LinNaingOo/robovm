{
  String name=functionRef.getName().substring(1);
  GlobalRef ptrRef=new GlobalRef(name + "_ptr",functionRef.getType());
  Type[] parameterTypes=functionRef.getType().getParameterTypes();
  String[] parameterNames=new String[parameterTypes.length];
  parameterNames[0]=ENV.getName().substring(1);
  for (int i=1; i < parameterNames.length; i++) {
    parameterNames[i]="p" + i;
  }
  Function function=module.newFunction(linkonce_odr,new FunctionAttribute[]{noinline,optsize},name + (trampoline instanceof NativeCall ? "" : "_t"),functionRef.getType(),parameterNames);
  String runtimeClass=null;
  Variable targetI8Ptr=function.newVariable(I8_PTR);
  if (trampoline instanceof org.nullvm.compiler.trampoline.Invoke) {
    org.nullvm.compiler.trampoline.Invoke invoke=(org.nullvm.compiler.trampoline.Invoke)trampoline;
    FunctionRef resolveFunc=null;
    List<Value> args=new ArrayList<Value>();
    args.add(ENV);
    if (invoke instanceof Invokespecial) {
      resolveFunc=NVM_BC_RESOLVE_INVOKESPECIAL;
      runtimeClass=((Invokespecial)invoke).getRuntimeClass();
    }
 else     if (invoke instanceof Invokestatic) {
      resolveFunc=NVM_BC_RESOLVE_INVOKESTATIC;
    }
 else     if (invoke instanceof Invokevirtual) {
      resolveFunc=NVM_BC_RESOLVE_INVOKEVIRTUAL;
      runtimeClass=((Invokevirtual)invoke).getRuntimeClass();
    }
 else     if (invoke instanceof Invokeinterface) {
      resolveFunc=NVM_BC_RESOLVE_INVOKEINTERFACE;
    }
    args.add(getString(invoke.getTargetClass()));
    args.add(getString(invoke.getMethodName()));
    args.add(getString(invoke.getMethodDesc()));
    function.add(new Call(targetI8Ptr,resolveFunc,args.toArray(new Value[args.size()])));
  }
 else   if (trampoline instanceof NativeCall) {
    NativeCall nativeCall=(NativeCall)trampoline;
    function.add(new Call(targetI8Ptr,NVM_BC_RESOLVE_NATIVE,ENV,getString(nativeCall.getTargetClass()),getString(nativeCall.getMethodName()),getString(nativeCall.getMethodDesc()),getString(mangleNativeMethod(nativeCall.getTargetClass(),nativeCall.getMethodName())),getString(mangleNativeMethod(nativeCall.getTargetClass(),nativeCall.getMethodName(),nativeCall.getMethodDesc())),getCaller(function),new ConstantBitcast(ptrRef,I8_PTR)));
  }
 else   if (trampoline instanceof FieldAccessor) {
    FieldAccessor accessor=(FieldAccessor)trampoline;
    FunctionRef resolveFunc=null;
    List<Value> args=new ArrayList<Value>();
    args.add(ENV);
    if (accessor instanceof GetStatic) {
      resolveFunc=NVM_BC_RESOLVE_GETSTATIC;
    }
 else     if (accessor instanceof PutStatic) {
      resolveFunc=NVM_BC_RESOLVE_PUTSTATIC;
    }
 else     if (accessor instanceof GetField) {
      resolveFunc=NVM_BC_RESOLVE_GETFIELD;
      runtimeClass=((GetField)accessor).getRuntimeClass();
    }
 else     if (accessor instanceof PutField) {
      resolveFunc=NVM_BC_RESOLVE_PUTFIELD;
      runtimeClass=((PutField)accessor).getRuntimeClass();
    }
    args.add(getString(accessor.getTargetClass()));
    args.add(getString(accessor.getFieldName()));
    args.add(getString(accessor.getFieldDesc()));
    function.add(new Call(targetI8Ptr,resolveFunc,args.toArray(new Value[args.size()])));
  }
  Variable targetFuncPtr=function.newVariable(functionRef.getType());
  function.add(new Bitcast(targetFuncPtr,targetI8Ptr.ref(),functionRef.getType()));
  Value[] args=new Value[parameterTypes.length];
  for (int i=0; i < parameterTypes.length; i++) {
    args[i]=new VariableRef(parameterNames[i],parameterTypes[i]);
  }
  if (functionRef.getType().getReturnType() != VOID) {
    Variable result=function.newVariable(functionRef.getType().getReturnType());
    function.add(new Call(result,targetFuncPtr.ref(),args));
    function.add(new Ret(result.ref()));
  }
 else {
    function.add(new Call(targetFuncPtr.ref(),args));
    function.add(new Ret());
  }
  if (!(trampoline instanceof NativeCall)) {
    FunctionRef trampolineFuncRef=function.ref();
    function=module.newFunction(_private,new FunctionAttribute[]{noinline,optsize},name,functionRef.getType(),parameterNames);
    Variable reserved0Ptr=function.newVariable(I8_PTR_PTR);
    function.add(new Getelementptr(reserved0Ptr,ENV,0,4));
    function.add(new Store(new ConstantBitcast(ptrRef,I8_PTR),reserved0Ptr.ref()));
    Value caller=getCaller(function);
    Variable callerI8Ptr=function.newVariable(I8_PTR);
    function.add(new Bitcast(callerI8Ptr,caller,I8_PTR));
    Variable reserved1Ptr=function.newVariable(I8_PTR_PTR);
    function.add(new Getelementptr(reserved1Ptr,ENV,0,5));
    function.add(new Store(callerI8Ptr.ref(),reserved1Ptr.ref()));
    if (runtimeClass != null) {
      Variable reserved2Ptr=function.newVariable(I8_PTR_PTR);
      function.add(new Getelementptr(reserved2Ptr,ENV,0,6));
      function.add(new Store(getString(runtimeClass),reserved2Ptr.ref()));
    }
    if (functionRef.getType().getReturnType() != VOID) {
      Variable result=function.newVariable(functionRef.getType().getReturnType());
      function.add(new TailCall(result,trampolineFuncRef,args));
      function.add(new Ret(result.ref()));
    }
 else {
      function.add(new TailCall(trampolineFuncRef,args));
      function.add(new Ret());
    }
  }
  Global ptr=new Global(name + "_ptr",Linkage._private,function.ref());
  module.addGlobal(ptr);
}
