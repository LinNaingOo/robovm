{
  SootMethodRef methodRef=expr.getMethodRef();
  ArrayList<Value> args=new ArrayList<Value>();
  args.add(ENV);
  if (!(expr instanceof StaticInvokeExpr)) {
    Value base=immediate(ctx,(Immediate)((InstanceInvokeExpr)expr).getBase());
    checkNull(ctx,base);
    args.add(base);
  }
  int i=0;
  for (  soot.Value sootArg : (List<soot.Value>)expr.getArgs()) {
    Value arg=immediate(ctx,(Immediate)sootArg);
    args.add(narrowFromI32Value(ctx,getType(methodRef.parameterType(i)),arg));
    i++;
  }
  Value result=null;
  if (canCallDirectly(ctx,expr)) {
    Value function=null;
    if (resolveMethod(sootClass,methodRef).isSynchronized()) {
      function=new FunctionRef(mangleMethod(methodRef) + "_synchronized",getFunctionType(methodRef));
    }
 else {
      function=new FunctionRef(mangleMethod(methodRef),getFunctionType(methodRef));
    }
    result=callOrInvoke(ctx,function,args.toArray(new Value[0]));
  }
 else {
    Trampoline trampoline=null;
    String targetClassName=getInternalName(methodRef.declaringClass());
    String methodName=methodRef.name();
    String methodDesc=getDescriptor(methodRef);
    if (expr instanceof SpecialInvokeExpr) {
      soot.Type runtimeType=((SpecialInvokeExpr)expr).getBase().getType();
      String runtimeClassName=runtimeType == NullType.v() ? targetClassName : getInternalName(runtimeType);
      trampoline=new Invokespecial(runtimeClassName,targetClassName,methodName,methodDesc);
    }
 else     if (expr instanceof StaticInvokeExpr) {
      trampoline=new Invokestatic(targetClassName,methodName,methodDesc);
    }
 else     if (expr instanceof VirtualInvokeExpr) {
      soot.Type runtimeType=((VirtualInvokeExpr)expr).getBase().getType();
      String runtimeClassName=runtimeType == NullType.v() ? targetClassName : getInternalName(runtimeType);
      trampoline=new Invokevirtual(runtimeClassName,targetClassName,methodName,methodDesc);
    }
 else     if (expr instanceof InterfaceInvokeExpr) {
      trampoline=new Invokeinterface(targetClassName,methodName,methodDesc);
    }
    addTrampoline(trampoline,getFunctionType(methodRef));
    result=callOrInvokeTrampoline(ctx,trampoline,args.toArray(new Value[0]));
  }
  if (result != null) {
    return widenToI32Value(ctx,result,methodRef.returnType().equals(CharType.v()));
  }
 else {
    return null;
  }
}
