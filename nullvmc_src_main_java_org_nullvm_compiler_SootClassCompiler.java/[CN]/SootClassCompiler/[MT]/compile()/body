{
  module=new Module();
  throwables=new TreeMap<String,Global>();
  trampolines=new HashMap<Trampoline,FunctionRef>();
  strings=new HashMap<String,Global>();
  module.addInclude(getClass().getClassLoader().getResource("header.ll"));
  classFields=getClassFields(sootClass,false);
  instanceFields=getInstanceFields(sootClass,false);
  allInstanceFields=getInstanceFields(sootClass,true);
  List<Type> classFieldsTypes=new ArrayList<Type>();
  List<Type> instanceFieldsTypes=new ArrayList<Type>();
  for (  SootField field : sootClass.getFields()) {
    if (field.isStatic()) {
      classFieldsTypes.add(getType(field.getType()));
    }
 else {
      instanceFieldsTypes.add(getType(field.getType()));
    }
  }
  if (!classFieldsTypes.isEmpty()) {
    module.addType(new StructureType("ClassFields",classFieldsTypes.toArray(new Type[0])));
  }
  if (!instanceFieldsTypes.isEmpty()) {
    module.addType(new StructureType("InstanceFields",instanceFieldsTypes.toArray(new Type[0])));
  }
  for (  SootMethod method : sootClass.getMethods()) {
    if (isNative(method)) {
      nativeMethod(method);
    }
 else     if (!method.isAbstract()) {
      method(method);
    }
  }
  for (  FunctionRef ref : trampolines.values()) {
    trampoline(ref);
  }
  for (  Global global : throwables.values()) {
    module.addGlobal(global);
  }
  for (  Global global : strings.values()) {
    module.addGlobal(global);
  }
  return module;
}
