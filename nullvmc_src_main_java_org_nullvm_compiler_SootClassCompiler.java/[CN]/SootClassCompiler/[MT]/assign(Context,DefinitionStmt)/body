{
  soot.Value rightOp=stmt.getRightOp();
  Value result;
  if (rightOp instanceof Immediate) {
    Immediate immediate=(Immediate)rightOp;
    result=immediate(ctx,immediate);
  }
 else   if (rightOp instanceof ThisRef) {
    result=new VariableRef("this",OBJECT_PTR);
  }
 else   if (rightOp instanceof ParameterRef) {
    ParameterRef ref=(ParameterRef)rightOp;
    Value p=new VariableRef("p" + ref.getIndex(),getType(ref.getType()));
    result=widenToI32Value(ctx,p,isUnsigned(ref.getType()));
  }
 else   if (rightOp instanceof CaughtExceptionRef) {
    result=call(ctx,NVM_BC_EXCEPTION_CLEAR,ENV);
  }
 else   if (rightOp instanceof ArrayRef) {
    ArrayRef ref=(ArrayRef)rightOp;
    VariableRef base=(VariableRef)immediate(ctx,(Immediate)ref.getBase());
    Value index=immediate(ctx,(Immediate)ref.getIndex());
    checkNull(ctx,base);
    checkBounds(ctx,base,index);
    result=callOrInvoke(ctx,getArrayLoad(ref.getType()),base,index);
    result=widenToI32Value(ctx,result,isUnsigned(ref.getType()));
  }
 else   if (rightOp instanceof InstanceFieldRef) {
    InstanceFieldRef ref=(InstanceFieldRef)rightOp;
    Value base=immediate(ctx,(Immediate)ref.getBase());
    checkNull(ctx,base);
    if (canAccessDirectly(ctx,ref)) {
      Variable v=ctx.f().newVariable(getType(ref.getType()));
      ctx.f().add(new Load(v,getInstanceFieldPtr(ctx.f(),base,ref.getField())));
      result=widenToI32Value(ctx,v.ref(),isUnsigned(ref.getType()));
    }
 else {
      Trampoline trampoline=new GetField(getInternalName(ref.getFieldRef().declaringClass()),ref.getFieldRef().name(),getDescriptor(ref.getFieldRef().type()));
      addTrampoline(trampoline,new FunctionType(getType(ref.getType()),ENV_PTR,OBJECT_PTR));
      result=callOrInvokeTrampoline(ctx,trampoline,ENV,base);
      result=widenToI32Value(ctx,result,isUnsigned(ref.getType()));
    }
  }
 else   if (rightOp instanceof StaticFieldRef) {
    StaticFieldRef ref=(StaticFieldRef)rightOp;
    if (canAccessDirectly(ctx,ref)) {
      Variable v=ctx.f().newVariable(getType(ref.getType()));
      ctx.f().add(new Load(v,getClassFieldPtr(ctx.f(),ref.getField())));
      result=widenToI32Value(ctx,v.ref(),isUnsigned(ref.getType()));
    }
 else {
      Trampoline trampoline=new GetStatic(getInternalName(ref.getFieldRef().declaringClass()),ref.getFieldRef().name(),getDescriptor(ref.getFieldRef().type()));
      addTrampoline(trampoline,new FunctionType(getType(ref.getType()),ENV_PTR));
      result=callOrInvokeTrampoline(ctx,trampoline,ENV);
      result=widenToI32Value(ctx,result,isUnsigned(ref.getType()));
    }
  }
 else   if (rightOp instanceof Expr) {
    if (rightOp instanceof BinopExpr) {
      BinopExpr expr=(BinopExpr)rightOp;
      Type rightType=getLocalType(expr.getType());
      Variable resultVar=ctx.f().newVariable(rightType);
      result=resultVar.ref();
      Value op1=immediate(ctx,(Immediate)expr.getOp1());
      Value op2=immediate(ctx,(Immediate)expr.getOp2());
      if (rightOp instanceof AddExpr) {
        if (rightType instanceof IntegerType) {
          ctx.f().add(new Add(resultVar,op1,op2));
        }
 else {
          ctx.f().add(new Fadd(resultVar,op1,op2));
        }
      }
 else       if (rightOp instanceof AndExpr) {
        ctx.f().add(new And(resultVar,op1,op2));
      }
 else       if (rightOp instanceof CmpExpr) {
        Variable t1=ctx.f().newVariable(I1);
        Variable t2=ctx.f().newVariable(I1);
        Variable t3=ctx.f().newVariable(resultVar.getType());
        Variable t4=ctx.f().newVariable(resultVar.getType());
        ctx.f().add(new Icmp(t1,Condition.slt,op1,op2));
        ctx.f().add(new Icmp(t2,Condition.sgt,op1,op2));
        ctx.f().add(new Zext(t3,new VariableRef(t1),resultVar.getType()));
        ctx.f().add(new Zext(t4,new VariableRef(t2),resultVar.getType()));
        ctx.f().add(new Sub(resultVar,new VariableRef(t4),new VariableRef(t3)));
      }
 else       if (rightOp instanceof DivExpr) {
        if (rightType instanceof IntegerType) {
          FunctionRef f=rightType == I64 ? LDIV : IDIV;
          result=callOrInvoke(ctx,f,ENV,op1,op2);
        }
 else {
          ctx.f().add(new Fdiv(resultVar,op1,op2));
        }
      }
 else       if (rightOp instanceof MulExpr) {
        if (rightType instanceof IntegerType) {
          ctx.f().add(new Mul(resultVar,op1,op2));
        }
 else {
          ctx.f().add(new Fmul(resultVar,op1,op2));
        }
      }
 else       if (rightOp instanceof OrExpr) {
        ctx.f().add(new Or(resultVar,op1,op2));
      }
 else       if (rightOp instanceof RemExpr) {
        if (rightType instanceof IntegerType) {
          FunctionRef f=rightType == I64 ? LREM : IREM;
          result=callOrInvoke(ctx,f,ENV,op1,op2);
        }
 else {
          ctx.f().add(new Frem(resultVar,op1,op2));
        }
      }
 else       if (rightOp instanceof ShlExpr || rightOp instanceof ShrExpr || rightOp instanceof UshrExpr) {
        IntegerType type=(IntegerType)op1.getType();
        int bits=type.getBits();
        Variable t=ctx.f().newVariable(op2.getType());
        ctx.f().add(new And(t,op2,new IntegerConstant(bits - 1,(IntegerType)op2.getType())));
        Value shift=t.ref();
        if (((IntegerType)shift.getType()).getBits() < bits) {
          Variable tmp=ctx.f().newVariable(type);
          ctx.f().add(new Zext(tmp,shift,type));
          shift=tmp.ref();
        }
        if (rightOp instanceof ShlExpr) {
          ctx.f().add(new Shl(resultVar,op1,shift));
        }
 else         if (rightOp instanceof ShrExpr) {
          ctx.f().add(new Ashr(resultVar,op1,shift));
        }
 else {
          ctx.f().add(new Lshr(resultVar,op1,shift));
        }
      }
 else       if (rightOp instanceof SubExpr) {
        if (rightType instanceof IntegerType) {
          ctx.f().add(new Sub(resultVar,op1,op2));
        }
 else {
          ctx.f().add(new Fsub(resultVar,op1,op2));
        }
      }
 else       if (rightOp instanceof XorExpr) {
        ctx.f().add(new Xor(resultVar,op1,op2));
      }
 else       if (rightOp instanceof XorExpr) {
        ctx.f().add(new Xor(resultVar,op1,op2));
      }
 else       if (rightOp instanceof CmplExpr) {
        FunctionRef f=op1.getType() == FLOAT ? FCMPL : DCMPL;
        ctx.f().add(new Call(resultVar,f,op1,op2));
      }
 else       if (rightOp instanceof CmpgExpr) {
        FunctionRef f=op1.getType() == FLOAT ? FCMPG : DCMPG;
        ctx.f().add(new Call(resultVar,f,op1,op2));
      }
 else {
        throw new IllegalArgumentException("Unknown type for rightOp: " + rightOp.getClass());
      }
    }
 else     if (rightOp instanceof CastExpr) {
      Value op=immediate(ctx,(Immediate)((CastExpr)rightOp).getOp());
      soot.Type sootTargetType=((CastExpr)rightOp).getCastType();
      soot.Type sootSourceType=((CastExpr)rightOp).getOp().getType();
      if (sootTargetType instanceof PrimType) {
        Type targetType=getType(sootTargetType);
        Type sourceType=getType(sootSourceType);
        if (targetType instanceof IntegerType && sourceType instanceof IntegerType) {
          IntegerType toType=(IntegerType)targetType;
          IntegerType fromType=(IntegerType)op.getType();
          Variable v=ctx.f().newVariable(toType);
          if (fromType.getBits() < toType.getBits()) {
            if (isUnsigned(sootSourceType)) {
              ctx.f().add(new Zext(v,op,toType));
            }
 else {
              ctx.f().add(new Sext(v,op,toType));
            }
          }
 else           if (fromType.getBits() == toType.getBits()) {
            ctx.f().add(new Bitcast(v,op,toType));
          }
 else {
            ctx.f().add(new Trunc(v,op,toType));
          }
          result=widenToI32Value(ctx,v.ref(),isUnsigned(sootTargetType));
        }
 else         if (targetType instanceof FloatingPointType && sourceType instanceof IntegerType) {
          Variable v=ctx.f().newVariable(targetType);
          ctx.f().add(new Sitofp(v,op,targetType));
          result=v.ref();
        }
 else         if (targetType instanceof FloatingPointType && sourceType instanceof FloatingPointType) {
          Variable v=ctx.f().newVariable(targetType);
          if (targetType == FLOAT && sourceType == DOUBLE) {
            ctx.f().add(new Fptrunc(v,op,targetType));
          }
 else           if (targetType == DOUBLE && sourceType == FLOAT) {
            ctx.f().add(new Fpext(v,op,targetType));
          }
 else {
            ctx.f().add(new Bitcast(v,op,targetType));
          }
          result=v.ref();
        }
 else {
          FunctionRef f=null;
          if (targetType == I32 && sourceType == FLOAT) {
            f=F2I;
          }
 else           if (targetType == I64 && sourceType == FLOAT) {
            f=F2L;
          }
 else           if (targetType == I32 && sourceType == DOUBLE) {
            f=D2I;
          }
 else           if (targetType == I64 && sourceType == DOUBLE) {
            f=D2L;
          }
          Variable v=ctx.f().newVariable(targetType);
          ctx.f().add(new Call(v,f,op));
          result=v.ref();
        }
      }
 else {
        result=callOrInvoke(ctx,NVM_BC_CHECKCAST,ENV,op,getString(getInternalName(sootTargetType)),getCaller(ctx));
      }
    }
 else     if (rightOp instanceof InstanceOfExpr) {
      Value op=immediate(ctx,(Immediate)((InstanceOfExpr)rightOp).getOp());
      soot.Type checkType=((InstanceOfExpr)rightOp).getCheckType();
      result=callOrInvoke(ctx,NVM_BC_INSTANCEOF,ENV,op,getString(getInternalName(checkType)),getCaller(ctx));
    }
 else     if (rightOp instanceof NewExpr) {
      result=callOrInvoke(ctx,NVM_BC_NEW,ENV,getString(getInternalName(((NewExpr)rightOp).getBaseType())),getCaller(ctx));
    }
 else     if (rightOp instanceof NewArrayExpr) {
      NewArrayExpr expr=(NewArrayExpr)rightOp;
      Value size=immediate(ctx,(Immediate)expr.getSize());
      if (expr.getBaseType() instanceof PrimType) {
        result=callOrInvoke(ctx,getNewArray(expr.getBaseType()),ENV,size);
      }
 else {
        result=callOrInvoke(ctx,NVM_BC_NEW_OBJECT_ARRAY,ENV,size,getString(getInternalName(expr.getType())),getCaller(ctx));
      }
    }
 else     if (rightOp instanceof NewMultiArrayExpr) {
      NewMultiArrayExpr expr=(NewMultiArrayExpr)rightOp;
      for (int i=0; i < expr.getSizeCount(); i++) {
        Value size=immediate(ctx,(Immediate)expr.getSize(i));
        Variable ptr=ctx.f().newVariable(new PointerType(I32));
        ctx.f().add(new Getelementptr(ptr,dims.ref(),0,i));
        ctx.f().add(new Store(size,ptr.ref()));
      }
      Variable dimsI32=ctx.f().newVariable(new PointerType(I32));
      ctx.f().add(new Bitcast(dimsI32,dims.ref(),dimsI32.getType()));
      result=callOrInvoke(ctx,NVM_BC_NEW_MULTI_ARRAY,ENV,new IntegerConstant(expr.getSizeCount()),dimsI32.ref(),getString(getInternalName(expr.getType())),getCaller(ctx));
    }
 else     if (rightOp instanceof InvokeExpr) {
      result=invokeExpr(ctx,stmt,(InvokeExpr)rightOp);
    }
 else     if (rightOp instanceof LengthExpr) {
      Value op=immediate(ctx,(Immediate)((LengthExpr)rightOp).getOp());
      checkNull(ctx,op);
      Variable v=ctx.f().newVariable(I32);
      ctx.f().add(new Call(v,ARRAY_LENGTH,op));
      result=v.ref();
    }
 else     if (rightOp instanceof NegExpr) {
      NegExpr expr=(NegExpr)rightOp;
      Value op=immediate(ctx,(Immediate)expr.getOp());
      Type rightType=op.getType();
      Variable v=ctx.f().newVariable(op.getType());
      if (rightType instanceof IntegerType) {
        ctx.f().add(new Sub(v,new IntegerConstant(0,(IntegerType)rightType),op));
      }
 else {
        ctx.f().add(new Fmul(v,new FloatingPointConstant(-1.0,(FloatingPointType)rightType),op));
      }
      result=v.ref();
    }
 else {
      throw new IllegalArgumentException("Unknown type for rightOp: " + rightOp.getClass());
    }
  }
 else {
    throw new IllegalArgumentException("Unknown type for rightOp: " + rightOp.getClass());
  }
  soot.Value leftOp=stmt.getLeftOp();
  if (leftOp instanceof Local) {
    Local local=(Local)leftOp;
    VariableRef v=new VariableRef(local.getName(),new PointerType(getLocalType(leftOp.getType())));
    ctx.f().add(new Store(result,v));
  }
 else {
    Type leftType=getType(leftOp.getType());
    Value narrowedResult=narrowFromI32Value(ctx,leftType,result);
    if (leftOp instanceof ArrayRef) {
      ArrayRef ref=(ArrayRef)leftOp;
      VariableRef base=(VariableRef)immediate(ctx,(Immediate)ref.getBase());
      Value index=immediate(ctx,(Immediate)ref.getIndex());
      checkNull(ctx,base);
      checkBounds(ctx,base,index);
      callOrInvoke(ctx,getArrayStore(leftOp.getType()),base,index,narrowedResult);
    }
 else     if (leftOp instanceof InstanceFieldRef) {
      InstanceFieldRef ref=(InstanceFieldRef)leftOp;
      Value base=immediate(ctx,(Immediate)ref.getBase());
      checkNull(ctx,base);
      if (canAccessDirectly(ctx,ref)) {
        ctx.f().add(new Store(narrowedResult,getInstanceFieldPtr(ctx.f(),base,ref.getField())));
      }
 else {
        Trampoline trampoline=new PutField(getInternalName(ref.getFieldRef().declaringClass()),ref.getFieldRef().name(),getDescriptor(ref.getFieldRef().type()));
        addTrampoline(trampoline,new FunctionType(VOID,ENV_PTR,OBJECT_PTR,leftType));
        callOrInvokeTrampoline(ctx,trampoline,ENV,base,narrowedResult);
      }
    }
 else     if (leftOp instanceof StaticFieldRef) {
      StaticFieldRef ref=(StaticFieldRef)leftOp;
      if (canAccessDirectly(ctx,ref)) {
        ctx.f().add(new Store(narrowedResult,getClassFieldPtr(ctx.f(),ref.getField())));
      }
 else {
        Trampoline trampoline=new PutStatic(getInternalName(ref.getFieldRef().declaringClass()),ref.getFieldRef().name(),getDescriptor(ref.getFieldRef().type()));
        addTrampoline(trampoline,new FunctionType(VOID,ENV_PTR,leftType));
        callOrInvokeTrampoline(ctx,trampoline,ENV,narrowedResult);
      }
    }
 else {
      throw new IllegalArgumentException("Unknown type for leftOp: " + leftOp.getClass());
    }
  }
}
