{
  String name="MockWebServer-" + raw.getRemoteSocketAddress();
  executor.execute(namedRunnable(name,new Runnable(){
    int sequenceNumber=0;
    public void run(){
      try {
        processConnection();
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,"MockWebServer connection failed",e);
      }
    }
    public void processConnection() throws Exception {
      Socket socket;
      if (sslSocketFactory != null) {
        if (tunnelProxy) {
          createTunnel();
        }
        socket=sslSocketFactory.createSocket(raw,raw.getInetAddress().getHostAddress(),raw.getPort(),true);
        ((SSLSocket)socket).setUseClientMode(false);
        openClientSockets.add(socket);
        openClientSockets.remove(raw);
      }
 else {
        socket=raw;
      }
      InputStream in=new BufferedInputStream(socket.getInputStream());
      OutputStream out=new BufferedOutputStream(socket.getOutputStream());
      while (!responseQueue.isEmpty() && processOneRequest(in,out,socket)) {
      }
      if (sequenceNumber == 0) {
        logger.warning("MockWebServer connection didn't make a request");
      }
      in.close();
      out.close();
      socket.close();
      if (responseQueue.isEmpty()) {
        shutdown();
      }
      openClientSockets.remove(socket);
    }
    /** 
 * Respond to CONNECT requests until a SWITCH_TO_SSL_AT_END response
 * is dispatched.
 */
    private void createTunnel() throws IOException, InterruptedException {
      while (true) {
        MockResponse connect=responseQueue.peek();
        if (!processOneRequest(raw.getInputStream(),raw.getOutputStream(),raw)) {
          throw new IllegalStateException("Tunnel without any CONNECT!");
        }
        if (connect.getSocketPolicy() == SocketPolicy.UPGRADE_TO_SSL_AT_END) {
          return;
        }
      }
    }
    /** 
 * Reads a request and writes its response. Returns true if a request
 * was processed.
 */
    private boolean processOneRequest(    InputStream in,    OutputStream out,    Socket socket) throws IOException, InterruptedException {
      RecordedRequest request=readRequest(in,sequenceNumber);
      if (request == null) {
        return false;
      }
      MockResponse response=dispatch(request);
      writeResponse(out,response);
      if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AT_END) {
        in.close();
        out.close();
      }
 else       if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_INPUT_AT_END) {
        socket.shutdownInput();
      }
 else       if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_OUTPUT_AT_END) {
        socket.shutdownOutput();
      }
      sequenceNumber++;
      return true;
    }
  }
));
}
