{
  Locale lv=new Locale("lv");
  assertEquals("[d, M, y]",Arrays.toString(ICU.getDateFormatOrder(best(lv,"yyyy-M-dd"))));
  assertEquals("[y, d, M]",Arrays.toString(ICU.getDateFormatOrder(best(lv,"yyyy-MMM-dd"))));
  assertEquals("[d, M, \u0000]",Arrays.toString(ICU.getDateFormatOrder(best(lv,"MMM-dd"))));
  Locale fa=new Locale("fa");
  assertEquals("[y, M, d]",Arrays.toString(ICU.getDateFormatOrder(best(fa,"yyyy-M-dd"))));
  assertEquals("[d, M, y]",Arrays.toString(ICU.getDateFormatOrder(best(fa,"yyyy-MMM-dd"))));
  assertEquals("[d, M, \u0000]",Arrays.toString(ICU.getDateFormatOrder(best(fa,"MMM-dd"))));
  Locale en_US=Locale.US;
  assertEquals("[M, d, y]",Arrays.toString(ICU.getDateFormatOrder(best(en_US,"yyyy-M-dd"))));
  assertEquals("[M, d, y]",Arrays.toString(ICU.getDateFormatOrder(best(en_US,"yyyy-MMM-dd"))));
  assertEquals("[M, d, \u0000]",Arrays.toString(ICU.getDateFormatOrder(best(en_US,"MMM-dd"))));
  Locale en_GB=Locale.UK;
  assertEquals("[d, M, y]",Arrays.toString(ICU.getDateFormatOrder(best(en_GB,"yyyy-M-dd"))));
  assertEquals("[d, M, y]",Arrays.toString(ICU.getDateFormatOrder(best(en_GB,"yyyy-MMM-dd"))));
  assertEquals("[d, M, \u0000]",Arrays.toString(ICU.getDateFormatOrder(best(en_GB,"MMM-dd"))));
  assertEquals("[y, M, d]",Arrays.toString(ICU.getDateFormatOrder("yyyy - 'why' '' 'ddd' MMM-dd")));
  try {
    ICU.getDateFormatOrder("the quick brown fox jumped over the lazy dog");
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    ICU.getDateFormatOrder("'");
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    ICU.getDateFormatOrder("yyyy'");
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    ICU.getDateFormatOrder("yyyy'MMM");
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
}
