{
  int name=read2u();
  int length=read4();
  check_tag(name,CONSTANT_Utf8);
  if (equals_utf8(name,"Exceptions")) {
    int len=read2u();
    int[] indexes=new int[len];
    for (int i=0; i < len; i++)     indexes[i]=read2u();
    handleExceptionsAttribute(method_index,indexes);
  }
 else   if (equals_utf8(name,"Code")) {
    int start_off=pos();
    int max_stack=read2u();
    int max_locals=read2u();
    int code_length=read4();
    int code=pos();
    skip(code_length);
    int exception_table_length=read2u();
    handleCodeAttributeBegin(method_index,max_stack,max_locals,bytes,code,code_length,exception_table_length);
    for (int i=0; i < exception_table_length; i++) {
      int start_pc=read2u();
      int end_pc=read2u();
      int handler_pc=read2u();
      int catch_type=read2u();
      if (start_pc > end_pc || start_pc > code_length || end_pc > code_length || handler_pc > code_length)       throw new ClassFormatError();
      if (!(tags[catch_type] == CONSTANT_Class || tags[catch_type] == 0)) {
        throw new ClassFormatError("missing exception handler info");
      }
      handleExceptionTableEntry(method_index,i,start_pc,end_pc,handler_pc,catch_type);
    }
    int attributes_count=read2u();
    for (int i=0; i < attributes_count; i++) {
      read_one_code_attribute(method_index);
    }
    if ((pos() - start_off) != length)     throw new ClassFormatError();
  }
 else {
    int here=pos();
    check(length);
    handleUnknownAttribute(name,bytes,pos(),length);
    offset+=length;
  }
  return length + 6;
}
