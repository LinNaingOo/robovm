{
  WeightedDirectedSparseGraph ingraph=(WeightedDirectedSparseGraph)in;
  if (fieldin) {
    Stmt stmt=(Stmt)s;
    if (stmt.containsInvokeExpr()) {
      HashSet tokills=new HashSet();
      Value expr=stmt.getInvokeExpr();
      List parameters=((InvokeExpr)expr).getArgs();
      if (strictness == 0) {
        Hierarchy hierarchy=Scene.v().getActiveHierarchy();
        for (int i=0; i < parameters.size(); i++) {
          Value para=(Value)parameters.get(i);
          Type type=para.getType();
          if (type instanceof RefType) {
            SootClass pclass=((RefType)type).getSootClass();
            Iterator<Object> keyIt=localToFieldRef.keySet().iterator();
            while (keyIt.hasNext()) {
              Value local=(Value)keyIt.next();
              Type ltype=local.getType();
              SootClass lclass=((RefType)ltype).getSootClass();
              if (hierarchy.isClassSuperclassOfIncluding(pclass,lclass) || hierarchy.isClassSuperclassOfIncluding(lclass,pclass)) {
                HashSet toadd=localToFieldRef.get(local);
                tokills.addAll(toadd);
              }
            }
          }
        }
        if (expr instanceof InstanceInvokeExpr) {
          Value base=((InstanceInvokeExpr)expr).getBase();
          Type type=base.getType();
          if (type instanceof RefType) {
            SootClass pclass=((RefType)type).getSootClass();
            Iterator<Object> keyIt=localToFieldRef.keySet().iterator();
            while (keyIt.hasNext()) {
              Value local=(Value)keyIt.next();
              Type ltype=local.getType();
              SootClass lclass=((RefType)ltype).getSootClass();
              if (hierarchy.isClassSuperclassOfIncluding(pclass,lclass) || hierarchy.isClassSuperclassOfIncluding(lclass,pclass)) {
                HashSet toadd=localToFieldRef.get(local);
                tokills.addAll(toadd);
              }
            }
          }
        }
      }
 else       if (strictness == 1) {
        boolean killall=false;
        if (expr instanceof InstanceInvokeExpr)         killall=true;
 else {
          for (int i=0; i < parameters.size(); i++) {
            Value para=(Value)parameters.get(i);
            if (para.getType() instanceof RefType) {
              killall=true;
              break;
            }
          }
        }
        if (killall) {
          Iterator<Object> keyIt=localToFieldRef.keySet().iterator();
          while (keyIt.hasNext()) {
            HashSet toadd=localToFieldRef.get(keyIt.next());
            tokills.addAll(toadd);
          }
        }
      }
 else       if (strictness == 2) {
        HashSet vertexes=ingraph.getVertexes();
        Iterator nodeIt=vertexes.iterator();
        while (nodeIt.hasNext()) {
          Object node=nodeIt.next();
          if (node instanceof FieldRef)           ingraph.killNode(node);
        }
      }
    }
  }
  if (arrayin) {
    Stmt stmt=(Stmt)s;
    if (stmt.containsInvokeExpr()) {
      if (strictness == 2) {
        HashSet vertexes=ingraph.getVertexes();
        Iterator nodeIt=vertexes.iterator();
        while (nodeIt.hasNext()) {
          Object node=nodeIt.next();
          if (node instanceof ArrayRef)           ingraph.killNode(node);
        }
      }
    }
  }
  if (!(s instanceof AssignStmt))   return;
  Value leftOp=((AssignStmt)s).getLeftOp();
  Value rightOp=((AssignStmt)s).getRightOp();
  HashSet livelocals=(HashSet)ailanalysis.getFlowAfter(s);
  if (fieldin) {
    if (leftOp instanceof Local) {
      HashSet fieldrefs=localToFieldRef.get(leftOp);
      if (fieldrefs != null) {
        Iterator refsIt=fieldrefs.iterator();
        while (refsIt.hasNext()) {
          Object ref=refsIt.next();
          if (livelocals.contains(ref))           ingraph.killNode(ref);
        }
      }
    }
 else     if (leftOp instanceof InstanceFieldRef) {
      SootField field=((InstanceFieldRef)leftOp).getField();
      HashSet fieldrefs=fieldToFieldRef.get(field);
      if (fieldrefs != null) {
        Iterator refsIt=fieldrefs.iterator();
        while (refsIt.hasNext()) {
          Object ref=refsIt.next();
          if (livelocals.contains(ref))           ingraph.killNode(ref);
        }
      }
    }
  }
  if (arrayin) {
    if (leftOp instanceof Local) {
      HashSet vertexes=ingraph.getVertexes();
      Iterator nodeIt=vertexes.iterator();
      while (nodeIt.hasNext()) {
        Object node=nodeIt.next();
        if (node instanceof ArrayRef) {
          Value base=((ArrayRef)node).getBase();
          Value index=((ArrayRef)node).getIndex();
          if (base.equals(leftOp) || index.equals(leftOp))           ingraph.killNode(node);
        }
        if (rectarray) {
          if (node instanceof Array2ndDimensionSymbol) {
            Object base=((Array2ndDimensionSymbol)node).getVar();
            if (base.equals(leftOp))             ingraph.killNode(node);
          }
        }
      }
    }
 else     if (leftOp instanceof ArrayRef) {
      HashSet vertexes=ingraph.getVertexes();
{
        Iterator nodeIt=vertexes.iterator();
        while (nodeIt.hasNext()) {
          Object node=nodeIt.next();
          if (node instanceof ArrayRef)           ingraph.killNode(node);
        }
      }
    }
  }
  if (!livelocals.contains(leftOp) && !livelocals.contains(rightOp))   return;
  if (rightOp.equals(leftOp))   return;
  if (csin) {
    HashSet exprs=localToExpr.get(leftOp);
    if (exprs != null) {
      Iterator exprIt=exprs.iterator();
      while (exprIt.hasNext()) {
        ingraph.killNode(exprIt.next());
      }
    }
  }
  if (rightOp instanceof AddExpr) {
    Value op1=((AddExpr)rightOp).getOp1();
    Value op2=((AddExpr)rightOp).getOp2();
    if (op1 == leftOp && op2 instanceof IntConstant) {
      int inc_w=((IntConstant)op2).value;
      ingraph.updateWeight(leftOp,inc_w);
      return;
    }
 else     if (op2 == leftOp && op1 instanceof IntConstant) {
      int inc_w=((IntConstant)op1).value;
      ingraph.updateWeight(leftOp,inc_w);
      return;
    }
  }
  if (rightOp instanceof SubExpr) {
    Value op1=((SubExpr)rightOp).getOp1();
    Value op2=((SubExpr)rightOp).getOp2();
    if ((op1 == leftOp) && (op2 instanceof IntConstant)) {
      int inc_w=-((IntConstant)op2).value;
      ingraph.updateWeight(leftOp,inc_w);
      return;
    }
  }
  ingraph.killNode(leftOp);
  if (rightOp instanceof IntConstant) {
    int inc_w=((IntConstant)rightOp).value;
    ingraph.addMutualEdges(zero,leftOp,inc_w);
    return;
  }
  if (rightOp instanceof Local) {
    ingraph.addMutualEdges(rightOp,leftOp,0);
    return;
  }
  if (rightOp instanceof FieldRef) {
    if (fieldin) {
      ingraph.addMutualEdges(rightOp,leftOp,0);
    }
    if (classfieldin) {
      SootField field=((FieldRef)rightOp).getField();
      IntValueContainer flength=(IntValueContainer)cfield.getFieldInfo(field);
      if (flength != null) {
        if (flength.isInteger()) {
          ingraph.addMutualEdges(zero,leftOp,flength.getValue());
        }
      }
    }
    return;
  }
  if (arrayin) {
    if (rightOp instanceof ArrayRef) {
      ingraph.addMutualEdges(rightOp,leftOp,0);
      if (rectarray) {
        Value base=((ArrayRef)rightOp).getBase();
        if (rectarrayset.contains(base)) {
          ingraph.addMutualEdges(leftOp,Array2ndDimensionSymbol.v(base),0);
        }
      }
      return;
    }
  }
  if (csin) {
    Value rhs=rightOp;
    if (rhs instanceof BinopExpr) {
      Value op1=((BinopExpr)rhs).getOp1();
      Value op2=((BinopExpr)rhs).getOp2();
      if (rhs instanceof AddExpr) {
        if ((op1 instanceof Local) && (op2 instanceof Local)) {
          ingraph.addMutualEdges(rhs,leftOp,0);
          return;
        }
      }
 else       if (rhs instanceof MulExpr) {
        if ((op1 instanceof Local) || (op2 instanceof Local)) {
          ingraph.addMutualEdges(rhs,leftOp,0);
          return;
        }
      }
 else       if (rhs instanceof SubExpr) {
        if (op2 instanceof Local) {
          ingraph.addMutualEdges(rhs,leftOp,0);
          return;
        }
      }
    }
  }
  if (rightOp instanceof AddExpr) {
    Value op1=((AddExpr)rightOp).getOp1();
    Value op2=((AddExpr)rightOp).getOp2();
    if ((op1 instanceof Local) && (op2 instanceof IntConstant)) {
      int inc_w=((IntConstant)op2).value;
      ingraph.addMutualEdges(op1,leftOp,inc_w);
      return;
    }
    if ((op2 instanceof Local) && (op1 instanceof IntConstant)) {
      int inc_w=((IntConstant)op1).value;
      ingraph.addMutualEdges(op2,leftOp,inc_w);
      return;
    }
  }
  if (rightOp instanceof SubExpr) {
    Value op1=((SubExpr)rightOp).getOp1();
    Value op2=((SubExpr)rightOp).getOp2();
    if ((op1 instanceof Local) && (op2 instanceof IntConstant)) {
      int inc_w=-((IntConstant)op2).value;
      ingraph.addMutualEdges(op1,leftOp,inc_w);
      return;
    }
  }
  if (rightOp instanceof NewArrayExpr) {
    Value size=((NewArrayExpr)rightOp).getSize();
    if (size instanceof Local) {
      ingraph.addMutualEdges(size,leftOp,0);
      return;
    }
    if (size instanceof IntConstant) {
      int inc_w=((IntConstant)size).value;
      ingraph.addMutualEdges(zero,leftOp,inc_w);
      return;
    }
  }
  if (rightOp instanceof NewMultiArrayExpr) {
    Value size=((NewMultiArrayExpr)rightOp).getSize(0);
    if (size instanceof Local) {
      ingraph.addMutualEdges(size,leftOp,0);
    }
 else     if (size instanceof IntConstant) {
      int inc_w=((IntConstant)size).value;
      ingraph.addMutualEdges(zero,leftOp,inc_w);
    }
    if (arrayin && rectarray) {
      if (((NewMultiArrayExpr)rightOp).getSizeCount() > 1) {
        size=((NewMultiArrayExpr)rightOp).getSize(1);
        if (size instanceof Local) {
          ingraph.addMutualEdges(size,Array2ndDimensionSymbol.v(leftOp),0);
        }
 else         if (size instanceof IntConstant) {
          int inc_w=((IntConstant)size).value;
          ingraph.addMutualEdges(zero,Array2ndDimensionSymbol.v(leftOp),inc_w);
        }
      }
    }
    return;
  }
  if (rightOp instanceof LengthExpr) {
    Value base=((LengthExpr)rightOp).getOp();
    ingraph.addMutualEdges(base,leftOp,0);
    return;
  }
}
