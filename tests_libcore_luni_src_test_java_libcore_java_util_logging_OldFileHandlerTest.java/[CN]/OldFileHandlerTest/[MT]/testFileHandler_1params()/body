{
  handler=new FileHandler("%t/log/string");
  assertEquals("character encoding is non equal to actual value","iso-8859-1",handler.getEncoding());
  assertNotNull("Filter is null",handler.getFilter());
  assertNotNull("Formatter is null",handler.getFormatter());
  assertEquals("is non equal to actual value",Level.FINE,handler.getLevel());
  assertNotNull("ErrorManager is null",handler.getErrorManager());
  handler.publish(r);
  handler.close();
  for (int i=0; i < 3; i++) {
    handler=new FileHandler("%t/log/string");
    handler.publish(r);
    handler.close();
  }
  assertFileContent(TEMPPATH + SEP + "log","/string",new LogRecord[]{r,null,r,null,r,null,r},new MockFormatter());
  FileHandler h=new FileHandler("%t/log/string");
  FileHandler h2=new FileHandler("%t/log/string");
  FileHandler h3=new FileHandler("%t/log/string");
  FileHandler h4=new FileHandler("%t/log/string");
  h.publish(r);
  h2.publish(r);
  h3.publish(r);
  h4.publish(r);
  h.close();
  h2.close();
  h3.close();
  h4.close();
  assertFileContent(TEMPPATH + SEP + "log","string",h.getFormatter());
  assertFileContent(TEMPPATH + SEP + "log","string.1",h.getFormatter());
  assertFileContent(TEMPPATH + SEP + "log","string.2",h.getFormatter());
  assertFileContent(TEMPPATH + SEP + "log","string.3",h.getFormatter());
  FileHandler h6=new FileHandler("%t/log/string%u.log");
  h6.publish(r);
  h6.close();
  FileHandler h7=new FileHandler("%t/log/string%u.log");
  h7.publish(r);
  h7.close();
  try {
    assertFileContent(TEMPPATH + SEP + "log","string0.log",h.getFormatter());
    fail("should assertion failed");
  }
 catch (  Error e) {
  }
  File file=new File(TEMPPATH + SEP + "log");
  assertTrue("length list of file is incorrect",file.list().length <= 2);
  FileHandler h8=new FileHandler("%t/log/%ustring%u.log");
  h8.publish(r);
  FileHandler h9=new FileHandler("%t/log/%ustring%u.log");
  h9.publish(r);
  h9.close();
  h8.close();
  assertFileContent(TEMPPATH + SEP + "log","0string0.log",h.getFormatter());
  assertFileContent(TEMPPATH + SEP + "log","1string1.log",h.getFormatter());
  file=new File(TEMPPATH + SEP + "log");
  assertTrue("length list of file is incorrect",file.list().length <= 2);
  try {
    new FileHandler("");
    fail("IllegalArgumentException expected");
  }
 catch (  IllegalArgumentException e) {
  }
}
