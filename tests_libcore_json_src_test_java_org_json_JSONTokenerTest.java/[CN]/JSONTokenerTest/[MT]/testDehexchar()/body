{
  assertEquals(0,JSONTokener.dehexchar('0'));
  assertEquals(1,JSONTokener.dehexchar('1'));
  assertEquals(2,JSONTokener.dehexchar('2'));
  assertEquals(3,JSONTokener.dehexchar('3'));
  assertEquals(4,JSONTokener.dehexchar('4'));
  assertEquals(5,JSONTokener.dehexchar('5'));
  assertEquals(6,JSONTokener.dehexchar('6'));
  assertEquals(7,JSONTokener.dehexchar('7'));
  assertEquals(8,JSONTokener.dehexchar('8'));
  assertEquals(9,JSONTokener.dehexchar('9'));
  assertEquals(10,JSONTokener.dehexchar('A'));
  assertEquals(11,JSONTokener.dehexchar('B'));
  assertEquals(12,JSONTokener.dehexchar('C'));
  assertEquals(13,JSONTokener.dehexchar('D'));
  assertEquals(14,JSONTokener.dehexchar('E'));
  assertEquals(15,JSONTokener.dehexchar('F'));
  assertEquals(10,JSONTokener.dehexchar('a'));
  assertEquals(11,JSONTokener.dehexchar('b'));
  assertEquals(12,JSONTokener.dehexchar('c'));
  assertEquals(13,JSONTokener.dehexchar('d'));
  assertEquals(14,JSONTokener.dehexchar('e'));
  assertEquals(15,JSONTokener.dehexchar('f'));
  for (int c=0; c <= 0xFFFF; c++) {
    if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) {
      continue;
    }
    assertEquals("dehexchar " + c,-1,JSONTokener.dehexchar((char)c));
  }
}
