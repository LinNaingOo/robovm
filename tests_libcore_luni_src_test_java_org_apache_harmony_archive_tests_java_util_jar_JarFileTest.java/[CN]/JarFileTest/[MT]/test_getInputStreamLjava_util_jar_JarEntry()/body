{
  File localFile=null;
  try {
    Support_Resources.copyFile(resources,null,jarName);
    localFile=new File(resources,jarName);
  }
 catch (  Exception e) {
    fail("Failed to create local file: " + e);
  }
  byte[] b=new byte[1024];
  try {
    JarFile jf=new JarFile(localFile);
    java.io.InputStream is=jf.getInputStream(jf.getEntry(entryName));
    assertTrue("Returned invalid stream",is.available() > 0);
    int r=is.read(b,0,1024);
    is.close();
    StringBuffer sb=new StringBuffer(r);
    for (int i=0; i < r; i++) {
      sb.append((char)(b[i] & 0xff));
    }
    String contents=sb.toString();
    assertTrue("Incorrect stream read",contents.indexOf("bar") > 0);
    jf.close();
  }
 catch (  Exception e) {
    fail("Exception during test: " + e.toString());
  }
  try {
    JarFile jf=new JarFile(localFile);
    InputStream in=jf.getInputStream(new JarEntry("invalid"));
    assertNull("Got stream for non-existent entry",in);
  }
 catch (  Exception e) {
    fail("Exception during test 2: " + e);
  }
  try {
    Support_Resources.copyFile(resources,null,jarName);
    File signedFile=new File(resources,jarName);
    JarFile jf=new JarFile(signedFile);
    JarEntry jre=new JarEntry("foo/bar/A.class");
    jf.getInputStream(jre);
  }
 catch (  ZipException ee) {
  }
  try {
    Support_Resources.copyFile(resources,null,jarName);
    File signedFile=new File(resources,jarName);
    JarFile jf=new JarFile(signedFile);
    JarEntry jre=new JarEntry("foo/bar/A.class");
    jf.close();
    jf.getInputStream(jre);
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException ee) {
  }
}
