{
  Support_Resources.copyFile(resources,null,jarName);
  JarFile jarFile=new JarFile(new File(resources,jarName));
  assertEquals("Error in returned entry",311,jarFile.getEntry(entryName).getSize());
  jarFile.close();
  String jarDirUrl=Support_Resources.getResourceURL("/../internalres/signedjars");
  Vector<String> signedJars=new Vector<String>();
  try {
    InputStream is=new URL(jarDirUrl + "/jarlist.txt").openStream();
    while (is.available() > 0) {
      StringBuilder linebuff=new StringBuilder(80);
      done:       while (true) {
        int nextByte=is.read();
switch (nextByte) {
case -1:
          break done;
case (byte)'\r':
        if (linebuff.length() == 0) {
        }
      break done;
case (byte)'\n':
    if (linebuff.length() == 0) {
    }
  break done;
default :
linebuff.append((char)nextByte);
}
}
if (linebuff.length() == 0) {
break;
}
String line=linebuff.toString();
signedJars.add(line);
}
is.close();
}
 catch (IOException e) {
}
for (int i=0; i < signedJars.size(); i++) {
String jarName=signedJars.get(i);
try {
File file=Support_Resources.getExternalLocalFile(jarDirUrl + "/" + jarName);
jarFile=new JarFile(file,true);
boolean foundCerts=false;
Enumeration<JarEntry> e=jarFile.entries();
while (e.hasMoreElements()) {
JarEntry entry=e.nextElement();
InputStream is=jarFile.getInputStream(entry);
is.skip(100000);
is.close();
Certificate[] certs=entry.getCertificates();
if (certs != null && certs.length > 0) {
foundCerts=true;
break;
}
}
assertTrue("No certificates found during signed jar test for jar \"" + jarName + "\"",foundCerts);
}
 catch (IOException e) {
fail("Exception during signed jar test for jar \"" + jarName + "\": "+ e.toString());
}
}
}
