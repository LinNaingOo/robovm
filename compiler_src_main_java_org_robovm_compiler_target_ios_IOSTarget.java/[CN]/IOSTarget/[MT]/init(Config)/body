{
  super.init(config);
  if (config.getArch() == null) {
    arch=Arch.thumbv7;
  }
 else {
    if (config.getArch() != Arch.x86 && config.getArch() != Arch.thumbv7) {
      throw new IllegalArgumentException("Arch '" + config.getArch() + "' is unsupported for iOS target");
    }
    arch=config.getArch();
  }
  signIdentity=config.getIosSignIdentity();
  if (signIdentity == null) {
    signIdentity="iPhone Developer";
  }
  infoPList=config.getIosInfoPList();
  if (infoPList != null) {
    try {
      infoPListDict=(NSDictionary)parsePropertyList(infoPList,new Properties());
    }
 catch (    Throwable t) {
      throw new IllegalArgumentException(t);
    }
  }
  String sdkVersion=config.getIosSdkVersion();
  List<SDK> sdks=getSDKs();
  if (sdkVersion == null) {
    Collections.sort(sdks);
    this.sdk=sdks.get(sdks.size() - 1);
  }
 else {
    for (    SDK sdk : sdks) {
      if (sdk.getVersion().equals(sdkVersion)) {
        this.sdk=sdk;
        break;
      }
    }
    if (sdk == null) {
      throw new IllegalArgumentException("No SDK found matching version string " + sdkVersion);
    }
  }
}
