{
  NSDictionary dict=new NSDictionary();
  if (config.getIosInfoPList() != null && config.getIosInfoPList().getDictionary() != null) {
    NSDictionary infoPListDict=config.getIosInfoPList().getDictionary();
    for (    String key : infoPListDict.allKeys()) {
      dict.put(key,infoPListDict.objectForKey(key));
    }
  }
 else {
    dict.put("CFBundleVersion","1.0");
    dict.put("CFBundleExecutable",config.getExecutableName());
    dict.put("CFBundleName",config.getExecutableName());
    dict.put("CFBundleIdentifier",getBundleId());
    dict.put("CFBundlePackageType","APPL");
    dict.put("LSRequiresIPhoneOS",true);
    NSObject supportedDeviceFamilies=sdk.getDefaultProperty("SUPPORTED_DEVICE_FAMILIES");
    if (supportedDeviceFamilies != null) {
      NSArray families=null;
      if (supportedDeviceFamilies instanceof NSString) {
        NSString defFamilies=(NSString)supportedDeviceFamilies;
        String[] parts=defFamilies.toString().split(",");
        families=new NSArray(parts.length);
        for (int i=0; i < families.count(); i++) {
          families.setValue(i,new NSNumber(parts[i].trim()));
        }
      }
 else {
        NSArray defFamilies=(NSArray)supportedDeviceFamilies;
        families=new NSArray(defFamilies.count());
        for (int i=0; i < families.count(); i++) {
          families.setValue(i,new NSNumber(defFamilies.objectAtIndex(i).toString()));
        }
      }
      dict.put("UIDeviceFamily",families);
    }
    dict.put("UISupportedInterfaceOrientations",new NSArray(new NSString("UIInterfaceOrientationPortrait"),new NSString("UIInterfaceOrientationLandscapeLeft"),new NSString("UIInterfaceOrientationLandscapeRight"),new NSString("UIInterfaceOrientationPortraitUpsideDown")));
    dict.put("UISupportedInterfaceOrientations~ipad",new NSArray(new NSString("UIInterfaceOrientationPortrait"),new NSString("UIInterfaceOrientationLandscapeLeft"),new NSString("UIInterfaceOrientationLandscapeRight"),new NSString("UIInterfaceOrientationPortraitUpsideDown")));
    dict.put("UIRequiredDeviceCapabilities",new NSArray(new NSString("armv7")));
  }
  dict.put("DTPlatformName",sdk.getPlatformName());
  dict.put("DTSDKName",sdk.getCanonicalName());
  for (  File f : FileUtils.listFiles(partialPListDir,new String[]{"plist"},false)) {
    try {
      NSDictionary d=(NSDictionary)PropertyListParser.parse(f);
      dict.putAll(d);
    }
 catch (    Exception e) {
      throw new CompilerException(e);
    }
  }
  if (dict.objectForKey("MinimumOSVersion") == null) {
    dict.put("MinimumOSVersion","6.0");
  }
  customizeInfoPList(dict);
  NSDictionary newDict=new NSDictionary();
  if (dict.objectForKey("CFBundleShortVersionString") != null) {
    newDict.put("CFBundleShortVersionString",dict.objectForKey("CFBundleShortVersionString"));
    dict.remove("CFBundleShortVersionString");
  }
  if (dict.objectForKey("CFBundleVersion") != null) {
    newDict.put("CFBundleVersion",dict.objectForKey("CFBundleVersion"));
    dict.remove("CFBundleVersion");
  }
  for (  String key : dict.allKeys()) {
    newDict.put(key,dict.objectForKey(key));
  }
  File tmpInfoPlist=new File(config.getTmpDir(),"Info.plist");
  PropertyListParser.saveAsBinary(newDict,tmpInfoPlist);
  config.getLogger().info("Installing Info.plist to %s",dir);
  FileUtils.copyFile(tmpInfoPlist,new File(dir,tmpInfoPlist.getName()));
}
