{
  if (TypeResolver.typesEqual(a,b))   return new SingletonList<Type>(a);
 else   if (a instanceof BottomType)   return new SingletonList<Type>(b);
 else   if (b instanceof BottomType)   return new SingletonList<Type>(a);
 else   if (a instanceof IntegerType && b instanceof IntegerType)   return new SingletonList<Type>(IntType.v());
 else   if (a instanceof PrimType || b instanceof PrimType)   return new EmptyList<Type>();
 else   if (a instanceof NullType)   return new SingletonList<Type>(b);
 else   if (b instanceof NullType)   return new SingletonList<Type>(a);
 else   if (a instanceof ArrayType && b instanceof ArrayType) {
    Type eta=((ArrayType)a).getElementType(), etb=((ArrayType)b).getElementType();
    Collection<Type> ts;
    if (eta instanceof PrimType || eta instanceof PrimType)     ts=new EmptyList<Type>();
 else     ts=lcas_(eta,etb);
    LinkedList<Type> r=new LinkedList<Type>();
    if (ts.isEmpty()) {
      r.add(RefType.v("java.io.Serializable"));
      r.add(RefType.v("java.lang.Cloneable"));
    }
 else     for (    Type t : ts)     r.add(t.makeArrayType());
    return r;
  }
 else   if (a instanceof ArrayType || b instanceof ArrayType) {
    Type rt;
    if (a instanceof ArrayType)     rt=b;
 else     rt=a;
    LinkedList<Type> r=new LinkedList<Type>();
    if (ancestor_(RefType.v("java.io.Serializable"),rt))     r.add(RefType.v("java.io.Serializable"));
    if (ancestor_(RefType.v("java.lang.Cloneable"),rt))     r.add(RefType.v("java.lang.Cloneable"));
    if (r.isEmpty())     r.add(RefType.v("java.lang.Object"));
    return r;
  }
 else {
    Collection<AncestryTreeNode> treea=buildAncestryTree((RefType)a), treeb=buildAncestryTree((RefType)b);
    LinkedList<Type> r=new LinkedList<Type>();
    for (    AncestryTreeNode nodea : treea)     for (    AncestryTreeNode nodeb : treeb) {
      RefType t=leastCommonNode(nodea,nodeb);
      boolean least=true;
      for (ListIterator i=r.listIterator(); i.hasNext(); ) {
        Type t_=(Type)i.next();
        if (ancestor_(t,t_)) {
          least=false;
          break;
        }
        if (ancestor_(t_,t))         i.remove();
      }
      if (least)       r.add(t);
    }
    if (r.isEmpty())     r.add(RefType.v("java.lang.Object"));
    return r;
  }
}
