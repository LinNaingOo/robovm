{
  LinkedList<AncestryTreeNode> leafs=new LinkedList<AncestryTreeNode>();
  leafs.add(new AncestryTreeNode(null,root));
  LinkedList<AncestryTreeNode> r=new LinkedList<AncestryTreeNode>();
  while (!leafs.isEmpty()) {
    AncestryTreeNode node=leafs.remove();
    if (TypeResolver.typesEqual(node.type,RefType.v("java.lang.Object")))     r.add(node);
 else {
      SootClass sc=node.type.getSootClass();
      for (Iterator i=sc.getInterfaces().iterator(); i.hasNext(); )       leafs.add(new AncestryTreeNode(node,((SootClass)i.next()).getType()));
      if ((!sc.isInterface() || sc.getInterfaceCount() == 0) && !sc.isPhantom())       leafs.add(new AncestryTreeNode(node,sc.getSuperclass().getType()));
    }
  }
  return r;
}
