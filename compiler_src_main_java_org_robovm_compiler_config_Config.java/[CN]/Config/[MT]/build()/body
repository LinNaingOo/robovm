{
  if (home == null) {
    home=Home.find();
  }
  if (bootclasspath == null) {
    bootclasspath=new ArrayList<File>();
  }
  if (classpath == null) {
    classpath=new ArrayList<File>();
  }
  if (mainJar != null) {
    mainClass=getMainClass(mainJar);
    classpath.add(mainJar);
  }
  if (!skipLinking && executableName == null && mainClass == null) {
    throw new IllegalArgumentException("No target and no main class specified");
  }
  if (!skipLinking && classpath.isEmpty()) {
    throw new IllegalArgumentException("No classpath specified");
  }
  if (skipLinking) {
    skipInstall=true;
  }
  if (executableName == null) {
    executableName=mainClass;
  }
  List<File> realBootclasspath=bootclasspath == null ? new ArrayList<File>() : bootclasspath;
  if (!isSkipRuntimeLib()) {
    realBootclasspath=new ArrayList<File>(bootclasspath);
    realBootclasspath.add(0,home.rtPath);
  }
  this.vtableCache=new VTable.Cache();
  this.itableCache=new ITable.Cache();
  this.marshalerLookup=new MarshalerLookup(this);
  if (!skipInstall) {
    if (installDir == null) {
      installDir=new File(".",executableName);
    }
    installDir.mkdirs();
  }
  if (targetType == TargetType.console) {
    target=new ConsoleTarget();
  }
 else   if (targetType == TargetType.ios) {
    target=new IOSTarget();
  }
 else {
    if (os == OS.ios) {
      target=new IOSTarget();
    }
 else {
      target=new ConsoleTarget();
    }
  }
  target.init(this);
  os=target.getOs();
  arch=target.getArch();
  dataLayout=new DataLayout(getTriple());
  osArchDepLibDir=new File(new File(home.libVmDir,os.toString()),arch.toString());
  File osDir=new File(cacheDir,os.toString());
  File archDir=new File(osDir,arch.toString());
  osArchCacheDir=new File(archDir,debug ? "debug" : "release");
  osArchCacheDir.mkdirs();
  this.clazzes=new Clazzes(this,realBootclasspath,classpath);
  mergeConfigsFromClasspath();
  return this;
}
