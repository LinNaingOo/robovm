{
  String methodName=m.method.getName();
  Class[] params=m.method.getParameterTypes();
  int paramLengths=params.length;
  writeLdcWithClass(m.getDeclaringClass().getName());
  writeLdc(methodName);
  writeIntConstant(paramLengths);
  writeUnsignedByte(OPC_anewarray);
  writeUnsignedShort(constantPool.typeIndex("java/lang/Class"));
  for (int i=0; i < paramLengths; i++) {
    writeUnsignedByte(OPC_dup);
    writeIntConstant(i);
    if (params[i].isPrimitive()) {
      writeUnsignedByte(OPC_getstatic);
      writeUnsignedShort(constantPool.literalIndex(typeWrapperName(params[i]),"TYPE",Class.class));
    }
 else {
      writeLdcWithClass(params[i].getName());
    }
    writeUnsignedByte(OPC_aastore);
  }
  if (ClassGetMethod == null) {
    try {
      ClassGetMethod=Class.class.getMethod("getMethod",new Class[]{String.class,Class[].class});
    }
 catch (    NoSuchMethodException e) {
      throw new InternalError();
    }
  }
  writeUnsignedByte(OPC_invokevirtual);
  writeUnsignedShort(constantPool.literalIndex(ClassGetMethod));
  writeUnsignedByte(OPC_putstatic);
  writeUnsignedShort(constantPool.literalIndex(typeName,getFieldNamebyMethodName(methodName,index),Method.class));
}
