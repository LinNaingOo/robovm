{
  super();
  this.typeName=typeName;
  header=new byte[INITIAL_HEADER_SIZE];
  header[headerOffset++]=(byte)(0xCAFEBABEL >> 24);
  header[headerOffset++]=(byte)(0xCAFEBABEL >> 16);
  header[headerOffset++]=(byte)(0xCAFEBABEL >> 8);
  header[headerOffset++]=(byte)(0xCAFEBABEL >> 0);
  header[headerOffset++]=0;
  header[headerOffset++]=0;
  header[headerOffset++]=0;
  header[headerOffset++]=49;
  constantPoolOffset=headerOffset;
  headerOffset+=2;
  constantPool=new ProxyConstantPool(this);
  contents=new byte[INITIAL_CONTENTS_SIZE];
  int accessFlags=AccPublic | AccFinal | AccSuper;
  contents[contentsOffset++]=(byte)(accessFlags >> 8);
  contents[contentsOffset++]=(byte)accessFlags;
  int classNameIndex=constantPool.typeIndex(typeName);
  contents[contentsOffset++]=(byte)(classNameIndex >> 8);
  contents[contentsOffset++]=(byte)classNameIndex;
  int superclassNameIndex=constantPool.typeIndex("java/lang/reflect/Proxy");
  contents[contentsOffset++]=(byte)(superclassNameIndex >> 8);
  contents[contentsOffset++]=(byte)superclassNameIndex;
  int interfacesCount=interfaces.length;
  contents[contentsOffset++]=(byte)(interfacesCount >> 8);
  contents[contentsOffset++]=(byte)interfacesCount;
  for (int i=0; i < interfacesCount; i++) {
    int interfaceIndex=constantPool.typeIndex(interfaces[i].getName());
    contents[contentsOffset++]=(byte)(interfaceIndex >> 8);
    contents[contentsOffset++]=(byte)interfaceIndex;
  }
}
