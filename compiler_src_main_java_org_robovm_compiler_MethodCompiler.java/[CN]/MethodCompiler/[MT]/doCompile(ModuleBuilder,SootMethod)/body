{
  function=FunctionBuilder.method(method);
  trapsAt=new HashMap<Unit,List<Trap>>();
  moduleBuilder.addFunction(function);
  env=function.getParameterRef(0);
  Body body=method.retrieveActiveBody();
  PackManager.v().getPack("jtp").apply(body);
  PackManager.v().getPack("jop").apply(body);
  PackManager.v().getPack("jap").apply(body);
  PatchingChain<Unit> units=body.getUnits();
  Map<Unit,List<Unit>> branchTargets=getBranchTargets(body);
  Map<Unit,Integer> trapHandlers=getTrapHandlers(body);
  Map<Unit,Integer> selChanges=new HashMap<Unit,Integer>();
  int multiANewArrayMaxDims=0;
  Set<Local> locals=new HashSet<Local>();
  boolean emitCheckStackOverflow=false;
  for (  Unit unit : units) {
    if (unit instanceof DefinitionStmt) {
      DefinitionStmt stmt=(DefinitionStmt)unit;
      if (stmt.getLeftOp() instanceof Local) {
        Local local=(Local)stmt.getLeftOp();
        if (!locals.contains(local)) {
          Type type=getLocalType(local.getType());
          function.add(new Alloca(function.newVariable(local.getName(),type),type));
          locals.add(local);
        }
      }
      if (stmt.getRightOp() instanceof NewMultiArrayExpr) {
        NewMultiArrayExpr expr=(NewMultiArrayExpr)stmt.getRightOp();
        multiANewArrayMaxDims=Math.max(multiANewArrayMaxDims,expr.getSizeCount());
      }
      if (stmt.getRightOp() instanceof InvokeExpr) {
        emitCheckStackOverflow=true;
      }
    }
    if (unit instanceof InvokeStmt) {
      emitCheckStackOverflow=true;
    }
  }
  dims=null;
  if (multiANewArrayMaxDims > 0) {
    dims=function.newVariable("dims",new PointerType(new ArrayType(multiANewArrayMaxDims,I32)));
    function.add(new Alloca(dims,new ArrayType(multiANewArrayMaxDims,I32)));
  }
  if (emitCheckStackOverflow) {
    call(CHECK_STACK_OVERFLOW);
  }
  Value trycatchContext=null;
  if (!body.getTraps().isEmpty()) {
    List<List<Trap>> recordedTraps=new ArrayList<List<Trap>>();
    for (    Unit unit : units) {
      Set<Unit> incoming=new HashSet<Unit>();
      if (units.getFirst() != unit && units.getPredOf(unit).fallsThrough()) {
        incoming.add(units.getPredOf(unit));
      }
      if (branchTargets.keySet().contains(unit)) {
        incoming.addAll(branchTargets.get(unit));
      }
      if (unit == units.getFirst() || trapHandlers.containsKey(unit) || trapsDiffer(unit,incoming)) {
        List<Trap> traps=getTrapsAt(unit);
        if (traps.isEmpty()) {
          selChanges.put(unit,0);
        }
 else {
          int index=recordedTraps.indexOf(traps);
          if (index == -1) {
            index=recordedTraps.size();
            recordedTraps.add(traps);
          }
          selChanges.put(unit,index + 1);
        }
      }
    }
    StructureConstantBuilder landingPadsPtrs=new StructureConstantBuilder();
    for (    List<Trap> traps : recordedTraps) {
      StructureConstantBuilder landingPads=new StructureConstantBuilder();
      for (      Trap trap : traps) {
        SootClass exClass=trap.getException();
        StructureConstantBuilder landingPad=new StructureConstantBuilder();
        if ("java.lang.Throwable".equals(exClass.getName()) || exClass.isPhantom()) {
          landingPad.add(new NullConstant(I8_PTR));
        }
 else {
          catches.add(getInternalName(exClass));
          Global g=new Global(mangleClass(exClass) + "_info_struct",I8_PTR,true);
          if (!moduleBuilder.hasSymbol(g.getName())) {
            moduleBuilder.addGlobal(g);
          }
          landingPad.add(g.ref());
        }
        landingPad.add(new IntegerConstant(trapHandlers.get(trap.getHandlerUnit()) + 1));
        landingPads.add(landingPad.build());
      }
      landingPads.add(new StructureConstantBuilder().add(new NullConstant(I8_PTR)).add(new IntegerConstant(0)).build());
      Global g=moduleBuilder.newGlobal(landingPads.build(),true);
      landingPadsPtrs.add(new ConstantBitcast(g.ref(),I8_PTR));
    }
    Global g=moduleBuilder.newGlobal(landingPadsPtrs.build(),true);
    Variable ctx=function.newVariable(TRYCATCH_CONTEXT_PTR);
    Variable bcCtx=function.newVariable(BC_TRYCATCH_CONTEXT_PTR);
    function.add(new Alloca(bcCtx,BC_TRYCATCH_CONTEXT));
    Variable selPtr=function.newVariable(new PointerType(I32));
    function.add(new Getelementptr(selPtr,bcCtx.ref(),0,0,1));
    function.add(new Store(new IntegerConstant(0),selPtr.ref()));
    Variable bcCtxLandingPadsPtr=function.newVariable(I8_PTR_PTR);
    function.add(new Getelementptr(bcCtxLandingPadsPtr,bcCtx.ref(),0,1));
    function.add(new Store(new ConstantBitcast(g.ref(),I8_PTR),bcCtxLandingPadsPtr.ref()));
    function.add(new Bitcast(ctx,bcCtx.ref(),TRYCATCH_CONTEXT_PTR));
    trycatchContext=ctx.ref();
    Value result=call(RVM_TRYCATCH_ENTER,env,trycatchContext);
    Map<IntegerConstant,BasicBlockRef> alt=new TreeMap<IntegerConstant,BasicBlockRef>();
    for (    Entry<Unit,Integer> entry : trapHandlers.entrySet()) {
      alt.put(new IntegerConstant(entry.getValue() + 1),function.newBasicBlockRef(new Label(entry.getKey())));
    }
    function.add(new Switch(result,function.newBasicBlockRef(new Label(units.getFirst())),alt));
    if (!branchTargets.containsKey(units.getFirst())) {
      function.newBasicBlock(new Label(units.getFirst()));
    }
  }
  if ("<clinit>".equals(method.getName())) {
    initializeClassFields();
  }
  for (  Unit unit : units) {
    if (branchTargets.containsKey(unit) || trapHandlers.containsKey(unit)) {
      BasicBlock oldBlock=function.getCurrentBasicBlock();
      function.newBasicBlock(new Label(unit));
      if (oldBlock != null) {
        Instruction last=oldBlock.last();
        if (last == null || !isTerminator(last)) {
          oldBlock.add(new Br(function.newBasicBlockRef(new Label(unit))));
        }
      }
    }
    if (selChanges.containsKey(unit)) {
      int sel=selChanges.get(unit);
      Variable selPtr=function.newVariable(new PointerType(I32));
      function.add(new Getelementptr(selPtr,trycatchContext,0,1));
      function.add(new Store(new IntegerConstant(sel),selPtr.ref()));
    }
    if (unit instanceof DefinitionStmt) {
      assign((DefinitionStmt)unit);
    }
 else     if (unit instanceof ReturnStmt) {
      if (!body.getTraps().isEmpty()) {
        trycatchLeave(function);
      }
      return_((ReturnStmt)unit);
    }
 else     if (unit instanceof ReturnVoidStmt) {
      if (!body.getTraps().isEmpty()) {
        trycatchLeave(function);
      }
      returnVoid();
    }
 else     if (unit instanceof IfStmt) {
      if_((IfStmt)unit);
    }
 else     if (unit instanceof LookupSwitchStmt) {
      lookupSwitch((LookupSwitchStmt)unit);
    }
 else     if (unit instanceof TableSwitchStmt) {
      tableSwitch((TableSwitchStmt)unit);
    }
 else     if (unit instanceof GotoStmt) {
      goto_((GotoStmt)unit);
    }
 else     if (unit instanceof ThrowStmt) {
      throw_((ThrowStmt)unit);
    }
 else     if (unit instanceof InvokeStmt) {
      invoke((InvokeStmt)unit);
    }
 else     if (unit instanceof EnterMonitorStmt) {
      enterMonitor((EnterMonitorStmt)unit);
    }
 else     if (unit instanceof ExitMonitorStmt) {
      exitMonitor((ExitMonitorStmt)unit);
    }
 else {
      throw new IllegalArgumentException("Unknown Unit type: " + unit.getClass());
    }
  }
}
