{
  int strDif=matchResult.hasAnchoringBounds() ? matchResult.getLeftBound() - strIndex : testString.length() - strIndex;
  char ch1;
  char ch2;
  if (strDif == 0) {
    matchResult.setConsumed(consCounter,0);
    return next.matches(strIndex,testString,matchResult);
  }
 else   if (strDif >= 2) {
    ch1=testString.charAt(strIndex);
    ch2=testString.charAt(strIndex + 1);
  }
 else {
    ch1=testString.charAt(strIndex);
    ch2='a';
  }
switch (ch1) {
case '\r':
{
      if (ch2 == '\n') {
        matchResult.setConsumed(consCounter,0);
        return next.matches(strIndex,testString,matchResult);
      }
      matchResult.setConsumed(consCounter,0);
      return next.matches(strIndex,testString,matchResult);
    }
case '\n':
case '\u0085':
case '\u2028':
case '\u2029':
{
    matchResult.setConsumed(consCounter,0);
    return next.matches(strIndex,testString,matchResult);
  }
default :
return -1;
}
}
