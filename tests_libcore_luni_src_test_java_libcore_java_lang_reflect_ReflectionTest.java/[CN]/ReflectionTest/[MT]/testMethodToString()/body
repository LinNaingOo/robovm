{
  Method methodOne=C.class.getDeclaredMethod("methodOne",A.class,C.class);
  String methodOneRaw="protected final synchronized " + classA + " "+ classC+ ".methodOne("+ classA+ ","+ classC+ ") throws "+ classB;
  assertEquals(methodOneRaw,methodOne.toString());
  assertEquals(methodOneRaw,methodOne.toGenericString());
  Method methodTwo=C.class.getDeclaredMethod("methodTwo",List.class);
  String methodTwoRaw="public abstract java.util.Map " + classC + ".methodTwo(java.util.List)";
  assertEquals(methodTwoRaw,methodTwo.toString());
  String methodTwoGeneric="public abstract java.util.Map<" + classA + ", java.lang.String> "+ classC+ ".methodTwo(java.util.List<"+ classA+ ">)";
  assertEquals(methodTwoGeneric,methodTwo.toGenericString());
  Method methodThree=C.class.getDeclaredMethod("methodThree",A.class,Set.class);
  String methodThreeRaw="private static java.util.Map " + classC + ".methodThree("+ classA+ ",java.util.Set)";
  assertEquals(methodThreeRaw,methodThree.toString());
  String methodThreeGeneric="private static <T1,T2> java.util.Map<T1, ?> " + classC + ".methodThree(T1,java.util.Set<? super T2>)";
  assertEquals(methodThreeGeneric,methodThree.toGenericString());
  Method methodFour=C.class.getDeclaredMethod("methodFour",Set.class);
  String methodFourRaw="public java.lang.Comparable " + classC + ".methodFour(java.util.Set)";
  assertEquals(methodFourRaw,methodFour.toString());
  String methodFourGeneric="public <T> T " + classC + ".methodFour(java.util.Set<T>)";
  assertEquals(methodFourGeneric,methodFour.toGenericString());
}
