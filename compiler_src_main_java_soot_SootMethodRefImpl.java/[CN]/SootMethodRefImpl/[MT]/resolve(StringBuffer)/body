{
  SootClass cl=declaringClass;
  while (true) {
    if (trace != null)     trace.append("Looking in " + cl + " which has methods "+ cl.getMethods()+ "\n");
    if (cl.declaresMethod(getSubSignature()))     return checkStatic(cl.getMethod(getSubSignature()));
    if (Scene.v().allowsPhantomRefs() && cl.isPhantom()) {
      SootMethod m=new SootMethod(name,parameterTypes,returnType,isStatic() ? Modifier.STATIC : 0);
      m.setPhantom(true);
      cl.addMethod(m);
      return checkStatic(m);
    }
    if (cl.hasSuperclass())     cl=cl.getSuperclass();
 else     break;
  }
  cl=declaringClass;
  while (true) {
    LinkedList<SootClass> queue=new LinkedList<SootClass>();
    queue.addAll(cl.getInterfaces());
    while (!queue.isEmpty()) {
      SootClass iface=queue.removeFirst();
      if (trace != null)       trace.append("Looking in " + iface + " which has methods "+ iface.getMethods()+ "\n");
      if (iface.declaresMethod(getSubSignature()))       return checkStatic(iface.getMethod(getSubSignature()));
      queue.addAll(iface.getInterfaces());
    }
    if (cl.hasSuperclass())     cl=cl.getSuperclass();
 else     break;
  }
  throw new ClassResolutionFailedException();
}
