{
  int n=paths.size();
  int numPathsEliminated=0;
  int numUniquePathsEliminated=0;
  for (int i=0; i < n; i++) {
    ExpressionOwner owner=(ExpressionOwner)paths.elementAt(i);
    if (null != owner) {
      int found=findAndEliminateRedundant(i + 1,i,owner,psuedoVarRecipient,paths);
      if (found > 0)       numUniquePathsEliminated++;
      numPathsEliminated+=found;
    }
  }
  eleminateSharedPartialPaths(psuedoVarRecipient,paths);
  if (DIAGNOSE_NUM_PATHS_REDUCED)   diagnoseNumPaths(paths,numPathsEliminated,numUniquePathsEliminated);
}
