{
  assertEquals(192,StructWithArray.sizeOf());
  final int D1=2;
  final int D2=3;
  final int D3=4;
  Point[][][] array1;
  Point[][][] array2;
  Point[][][] array3;
  StructWithArray s=new StructWithArray();
  Point p=s.pointArrayAsPtr();
  array1=s.pointArray3D();
  assertEquals(D1,array1.length);
  for (int i=0; i < array1.length; i++) {
    assertEquals(D2,array1[i].length);
    for (int j=0; j < array1[i].length; j++) {
      assertEquals(D3,array1[i][j].length);
      for (int k=0; k < array1[i][j].length; k++) {
        assertEquals(0,array1[i][j][k].x());
        assertEquals(0,array1[i][j][k].y());
      }
    }
  }
  for (int i=0; i < D1 * D2 * D3; i++) {
    p.next(i).x(100 * i).y(-100 * i);
  }
  array2=s.pointArray3D();
  assertEquals(D1,array2.length);
  for (int i=0; i < array2.length; i++) {
    assertEquals(D2,array2[i].length);
    for (int j=0; j < array2[i].length; j++) {
      assertEquals(D3,array2[i][j].length);
      for (int k=0; k < array2[i][j].length; k++) {
        assertEquals(100 * ((i * D2 + j) * D3 + k),array2[i][j][k].x());
        assertEquals(-100 * ((i * D2 + j) * D3 + k),array2[i][j][k].y());
      }
    }
  }
  array3=new Point[D1][D2][D3];
  for (int i=0; i < array3.length; i++) {
    for (int j=0; j < array3[i].length; j++) {
      for (int k=0; k < array3[i][j].length; k++) {
        array3[i][j][k]=new Point().x(-1000 * ((i * D2 + j) * D3 + k)).y(1000 * ((i * D2 + j) * D3 + k));
      }
    }
  }
  s.pointArray3D(array3);
  for (int i=0; i < D1 * D2 * D3; i++) {
    assertEquals(-1000 * i,p.next(i).x());
    assertEquals(1000 * i,p.next(i).y());
  }
  try {
    s.pointArray3D(new Point[D1 / 2][][]);
    fail("Expected IllegalArgumentException");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    s.pointArray3D(new Point[D1][D2 / 2][]);
    fail("Expected IllegalArgumentException");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    s.pointArray3D(new Point[D1][D2][D3 / 2]);
    fail("Expected IllegalArgumentException");
  }
 catch (  IllegalArgumentException e) {
  }
}
