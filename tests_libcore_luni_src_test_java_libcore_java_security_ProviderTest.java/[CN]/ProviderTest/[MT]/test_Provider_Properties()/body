{
  Provider[] providers=Security.getProviders();
  for (  Provider provider : providers) {
    assertEquals(provider.getName(),provider.get("Provider.id name"));
    assertEquals(String.valueOf(provider.getVersion()),provider.get("Provider.id version"));
    assertEquals(provider.getInfo(),provider.get("Provider.id info"));
    assertEquals(provider.getClass().getName(),provider.get("Provider.id className"));
    Map<String,String> aliases=new HashMap<String,String>();
    Map<String,String> implementations=new HashMap<String,String>();
    for (    Entry<Object,Object> entry : provider.entrySet()) {
      Object k=entry.getKey();
      Object v=entry.getValue();
      assertEquals(String.class,k.getClass());
      assertEquals(String.class,v.getClass());
      String key=(String)k;
      String value=(String)v;
      if (key.startsWith("Provider.id ")) {
        continue;
      }
      if (key.indexOf(' ') != -1) {
        continue;
      }
      Matcher m=alias.matcher(key);
      if (m.find()) {
        String type=m.group(1);
        aliases.put(key,type + "." + value);
      }
 else {
        implementations.put(key,value);
      }
    }
    for (    Entry<String,String> entry : implementations.entrySet()) {
      String typeAndAlgorithm=entry.getKey();
      String className=entry.getValue();
      try {
        assertNotNull(Class.forName(className,true,provider.getClass().getClassLoader()));
      }
 catch (      ClassNotFoundException e) {
        if (!className.equals("sun.security.pkcs11.P11MAC")) {
          fail("Could not find class " + className + " for "+ typeAndAlgorithm);
        }
      }
    }
    for (    Entry<String,String> entry : aliases.entrySet()) {
      String alias=entry.getKey();
      String actual=entry.getValue();
      assertTrue("Could not find implementation " + actual + " for alias "+ alias,implementations.containsKey(actual));
    }
  }
}
