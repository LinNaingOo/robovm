{
  if (sc.resolvingLevel() >= SootClass.HIERARCHY)   return;
  if (Options.v().debug_resolver())   G.v().out.println("bringing to HIERARCHY: " + sc);
  sc.setResolvingLevel(SootClass.HIERARCHY);
  String className=sc.getName();
  ClassSource is=SourceLocator.v().getClassSource(className);
  if (is == null) {
    if (!Scene.v().allowsPhantomRefs()) {
      String suffix="";
      if (className.equals("java.lang.Object")) {
        suffix=" Try adding rt.jar to Soot's classpath, e.g.:\n" + "java -cp sootclasses.jar soot.Main -cp " + ".:/path/to/jdk/jre/lib/rt.jar <other options>";
      }
 else       if (className.equals("javax.crypto.Cipher")) {
        suffix=" Try adding jce.jar to Soot's classpath, e.g.:\n" + "java -cp sootclasses.jar soot.Main -cp " + ".:/path/to/jdk/jre/lib/rt.jar:/path/to/jdk/jre/lib/jce.jar <other options>";
      }
      throw new RuntimeException("couldn't find class: " + className + " (is your soot-class-path set properly?)"+ suffix);
    }
 else {
      G.v().out.println("Warning: " + className + " is a phantom class!");
      sc.setPhantomClass();
      classToTypesSignature.put(sc,new ArrayList());
      classToTypesHierarchy.put(sc,new ArrayList());
    }
  }
 else {
    Dependencies dependencies=is.resolve(sc);
    classToTypesSignature.put(sc,new ArrayList(dependencies.typesToSignature));
    classToTypesHierarchy.put(sc,new ArrayList(dependencies.typesToHierarchy));
  }
  reResolveHierarchy(sc);
}
