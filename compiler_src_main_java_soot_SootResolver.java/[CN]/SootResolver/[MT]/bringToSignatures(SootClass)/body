{
  if (sc.resolvingLevel() >= SootClass.SIGNATURES)   return;
  bringToHierarchy(sc);
  if (Options.v().debug_resolver())   G.v().out.println("bringing to SIGNATURES: " + sc);
  sc.setResolvingLevel(SootClass.SIGNATURES);
  for (Iterator fIt=sc.getFields().iterator(); fIt.hasNext(); ) {
    final SootField f=(SootField)fIt.next();
    addToResolveWorklist(f.getType(),SootClass.HIERARCHY);
  }
  for (Iterator mIt=sc.getMethods().iterator(); mIt.hasNext(); ) {
    final SootMethod m=(SootMethod)mIt.next();
    addToResolveWorklist(m.getReturnType(),SootClass.HIERARCHY);
    for (Iterator ptypeIt=m.getParameterTypes().iterator(); ptypeIt.hasNext(); ) {
      final Type ptype=(Type)ptypeIt.next();
      addToResolveWorklist(ptype,SootClass.HIERARCHY);
    }
    for (    SootClass exception : m.getExceptions()) {
      addToResolveWorklist(exception,SootClass.HIERARCHY);
    }
  }
  if (sc.hasSuperclass())   addToResolveWorklist(sc.getSuperclass(),SootClass.SIGNATURES);
  for (Iterator ifaceIt=sc.getInterfaces().iterator(); ifaceIt.hasNext(); ) {
    final SootClass iface=(SootClass)ifaceIt.next();
    addToResolveWorklist(iface,SootClass.SIGNATURES);
  }
}
