{
  if (dfa.printDebug() && method.getDeclaringClass().isApplicationClass())   G.v().out.println("        Checking PARAM " + parameterRef + " for "+ method);
  ParameterRef param=(ParameterRef)parameterRef.getValue();
  if (!(param.getType() instanceof RefLikeType) && (!dfa.includesPrimitiveInfoFlow() || method.getName().equals("<init>"))) {
    if (dfa.printDebug() && method.getDeclaringClass().isApplicationClass())     G.v().out.println("          PARAM is local (primitive)");
    return true;
  }
  List extClassCalls=uf.getExtCalls(sootClass);
  Iterator extClassCallsIt=extClassCalls.iterator();
  while (extClassCallsIt.hasNext()) {
    Pair extCall=(Pair)extClassCallsIt.next();
    Stmt s=(Stmt)extCall.getO2();
    if (s.getInvokeExpr().getMethodRef().resolve() == method) {
      if (dfa.printDebug() && method.getDeclaringClass().isApplicationClass())       G.v().out.println("          PARAM is shared (external access)");
      return false;
    }
  }
  List intClassCalls=uf.getIntCalls(sootClass);
  Iterator intClassCallsIt=intClassCalls.iterator();
  while (intClassCallsIt.hasNext()) {
    Pair intCall=(Pair)intClassCallsIt.next();
    SootMethod containingMethod=(SootMethod)intCall.getO1();
    Stmt s=(Stmt)intCall.getO2();
    InvokeExpr ie=s.getInvokeExpr();
    if (ie.getMethodRef().resolve() == method) {
      if (((ParameterRef)parameterRef.getValue()).getIndex() >= 0) {
        if (!isObjectLocal(ie.getArg(((ParameterRef)parameterRef.getValue()).getIndex()),containingMethod,includePrimitiveDataFlowIfAvailable)) {
          if (dfa.printDebug() && method.getDeclaringClass().isApplicationClass())           G.v().out.println("          PARAM is shared (internal propagation)");
          return false;
        }
      }
 else {
        if (s instanceof DefinitionStmt) {
          Value obj=((DefinitionStmt)s).getLeftOp();
          if (!isObjectLocal(obj,containingMethod,includePrimitiveDataFlowIfAvailable)) {
            if (dfa.printDebug() && method.getDeclaringClass().isApplicationClass())             G.v().out.println("          PARAM is shared (internal propagation)");
            return false;
          }
        }
      }
    }
  }
  if (dfa.printDebug() && method.getDeclaringClass().isApplicationClass())   G.v().out.println("          PARAM is local SO FAR (internal propagation)");
  return true;
}
