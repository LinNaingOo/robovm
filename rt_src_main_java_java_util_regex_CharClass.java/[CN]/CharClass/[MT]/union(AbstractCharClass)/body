{
  if (!mayContainSupplCodepoints && clazz.mayContainSupplCodepoints) {
    mayContainSupplCodepoints=true;
  }
  if (clazz.hasUCI())   this.hasUCI=true;
  if (altSurrogates ^ clazz.altSurrogates) {
    if (altSurrogates) {
      lowHighSurrogates.andNot(clazz.getLowHighSurrogates());
    }
 else {
      lowHighSurrogates.xor(clazz.getLowHighSurrogates());
      lowHighSurrogates.and(clazz.getLowHighSurrogates());
      altSurrogates=true;
    }
  }
 else {
    if (altSurrogates) {
      lowHighSurrogates.and(clazz.getLowHighSurrogates());
    }
 else {
      lowHighSurrogates.or(clazz.getLowHighSurrogates());
    }
  }
  if (!hideBits && clazz.getBits() != null) {
    if (alt ^ clazz.isNegative()) {
      if (alt) {
        bits.andNot(clazz.getBits());
      }
 else {
        bits.xor(clazz.getBits());
        bits.and(clazz.getBits());
        alt=true;
      }
    }
 else {
      if (alt) {
        bits.and(clazz.getBits());
      }
 else {
        bits.or(clazz.getBits());
      }
    }
  }
 else {
    final boolean curAlt=alt;
    if (nonBitSet == null) {
      if (!inverted && bits.isEmpty()) {
        if (curAlt) {
          nonBitSet=new AbstractCharClass(){
            public boolean contains(            int ch){
              return !clazz.contains(ch);
            }
          }
;
        }
 else {
          nonBitSet=new AbstractCharClass(){
            public boolean contains(            int ch){
              return clazz.contains(ch);
            }
          }
;
        }
      }
 else {
        if (curAlt) {
          nonBitSet=new AbstractCharClass(){
            public boolean contains(            int ch){
              return !(clazz.contains(ch) || (curAlt ^ bits.get(ch)));
            }
          }
;
        }
 else {
          nonBitSet=new AbstractCharClass(){
            public boolean contains(            int ch){
              return clazz.contains(ch) || (curAlt ^ bits.get(ch));
            }
          }
;
        }
      }
      hideBits=true;
    }
 else {
      final AbstractCharClass nb=nonBitSet;
      if (curAlt) {
        nonBitSet=new AbstractCharClass(){
          public boolean contains(          int ch){
            return !((curAlt ^ nb.contains(ch)) || clazz.contains(ch));
          }
        }
;
      }
 else {
        nonBitSet=new AbstractCharClass(){
          public boolean contains(          int ch){
            return (curAlt ^ nb.contains(ch)) || clazz.contains(ch);
          }
        }
;
      }
    }
  }
}
