{
  if (nativeValue.getType() instanceof StructureType || smallStructRet) {
    Variable stackCopy=fn.newVariable(new PointerType(nativeValue.getType()));
    fn.add(new Alloca(stackCopy,nativeValue.getType()));
    fn.add(new Store(nativeValue,stackCopy.ref()));
    nativeValue=stackCopy.ref();
  }
  Invokestatic invokestatic=new Invokestatic(getInternalName(sootMethod.getDeclaringClass()),marshalerClassName,"toObject","(Ljava/lang/Class;JZ)Ljava/lang/Object;");
  trampolines.add(invokestatic);
  Value valueClass=ldcClass(fn,valueClassName,env);
  Variable handle=fn.newVariable(I64);
  fn.add(new Ptrtoint(handle,nativeValue,I64));
  Value object=call(fn,invokestatic.getFunctionRef(),env,valueClass,handle.ref(),new IntegerConstant((byte)(copy ? 1 : 0)));
  if (marshaledArg != null) {
    marshaledArg.handle=handle.ref();
    marshaledArg.object=object;
  }
  return object;
}
