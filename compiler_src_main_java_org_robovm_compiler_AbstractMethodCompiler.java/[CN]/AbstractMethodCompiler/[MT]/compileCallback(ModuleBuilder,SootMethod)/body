{
  validateCallbackMethod(method);
  DataLayout dataLayout=config.getDataLayout();
  SootMethod originalMethod=method;
  boolean passByValue=isPassByValue(originalMethod);
  if (passByValue) {
    Arch arch=config.getArch();
    OS os=config.getOs();
    int size=dataLayout.getAllocSize(getStructType(dataLayout,originalMethod.getReturnType()));
    if (!os.isReturnedInRegisters(arch,size)) {
      method=createFakeStructRetMethod(method);
    }
  }
  Function callbackFn=FunctionBuilder.callback(dataLayout,method);
  if (originalMethod != method) {
    callbackFn.setParameterAttributes(0,ParameterAttribute.sret);
  }
 else   if (passByValue) {
    int size=dataLayout.getAllocSize(callbackFn.getType().getReturnType());
    Type t=size <= 1 ? I8 : (size <= 2 ? I16 : (size <= 4 ? I32 : I64));
    callbackFn=FunctionBuilder.callback(dataLayout,method,t);
  }
  moduleBuilder.addFunction(callbackFn);
  moduleBuilder.addAlias(new Alias(mangleMethod(originalMethod) + "_callback_i8p",Linkage._private,new ConstantBitcast(callbackFn.ref(),I8_PTR_PTR)));
  String targetName=mangleMethod(originalMethod);
  if (originalMethod.isSynchronized()) {
    targetName+="_synchronized";
  }
  FunctionRef targetFn=new FunctionRef(targetName,getFunctionType(originalMethod));
  Value env=call(callbackFn,BC_ATTACH_THREAD_FROM_CALLBACK);
  BasicBlockRef bbSuccess=callbackFn.newBasicBlockRef(new Label("success"));
  BasicBlockRef bbFailure=callbackFn.newBasicBlockRef(new Label("failure"));
  pushCallbackFrame(callbackFn,env);
  trycatchAllEnter(callbackFn,env,bbSuccess,bbFailure);
  callbackFn.newBasicBlock(bbSuccess.getLabel());
  List<MarshaledArg> marshaledArgs=new ArrayList<MarshaledArg>();
  ArrayList<Value> args=new ArrayList<Value>();
  args.add(env);
  int start=originalMethod == method ? 0 : 1;
  for (int i=start; i < method.getParameterCount(); i++) {
    Value arg=callbackFn.getParameterRef(i);
    soot.Type type=method.getParameterType(i);
    if (needsMarshaler(type)) {
      String marshalerClassName=getMarshalerClassName(method,i);
      String targetClassName=getInternalName(type);
      if (arg.getType() instanceof PrimitiveType) {
        if (isEnum(type)) {
          arg=marshalNativeToEnumObject(callbackFn,marshalerClassName,env,targetClassName,arg,MarshalerFlags.CALL_TYPE_CALLBACK);
        }
 else {
          arg=marshalNativeToValueObject(callbackFn,marshalerClassName,env,targetClassName,arg,MarshalerFlags.CALL_TYPE_CALLBACK);
        }
      }
 else {
        MarshaledArg marshaledArg=new MarshaledArg();
        marshaledArg.paramIndex=i;
        marshaledArgs.add(marshaledArg);
        arg=marshalNativeToObject(callbackFn,marshalerClassName,marshaledArg,env,targetClassName,arg,MarshalerFlags.CALL_TYPE_CALLBACK);
      }
    }
 else     if (hasPointerAnnotation(method,i)) {
      arg=marshalPointerToLong(callbackFn,arg);
    }
    args.add(arg);
  }
  Value result=call(callbackFn,targetFn,args);
  updateNative(method,callbackFn,env,MarshalerFlags.CALL_TYPE_CALLBACK,marshaledArgs);
  if (needsMarshaler(method.getReturnType())) {
    String marshalerClassName=getMarshalerClassName(method);
    Type nativeType=callbackFn.getType().getReturnType();
    if (passByValue) {
      result=marshalObjectToNative(callbackFn,marshalerClassName,null,nativeType,env,result,MarshalerFlags.CALL_TYPE_CALLBACK,true);
    }
 else     if (nativeType instanceof PrimitiveType) {
      if (isEnum(method.getReturnType())) {
        result=marshalEnumObjectToNative(callbackFn,marshalerClassName,nativeType,env,result,MarshalerFlags.CALL_TYPE_CALLBACK);
      }
 else {
        result=marshalValueObjectToNative(callbackFn,marshalerClassName,nativeType,env,result,MarshalerFlags.CALL_TYPE_CALLBACK);
      }
    }
 else {
      result=marshalObjectToNative(callbackFn,marshalerClassName,null,nativeType,env,result,MarshalerFlags.CALL_TYPE_CALLBACK);
    }
  }
 else   if (hasPointerAnnotation(method)) {
    result=marshalLongToPointer(callbackFn,result);
  }
 else   if (originalMethod != method) {
    String marshalerClassName=getMarshalerClassName(originalMethod);
    PointerType nativeType=(PointerType)callbackFn.getType().getParameterTypes()[0];
    Value addr=marshalObjectToNative(callbackFn,marshalerClassName,null,nativeType,env,result,MarshalerFlags.CALL_TYPE_CALLBACK);
    Variable src=callbackFn.newVariable(I8_PTR);
    Variable dest=callbackFn.newVariable(I8_PTR);
    callbackFn.add(new Bitcast(src,addr,I8_PTR));
    callbackFn.add(new Bitcast(dest,callbackFn.getParameterRef(0),I8_PTR));
    call(callbackFn,LLVM_MEMCPY,dest.ref(),src.ref(),sizeof((StructureType)nativeType.getBase()),new IntegerConstant(0),BooleanConstant.FALSE);
    result=null;
  }
  trycatchLeave(callbackFn,env);
  popCallbackFrame(callbackFn,env);
  call(callbackFn,BC_DETACH_THREAD_FROM_CALLBACK,env);
  callbackFn.add(new Ret(result));
  callbackFn.newBasicBlock(bbFailure.getLabel());
  trycatchLeave(callbackFn,env);
  popCallbackFrame(callbackFn,env);
  Value ex=call(callbackFn,BC_EXCEPTION_CLEAR,env);
  updateNative(method,callbackFn,env,MarshalerFlags.CALL_TYPE_CALLBACK,marshaledArgs);
  call(callbackFn,BC_DETACH_THREAD_FROM_CALLBACK,env);
  call(callbackFn,BC_THROW,env,ex);
  callbackFn.add(new Unreachable());
}
