{
  validateCallbackMethod(method);
  SootMethod originalMethod=method;
  if (isPassByValue(originalMethod)) {
    Arch arch=config.getArch();
    OS os=config.getOs();
    String triple=config.getTriple();
    if (getStructType(originalMethod.getReturnType()).getAllocSize(triple) > os.getMaxRegisterReturnSize(arch)) {
      method=createFakeStructRetMethod(method);
    }
  }
  Function callbackFn=FunctionBuilder.callback(method);
  if (originalMethod != method) {
    callbackFn.setParameterAttributes(0,ParameterAttribute.sret);
    moduleBuilder.addAlias(new Alias(mangleMethod(originalMethod) + "_callback",Linkage._private,new ConstantBitcast(callbackFn.ref(),getCallbackFunctionType(originalMethod))));
  }
  moduleBuilder.addFunction(callbackFn);
  String targetName=mangleMethod(originalMethod);
  if (originalMethod.isSynchronized()) {
    targetName+="_synchronized";
  }
  FunctionRef targetFn=new FunctionRef(targetName,getFunctionType(originalMethod));
  Value env=call(callbackFn,BC_ATTACH_THREAD_FROM_CALLBACK);
  BasicBlockRef bbSuccess=callbackFn.newBasicBlockRef(new Label("success"));
  BasicBlockRef bbFailure=callbackFn.newBasicBlockRef(new Label("failure"));
  pushCallbackFrame(callbackFn,env);
  trycatchAllEnter(callbackFn,env,bbSuccess,bbFailure);
  callbackFn.newBasicBlock(bbSuccess.getLabel());
  List<MarshaledArg> marshaledArgs=new ArrayList<MarshaledArg>();
  ArrayList<Value> args=new ArrayList<Value>();
  args.add(env);
  int start=originalMethod == method ? 0 : 1;
  for (int i=start; i < method.getParameterCount(); i++) {
    Value arg=callbackFn.getParameterRef(i);
    soot.Type type=method.getParameterType(i);
    if (needsMarshaler(type)) {
      String marshalerClassName=getMarshalerClassName(method,i,true);
      String targetClassName=getInternalName(type);
      if (arg.getType() instanceof PrimitiveType) {
        if (isEnum(type)) {
          arg=marshalNativeToEnumObject(callbackFn,marshalerClassName,env,targetClassName,arg);
        }
 else {
          arg=marshalNativeToValueObject(callbackFn,marshalerClassName,env,targetClassName,arg);
        }
      }
 else {
        MarshaledArg marshaledArg=new MarshaledArg();
        marshaledArg.paramIndex=i;
        marshaledArgs.add(marshaledArg);
        if (isPtr(type)) {
          arg=marshalNativeToPtr(callbackFn,marshalerClassName,marshaledArg,env,getPtrTargetClass(method,i),arg,getPtrWrapCount(method,i));
        }
 else {
          arg=marshalNativeToObject(callbackFn,marshalerClassName,marshaledArg,env,targetClassName,arg,false);
        }
      }
    }
 else     if (hasPointerAnnotation(method,i)) {
      arg=marshalPointerToLong(callbackFn,arg);
    }
    args.add(arg);
  }
  Value result=call(callbackFn,targetFn,args);
  for (  MarshaledArg marshaledArg : marshaledArgs) {
    String marshalerClassName=getMarshalerClassName(method,marshaledArg.paramIndex,false);
    Invokestatic invokestatic=new Invokestatic(getInternalName(method.getDeclaringClass()),marshalerClassName,"updateNative","(Ljava/lang/Object;J)V");
    trampolines.add(invokestatic);
    call(callbackFn,invokestatic.getFunctionRef(),env,marshaledArg.object,marshaledArg.handle);
  }
  if (needsMarshaler(method.getReturnType())) {
    String marshalerClassName=getMarshalerClassName(method,false);
    Type nativeType=callbackFn.getType().getReturnType();
    if (nativeType instanceof PrimitiveType) {
      if (isEnum(method.getReturnType())) {
        result=marshalEnumObjectToNative(callbackFn,marshalerClassName,nativeType,env,result);
      }
 else {
        result=marshalValueObjectToNative(callbackFn,marshalerClassName,nativeType,env,result);
      }
    }
 else {
      result=marshalObjectToNative(callbackFn,marshalerClassName,null,nativeType,env,result);
    }
  }
 else   if (hasPointerAnnotation(method)) {
    result=marshalLongToPointer(callbackFn,result);
  }
 else   if (originalMethod != method) {
    String marshalerClassName=getMarshalerClassName(originalMethod,false);
    PointerType nativeType=(PointerType)callbackFn.getType().getParameterTypes()[0];
    Value addr=marshalObjectToNative(callbackFn,marshalerClassName,null,nativeType,env,result);
    Variable src=callbackFn.newVariable(I8_PTR);
    Variable dest=callbackFn.newVariable(I8_PTR);
    callbackFn.add(new Bitcast(src,addr,I8_PTR));
    callbackFn.add(new Bitcast(dest,callbackFn.getParameterRef(0),I8_PTR));
    call(callbackFn,LLVM_MEMCPY,dest.ref(),src.ref(),sizeof((StructureType)nativeType.getBase()),new IntegerConstant(0),BooleanConstant.FALSE);
    result=null;
  }
  trycatchLeave(callbackFn,env);
  popCallbackFrame(callbackFn,env);
  call(callbackFn,BC_DETACH_THREAD_FROM_CALLBACK,env);
  callbackFn.add(new Ret(result));
  callbackFn.newBasicBlock(bbFailure.getLabel());
  trycatchLeave(callbackFn,env);
  popCallbackFrame(callbackFn,env);
  Value ex=call(callbackFn,BC_EXCEPTION_CLEAR,env);
  call(callbackFn,BC_DETACH_THREAD_FROM_CALLBACK,env);
  call(callbackFn,BC_THROW,env,ex);
  callbackFn.add(new Unreachable());
}
