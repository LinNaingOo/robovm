{
  Locale[] desiredLocales=new Locale[]{Locale.JAPAN,Locale.JAPANESE,Locale.FRANCE,Locale.FRENCH,Locale.US,Locale.UK,Locale.CANADA,Locale.CANADA_FRENCH,Locale.ENGLISH,new Locale("ja","JP"),new Locale("","JP"),new Locale("fr","FR"),new Locale("","FR"),new Locale("en","US"),new Locale("","US"),new Locale("es","US"),new Locale("ar","US"),new Locale("ja","US"),new Locale("en","CA"),new Locale("fr","CA"),new Locale("","CA"),new Locale("ar","CA"),new Locale("ja","JP"),new Locale("","JP"),new Locale("ar","JP"),new Locale("ja","AE"),new Locale("en","AE"),new Locale("ar","AE"),new Locale("da","DK"),new Locale("","DK"),new Locale("da",""),new Locale("ja",""),new Locale("en","")};
  Set<Locale> availableLocales=new HashSet<Locale>(Arrays.asList(Locale.getAvailableLocales()));
  ArrayList<Locale> locales=new ArrayList<Locale>();
  for (  Locale desiredLocale : desiredLocales) {
    if (availableLocales.contains(desiredLocale)) {
      locales.add(desiredLocale);
    }
  }
  Locale[] loc1=locales.toArray(new Locale[locales.size()]);
  String[] euro=new String[]{"EUR","\u20ac"};
  String[] yen=new String[]{"JPY","\u00a5","\u00a5JP","JP\u00a5","\uffe5","\uffe5JP","JP\uffe5"};
  String[] dollar=new String[]{"USD","$","US$","$US"};
  String[] cDollar=new String[]{"CA$","CAD","$","Can$","$CA"};
  Currency currE=Currency.getInstance("EUR");
  Currency currJ=Currency.getInstance("JPY");
  Currency currUS=Currency.getInstance("USD");
  Currency currCA=Currency.getInstance("CAD");
  int i, j, k;
  boolean flag;
  for (k=0; k < loc1.length; k++) {
    Locale.setDefault(loc1[k]);
    for (i=0; i < loc1.length; i++) {
      flag=false;
      for (j=0; j < euro.length; j++) {
        if (currE.getSymbol(loc1[i]).equals(euro[j])) {
          flag=true;
          break;
        }
      }
      assertTrue("Default Locale is: " + Locale.getDefault() + ". For locale "+ loc1[i]+ " the Euro currency returned "+ currE.getSymbol(loc1[i])+ ". Expected was one of these: "+ Arrays.toString(euro),flag);
    }
    for (i=0; i < loc1.length; i++) {
      flag=false;
      for (j=0; j < yen.length; j++) {
        byte[] b1=null;
        byte[] b2=null;
        if (currJ.getSymbol(loc1[i]).equals(yen[j])) {
          flag=true;
          break;
        }
      }
      assertTrue("Default Locale is: " + Locale.getDefault() + ". For locale "+ loc1[i]+ " the Yen currency returned "+ currJ.getSymbol(loc1[i])+ ". Expected was one of these: "+ Arrays.toString(yen),flag);
    }
    for (i=0; i < loc1.length; i++) {
      flag=false;
      for (j=0; j < dollar.length; j++) {
        if (currUS.getSymbol(loc1[i]).equals(dollar[j])) {
          flag=true;
          break;
        }
      }
      assertTrue("Default Locale is: " + Locale.getDefault() + ". For locale "+ loc1[i]+ " the Dollar currency returned "+ currUS.getSymbol(loc1[i])+ ". Expected was one of these: "+ Arrays.toString(dollar),flag);
    }
    for (i=0; i < loc1.length; i++) {
      flag=false;
      for (j=0; j < cDollar.length; j++) {
        if (currCA.getSymbol(loc1[i]).equals(cDollar[j])) {
          flag=true;
          break;
        }
      }
      assertTrue("Default Locale is: " + Locale.getDefault() + ". For locale "+ loc1[i]+ " the Canadian Dollar currency returned "+ currCA.getSymbol(loc1[i])+ ". Expected was one of these: "+ Arrays.toString(cDollar),flag);
    }
  }
}
