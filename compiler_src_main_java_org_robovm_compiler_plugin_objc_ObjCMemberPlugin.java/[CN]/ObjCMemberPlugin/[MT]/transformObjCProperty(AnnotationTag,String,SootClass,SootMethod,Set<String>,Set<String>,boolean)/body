{
  int getterParamCount=extensions ? 1 : 0;
  int setterParamCount=extensions ? 2 : 1;
  if (method.getReturnType() != VoidType.v() && method.getParameterCount() != getterParamCount || method.getReturnType() == VoidType.v() && method.getParameterCount() != setterParamCount) {
    if (!extensions) {
      throw new CompilerException("Objective-C " + getAnnotationName(annotation) + " method "+ method+ " does not have a supported signature. "+ getAnnotationName(annotation)+ " getter methods"+ " must take 0 arguments and must not return void. "+ getAnnotationName(annotation)+ " setter methods must take 1 argument and return void.");
    }
    throw new CompilerException("Objective-C " + getAnnotationName(annotation) + " method "+ method+ " in extension class does not have a supported signature. "+ getAnnotationName(annotation)+ " getter methods in extension classes"+ " must take 1 argument (the 'this' reference) and "+ "must not return void. "+ getAnnotationName(annotation)+ " setter methods in extension classes "+ "must take 2 arguments (first is the 'this' reference) and return void.");
  }
  boolean isGetter=method.getReturnType() != VoidType.v();
  String selectorName=getObjCPropertySelectorName(annotation,method,isGetter);
  if (!extensions && isCustomClass(sootClass)) {
    createCallback(sootClass,method,method,selectorName,getReceiverType(sootClass));
  }
  if (method.isNative()) {
    if (checkOverridable(overridables,selectorName,method)) {
      overridables.add(selectorName);
    }
    selectors.add(selectorName);
    boolean strongRefSetter=!isGetter && readBooleanElem(annotation,"strongRef",false);
    createBridge(sootClass,method,selectorName,strongRefSetter,extensions);
  }
}
