{
  AnnotationTag annotation=getAnnotation(method,METHOD);
  if (annotation != null) {
    if (extensions && !(method.isStatic() && method.isNative())) {
      throw new CompilerException("Objective-C @Method method " + method + " in extension class must be static and native.");
    }
    transformObjCMethod(annotation,sootClass,method,selectors,overridables,extensions);
    return;
  }
  annotation=getAnnotation(method,IBACTION);
  if (annotation != null) {
    if (method.isStatic() || method.isNative()) {
      throw new CompilerException("Objective-C @IBAction method " + method + " must not be static or native.");
    }
    int paramCount=method.getParameterCount();
    Type param1=paramCount > 0 ? method.getParameterType(0) : null;
    Type param2=paramCount > 1 ? method.getParameterType(1) : null;
    if (method.getReturnType() != VoidType.v() || paramCount < 1 || paramCount > 2) {
      throw new CompilerException("Objective-C @IBAction method " + method + " does not have a supported signature. @IBAction methods"+ " must return void and either take 1 argument of type UIResponder"+ " or 2 arguments of types UIResponder and UIEvent.");
    }
    transformObjCMethod(annotation,sootClass,method,selectors,overridables,extensions);
    return;
  }
  annotation=getAnnotation(method,PROPERTY);
  if (annotation != null) {
    if (extensions && !(method.isStatic() && method.isNative())) {
      throw new CompilerException("Objective-C @Property method " + method + " in extension class must be static and native.");
    }
    transformObjCProperty(annotation,"@Property",sootClass,method,selectors,overridables,extensions);
    return;
  }
  annotation=getAnnotation(method,IBOUTLET);
  if (annotation != null) {
    if (method.isStatic() || !method.isNative()) {
      throw new CompilerException("Objective-C @IBOutlet method " + method + " must not be static but must be native.");
    }
    transformObjCProperty(annotation,"@IBOutlet",sootClass,method,selectors,overridables,extensions);
    return;
  }
}
