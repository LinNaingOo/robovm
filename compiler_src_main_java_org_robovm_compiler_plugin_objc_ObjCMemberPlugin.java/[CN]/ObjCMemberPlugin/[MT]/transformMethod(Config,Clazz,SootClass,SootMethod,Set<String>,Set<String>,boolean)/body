{
  AnnotationTag annotation=getAnnotation(method,METHOD);
  if (annotation != null) {
    if (extensions && !(method.isStatic() && method.isNative())) {
      throw new CompilerException("Objective-C @Method method " + method + " in extension class must be static and native.");
    }
    transformObjCMethod(annotation,sootClass,method,selectors,overridables,extensions);
    return;
  }
  annotation=getAnnotation(method,IBACTION);
  if (annotation != null) {
    if (method.isStatic() || method.isNative()) {
      throw new CompilerException("Objective-C @IBAction method " + method + " must not be static or native.");
    }
    int paramCount=method.getParameterCount();
    Type param1=paramCount > 0 ? method.getParameterType(0) : null;
    Type param2=paramCount > 1 ? method.getParameterType(1) : null;
    if (method.getReturnType() != VoidType.v() || paramCount > 2 || (param1 != null && (!isUIResponder(param1) && !isUIStoryboardSegue(param1))) || (param2 != null && (!isUIEvent(param2) || isUIStoryboardSegue(param1)))) {
      throw new CompilerException("Objective-C @IBAction method " + method + " does not have a supported signature. @IBAction methods"+ " must return void and either take no arguments, 1 argument of type UIResponder"+ " or UIStoryboardSegue, or 2 arguments of types UIResponder and UIEvent.");
    }
    transformObjCMethod(annotation,sootClass,method,selectors,overridables,extensions);
    return;
  }
  annotation=getAnnotation(method,PROPERTY);
  if (annotation != null) {
    if (extensions && !(method.isStatic() && method.isNative())) {
      throw new CompilerException("Objective-C @Property method " + method + " in extension class must be static and native.");
    }
    transformObjCProperty(annotation,"@Property",sootClass,method,selectors,overridables,extensions);
    return;
  }
  annotation=getAnnotation(method,IBOUTLET);
  if (annotation != null) {
    if (method.isStatic()) {
      throw new CompilerException("Objective-C @IBOutlet method " + method + " must not be static.");
    }
    transformObjCProperty(annotation,"@IBOutlet",sootClass,method,selectors,overridables,extensions);
    return;
  }
  annotation=getAnnotation(method,IBOUTLETCOLLECTION);
  if (annotation != null) {
    if (method.isStatic()) {
      throw new CompilerException("Objective-C @IBOutletCollection method " + method + " must not be static.");
    }
    if (method.getReturnType() != VoidType.v() && !isNSArray(method.getReturnType()) || method.getReturnType() == VoidType.v() && method.getParameterCount() == 1 && !isNSArray(method.getParameterType(0))) {
      throw new CompilerException("Objective-C @IBOutletCollection method " + method + " does not have a supported signature. "+ "@IBOutletCollection getter methods must return NSArray. "+ "@IBOutletCollection setter methods must have 1 parameter of type NSArray.");
    }
    transformObjCProperty(annotation,"@IBOutletCollection",sootClass,method,selectors,overridables,extensions);
    return;
  }
}
