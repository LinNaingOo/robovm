{
  String selectorName=readStringElem(annotation,"selector","").trim();
  if (selectorName.length() == 0) {
    StringBuilder sb=new StringBuilder(method.getName());
    int argCount=method.getParameterCount();
    for (int i=extensions ? 1 : 0; i < argCount; i++) {
      sb.append(':');
    }
    selectorName=sb.toString();
  }
  if (!extensions && (isCustomClass(sootClass) || (method.getModifiers() & Modifier.FINAL) == 0)) {
    Type receiverType=ObjCProtocolProxyPlugin.isObjCProxy(sootClass) ? sootClass.getInterfaces().getFirst().getType() : sootClass.getType();
    createCallback(sootClass,method,selectorName,receiverType);
  }
  if (method.isNative()) {
    if (checkOverridable(overridables,selectorName,method)) {
      overridables.add(selectorName);
    }
    selectors.add(selectorName);
    createBridge(sootClass,method,selectorName,false,extensions);
  }
}
