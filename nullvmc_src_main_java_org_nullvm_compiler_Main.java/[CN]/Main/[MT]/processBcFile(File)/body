{
  File outFile=new File(f.getParentFile(),f.getName().substring(0,f.getName().length() - 3) + ".s");
  if (!clean && outFile.exists() && outFile.lastModified() >= f.lastModified()) {
    if (verbose) {
      stdout.println("Skipping unchanged LLVM bitcode file: " + f);
    }
    return processGccFile(outFile);
  }
  if (verbose) {
    stdout.format("Compiling LLVM bitcode file '%s' to assembler file '%s'\n",f,outFile);
  }
  String llcPath="llc";
  String optPath="opt";
  if (llvmBinDir != null) {
    llcPath=new File(llvmBinDir,"llc").getAbsolutePath();
    optPath=new File(llvmBinDir,"opt").getAbsolutePath();
  }
  File outOptedFile=new File(f.getParentFile(),f.getName().substring(0,f.getName().length() - 3) + ".opted.bc");
  exec(optPath,optOpts,"-mem2reg","-always-inline","-o=" + outOptedFile.toString(),f);
  exec(llcPath,llcOpts,"-relocation-model=pic","-o=" + outFile.toString(),outOptedFile);
  return processGccFile(outFile);
}
