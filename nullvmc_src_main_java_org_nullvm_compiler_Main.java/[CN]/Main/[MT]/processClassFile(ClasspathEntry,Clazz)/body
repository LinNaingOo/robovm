{
  OutputStream out=null;
  File outFile=null;
  try {
    String className=clazz.getInternalName();
    outFile=new File(entry.getCacheDir(),className.replace('/',File.separatorChar) + "" + ".class.ll");
    outFile.getParentFile().mkdirs();
    if (!clean && outFile.exists() && outFile.lastModified() >= clazz.lastModified()) {
      if (verbose) {
        stdout.println("Skipping unchanged class file: " + clazz.getFileName());
      }
      return processIrFile(outFile);
    }
    if (verbose) {
      stdout.format("Compiling class file '%s' to LLVM IR file '%s'\n",clazz.getFileName(),outFile);
    }
    out=new FileOutputStream(outFile);
    new SootClassCompiler().compile(clazz,out);
  }
 catch (  Throwable t) {
    FileUtils.deleteQuietly(outFile);
    if (t instanceof IOException) {
      throw (IOException)t;
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
    throw new RuntimeException(t);
  }
 finally {
    IOUtils.closeQuietly(out);
  }
  return processIrFile(outFile);
}
