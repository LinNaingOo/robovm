{
  File outFile=entry.getDynamicLibrary();
  if (!clean && outFile.exists() && !entry.hasChangedAfter(outFile.lastModified())) {
    if (verbose) {
      stdout.println("Skipping unchanged classpath entry: " + entry);
    }
    return outFile;
  }
  if (verbose) {
    stdout.format("Building dynamic library '%s'\n",outFile);
  }
  List<File> files=processClassFiles(entry);
  outFile.getParentFile().mkdirs();
  String gccPath="gcc";
  if (gccBin != null) {
    gccPath=gccBin.getAbsolutePath();
  }
  List<String> ldArgs=new ArrayList<String>();
  for (  File f : libDirs) {
    ldArgs.add("-L");
    ldArgs.add(f.getAbsolutePath());
  }
  ldArgs.add("-L");
  ldArgs.add(new File(home,"lib").getAbsolutePath());
  exec(gccPath,files,"-o",outFile,"-g","-shared","-Wl,-soname," + outFile.getName(),"-Wl,--version-script",symbolsMapFile,gccOpts,ldArgs,"-lnullvm","-lm");
  return outFile;
}
