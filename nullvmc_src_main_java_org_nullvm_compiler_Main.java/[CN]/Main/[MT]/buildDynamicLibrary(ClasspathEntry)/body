{
  File outFile=entry.getDynamicLibrary();
  if (!clean && outFile.exists() && !entry.hasChangedAfter(outFile.lastModified())) {
    if (verbose) {
      stdout.println("Skipping unchanged classpath entry: " + entry);
    }
    return outFile;
  }
  if (verbose) {
    stdout.format("Building dynamic library '%s'\n",outFile);
  }
  List<File> files=processClassFiles(entry);
  File atFile=new File(tmpFile,"files");
  PrintWriter pw=null;
  try {
    pw=new PrintWriter(atFile);
    for (    File f : files) {
      pw.println(f.getAbsolutePath().substring(entry.getObjectCacheDir().getAbsolutePath().length() + 1));
    }
  }
  finally {
    IOUtils.closeQuietly(pw);
  }
  outFile.getParentFile().mkdirs();
  String gccPath="gcc";
  if (gccBin != null) {
    gccPath=gccBin.getAbsolutePath();
  }
  List<String> ldArgs=new ArrayList<String>();
  for (  File f : libDirs) {
    ldArgs.add("-L");
    ldArgs.add(f.getAbsolutePath());
  }
  ldArgs.add("-L");
  ldArgs.add(new File(home,"lib").getAbsolutePath());
  if (os == OS.linux) {
    exec(entry.getObjectCacheDir(),gccPath,"@" + atFile.getAbsolutePath(),"-o",outFile,"-g","-shared","-Wl,-soname," + outFile.getName(),"-Wl,--version-script",symbolsMapFile,gccOpts,ldArgs,"-lnullvm","-lm");
  }
 else   if (os == OS.macosx) {
    exec(entry.getObjectCacheDir(),gccPath,"@" + atFile.getAbsolutePath(),"-o",outFile,"-g","-dynamiclib",gccOpts,ldArgs,"-lnullvm","-lm","-exported_symbols_list",symbolsMapFile);
  }
  return outFile;
}
