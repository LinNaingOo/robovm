{
  if (jarFile != null) {
    classPathFiles.add(jarFile);
  }
  if (output == null) {
    throw new IllegalArgumentException("No output dir specified");
  }
  if (classpath == null) {
    throw new IllegalArgumentException("No classpath specified");
  }
  if (target == null && mainClass == null) {
    throw new IllegalArgumentException("No target and no main class specified");
  }
  if (verbose) {
    if (mainClass != null) {
      stdout.println("Using main class: " + mainClass);
    }
    stdout.println("Run arguments: " + runArgs);
  }
  cache.mkdirs();
  if (target == null) {
    target=mainClass;
  }
  bootClassPathFiles.add(new File(home,"lib/nullvm-rt.jar"));
  if (bootclasspath != null) {
    for (    String p : bootclasspath.split(File.pathSeparator)) {
      bootClassPathFiles.add(new File(p));
    }
  }
  if (classpath != null) {
    for (    String p : classpath.split(File.pathSeparator)) {
      classPathFiles.add(new File(p));
    }
  }
  tmpFile=File.createTempFile("nullvm",".tmp");
  tmpFile.delete();
  tmpFile.mkdirs();
  mainCFile=new File(tmpFile,"main.c");
  FileUtils.copyURLToFile(getClass().getResource("/main.c"),mainCFile);
  symbolsMapFile=new File(tmpFile,"symbols.map");
  FileUtils.copyURLToFile(getClass().getResource("/symbols.map"),symbolsMapFile);
  Clazzes clazzes=new Clazzes(bootClassPathFiles,classPathFiles);
  List<ClasspathEntry> bootclasspathObjects=new ArrayList<ClasspathEntry>();
  List<ClasspathEntry> classpathObjects=new ArrayList<ClasspathEntry>();
  for (  Path path : clazzes.getBootclasspathPaths()) {
    bootclasspathObjects.add(createClasspathEntry(path));
  }
  for (  Path path : clazzes.getClasspathPaths()) {
    classpathObjects.add(createClasspathEntry(path));
  }
  SootClassCompiler.init(clazzes,getChangedClasses(bootclasspathObjects,classpathObjects));
  for (  ClasspathEntry entry : bootclasspathObjects) {
    processClasspathEntry(entry);
  }
  for (  ClasspathEntry entry : classpathObjects) {
    processClasspathEntry(entry);
  }
  output.mkdirs();
  buildExecutable();
  if (run) {
    runTarget(bootclasspathObjects,classpathObjects);
  }
 else {
    FileUtils.copyFileToDirectory(new File(new File(home,"lib"),"libnullvm.so"),output);
    FileUtils.copyFileToDirectory(new File(new File(home,"lib"),"libnullvm-rt.so"),output);
    FileUtils.copyFileToDirectory(new File(new File(home,"lib"),"libgc.so.1"),output);
    File libBoot=new File(new File(output,"lib"),"boot");
    libBoot.mkdirs();
    File libMain=new File(new File(output,"lib"),"main");
    libMain.mkdirs();
    writeClasspathEntries(bootclasspathObjects,output,libBoot,new File(output,"bootclasspath"));
    writeClasspathEntries(classpathObjects,output,libMain,new File(output,"classpath"));
  }
}
