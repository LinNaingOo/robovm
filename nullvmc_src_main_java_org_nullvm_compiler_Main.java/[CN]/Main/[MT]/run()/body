{
  if (jarFile != null) {
    classPathFiles.add(jarFile);
  }
  if (mainClass == null) {
    throw new IllegalArgumentException("No main class specified on command line or in JAR manifest");
  }
  if (output == null) {
    throw new IllegalArgumentException("No output dir specified");
  }
  if (classpath == null) {
    throw new IllegalArgumentException("No classpath specified");
  }
  if (verbose) {
    stdout.println("Using main class: " + mainClass);
    stdout.println("Run arguments: " + runArgs);
  }
  classCache=new File(cache,"classes");
  classCache.mkdirs();
  libCache=new File(cache,"lib");
  libCache.mkdirs();
  if (target == null) {
    target=mainClass;
  }
  bootClassPathFiles.add(new File(home,"lib/nullvm-rt.jar"));
  if (bootclasspath != null) {
    for (    String p : bootclasspath.split(File.pathSeparator)) {
      bootClassPathFiles.add(new File(p));
    }
  }
  if (classpath != null) {
    for (    String p : classpath.split(File.pathSeparator)) {
      classPathFiles.add(new File(p));
    }
  }
  tmpFile=File.createTempFile("nullvm",".tmp");
  tmpFile.delete();
  tmpFile.mkdirs();
  opcodesFile=new File(tmpFile,"opcodes.ll");
  FileUtils.copyURLToFile(getClass().getResource("/opcodes.ll"),opcodesFile);
  mainCFile=new File(tmpFile,"main.c");
  FileUtils.copyURLToFile(getClass().getResource("/main.c"),mainCFile);
  symbolsMapFile=new File(tmpFile,"symbols.map");
  FileUtils.copyURLToFile(getClass().getResource("/symbols.map"),symbolsMapFile);
  Clazzes clazzes=new Clazzes(bootClassPathFiles,classPathFiles);
  List<ClasspathEntry> bootclasspathObjects=new ArrayList<ClasspathEntry>();
  for (  Path path : clazzes.getBootclasspathPaths()) {
    ClasspathEntry entry=createClasspathEntry(path);
    processClasspathEntry(entry);
    bootclasspathObjects.add(entry);
  }
  List<ClasspathEntry> classpathObjects=new ArrayList<ClasspathEntry>();
  for (  Path path : clazzes.getClasspathPaths()) {
    ClasspathEntry entry=createClasspathEntry(path);
    processClasspathEntry(entry);
    classpathObjects.add(entry);
  }
  output.mkdirs();
  buildExecutable();
  if (run) {
    runTarget(bootclasspathObjects,classpathObjects);
  }
 else {
    FileUtils.copyFileToDirectory(new File(new File(home,"lib"),"libnullvm.so"),output);
    FileUtils.copyFileToDirectory(new File(new File(home,"lib"),"libnullvm-rt.so"),output);
    FileUtils.copyFileToDirectory(new File(new File(home,"lib"),"libgc.so.1"),output);
    File libBoot=new File(new File(output,"lib"),"boot");
    libBoot.mkdirs();
    File libMain=new File(new File(output,"lib"),"main");
    libMain.mkdirs();
    String bootDirString=libBoot.getAbsolutePath().substring(output.getAbsolutePath().length() + 1);
    String mainDirString=libMain.getAbsolutePath().substring(output.getAbsolutePath().length() + 1);
    Properties bootEntriesProps=new Properties();
    for (    ClasspathEntry entry : bootclasspathObjects) {
      bootEntriesProps.setProperty(bootDirString + File.separator + entry.getArchive().getName(),bootDirString + File.separator + entry.getDynamicLibrary().getName());
      stripArchive(entry.getArchive(),new File(libBoot,entry.getArchive().getName()));
      FileUtils.copyFileToDirectory(entry.getDynamicLibrary(),libBoot);
    }
    Properties mainEntriesProps=new Properties();
    for (    ClasspathEntry entry : classpathObjects) {
      mainEntriesProps.setProperty(mainDirString + File.separator + entry.getArchive().getName(),mainDirString + File.separator + entry.getDynamicLibrary().getName());
      stripArchive(entry.getArchive(),new File(libMain,entry.getArchive().getName()));
      FileUtils.copyFileToDirectory(entry.getDynamicLibrary(),libMain);
    }
    writeProperties(bootEntriesProps,new File(output,"bootclasspath"));
    writeProperties(mainEntriesProps,new File(output,"classpath"));
  }
}
