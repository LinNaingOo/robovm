{
  if (jarFile != null) {
    classPathFiles.add(jarFile);
  }
  if (mainClass == null) {
    throw new IllegalArgumentException("No main class specified on command line or in JAR manifest");
  }
  if (output == null) {
    throw new IllegalArgumentException("No output dir specified");
  }
  if (classpath == null) {
    throw new IllegalArgumentException("No classpath specified");
  }
  if (verbose) {
    stdout.println("Using main class: " + mainClass);
    stdout.println("Run arguments: " + runArgs);
  }
  classCache=new File(cache,"classes");
  classCache.mkdirs();
  libCache=new File(cache,"lib");
  libCache.mkdirs();
  if (target == null) {
    target=mainClass;
  }
  bootClassPathFiles.add(new File(home,"lib/nullvm-rt.jar"));
  if (bootclasspath != null) {
    for (    String p : bootclasspath.split(File.pathSeparator)) {
      bootClassPathFiles.add(new File(p));
    }
  }
  if (classpath != null) {
    for (    String p : classpath.split(File.pathSeparator)) {
      classPathFiles.add(new File(p));
    }
  }
  tmpFile=File.createTempFile("nullvm",".tmp");
  tmpFile.delete();
  tmpFile.mkdirs();
  opcodesFile=new File(tmpFile,"opcodes.ll");
  FileUtils.copyURLToFile(getClass().getResource("/opcodes.ll"),opcodesFile);
  mainCFile=new File(tmpFile,"main.c");
  FileUtils.copyURLToFile(getClass().getResource("/main.c"),mainCFile);
  symbolsMapFile=new File(tmpFile,"symbols.map");
  FileUtils.copyURLToFile(getClass().getResource("/symbols.map"),symbolsMapFile);
  Clazzes clazzes=new Clazzes(bootClassPathFiles,classPathFiles);
  List<PathObjectFiles> bootclasspathObjects=new ArrayList<PathObjectFiles>();
  for (  Path path : clazzes.getBootclasspathPaths()) {
    bootclasspathObjects.add(new PathObjectFiles(path,processClassFiles(path)));
  }
  List<PathObjectFiles> classpathObjects=new ArrayList<PathObjectFiles>();
  for (  Path path : clazzes.getClasspathPaths()) {
    classpathObjects.add(new PathObjectFiles(path,processClassFiles(path)));
  }
  output.mkdirs();
  buildExecutable();
  FileUtils.copyFileToDirectory(new File(new File(home,"lib"),"libnullvm.so"),output);
  FileUtils.copyFileToDirectory(new File(new File(home,"lib"),"libnullvm-rt.so"),output);
  FileUtils.copyFileToDirectory(new File(new File(home,"lib"),"libgc.so.1"),output);
  File libBoot=new File(new File(output,"lib"),"boot");
  libBoot.mkdirs();
  File libMain=new File(new File(output,"lib"),"main");
  libMain.mkdirs();
  List<String> bootJars=processPathObjectFiles(bootclasspathObjects,libBoot);
  List<String> mainJars=processPathObjectFiles(classpathObjects,libMain);
  FileUtils.writeStringToFile(new File(libBoot,"files"),StringUtils.join(bootJars,':'),"UTF-8");
  FileUtils.writeStringToFile(new File(libMain,"files"),StringUtils.join(mainJars,':'),"UTF-8");
  if (run) {
    runTarget();
  }
}
