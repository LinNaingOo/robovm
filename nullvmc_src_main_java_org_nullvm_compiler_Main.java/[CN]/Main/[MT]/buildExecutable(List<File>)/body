{
  File outFile=new File(output,target);
  if (verbose) {
    stdout.format("Building executable '%s'\n",outFile);
  }
  String gccPath="gcc";
  if (gccBin != null) {
    gccPath=gccBin.getAbsolutePath();
  }
  if (mainClass != null) {
    List<String> gccArgs=new ArrayList<String>();
    for (    File f : includeDirs) {
      gccArgs.add("-I");
      gccArgs.add(f.getAbsolutePath());
    }
    gccArgs.add("-I");
    gccArgs.add(new File(home,"include").getAbsolutePath());
    gccArgs.add("-I");
    gccArgs.add(new File(new File(home,"gc"),"include").getAbsolutePath());
    gccArgs.add("-I");
    gccArgs.add(new File(new File(home,"include"),"harmony").getAbsolutePath());
    File mainObjectFile=new File(mainCFile.getParentFile(),"main.o");
    exec(gccPath,"-c","-o",mainObjectFile,"-DNULLVM_MAIN_CLASS=" + mainClass.replace('.','/'),"-DLINUX","-DLINUX_X86_64","-DHYX86_64","-DIPv6_FUNCTION_SUPPORT","-DHYPORT_LIBRARY_DEFINE","-g",gccOpts,gccArgs,mainCFile);
    files.add(mainObjectFile);
  }
  List<String> ldArgs=new ArrayList<String>();
  for (  File f : libDirs) {
    ldArgs.add("-L");
    ldArgs.add(f.getAbsolutePath());
  }
  ldArgs.add("-L");
  ldArgs.add(new File(home,"lib").getAbsolutePath());
  ldArgs.add("-L");
  ldArgs.add(new File(new File(home,"gc"),"lib").getAbsolutePath());
  List<File> objectFileArgs=new ArrayList<File>();
  List<String> libArgs=new ArrayList<String>();
  for (  File f : files) {
    if (f.getName().endsWith(".a")) {
      ldArgs.add("-L");
      ldArgs.add(f.getParentFile().getAbsolutePath());
      libArgs.add("-l:" + f.getName());
    }
 else {
      objectFileArgs.add(f);
    }
  }
  exec(gccPath,"-o",outFile,"-g","-Wl,--version-script",symbolsMapFile,gccOpts,"-rdynamic",ldArgs,objectFileArgs,"-lnullvm","-lnullvm-rt","-lm","-ldl","-lpthread","-Wl,--whole-archive",libArgs,"-Wl,--no-whole-archive","-Wl,-Bstatic","-lgc","-Wl,-Bdynamic");
}
