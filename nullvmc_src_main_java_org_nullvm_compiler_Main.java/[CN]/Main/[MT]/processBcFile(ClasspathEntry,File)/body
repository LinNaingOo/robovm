{
  File outFile=changeExt(rebase(f,entry.getLlvmCacheDir(),entry.getObjectCacheDir()),"s");
  if (!clean && outFile.exists() && outFile.lastModified() >= f.lastModified()) {
    if (verbose) {
      stdout.println("Skipping unchanged LLVM bitcode file: " + f);
    }
    return processGccFile(entry,outFile);
  }
  if (verbose) {
    stdout.format("Compiling LLVM bitcode file '%s' to assembler file '%s'\n",f,outFile);
  }
  outFile.getParentFile().mkdirs();
  String llcPath="llc";
  String optPath="opt";
  if (llvmBinDir != null) {
    llcPath=new File(llvmBinDir,"llc").getAbsolutePath();
    optPath=new File(llvmBinDir,"opt").getAbsolutePath();
  }
  List<String> opts=null;
  File outOptedFile=changeExt(f,(debug ? "debug" : "release") + ".opted.bc");
  if (clean || !outOptedFile.exists() || outOptedFile.lastModified() < f.lastModified()) {
    opts=new ArrayList<String>(optOpts);
    opts.add("-mem2reg");
    opts.add("-always-inline");
    if (!debug) {
      opts.addAll(Arrays.asList(("-preverify -domtree -verify -lowersetjmp -globalopt -ipsccp " + "-deadargelim -instcombine -simplifycfg -basiccg -prune-eh " + "-functionattrs -argpromotion -domtree -domfrontier "+ "-scalarrepl -simplify-libcalls -instcombine -lazy-value-info "+ "-jump-threading -simplifycfg -instcombine "+ "-simplifycfg -reassociate -domtree -loops -loop-simplify "+ "-lcssa -loop-rotate -licm -lcssa -loop-unswitch -instcombine "+ "-scalar-evolution -loop-simplify -lcssa -iv-users -indvars "+ "-loop-deletion -loop-unroll -instcombine -memdep -gvn -memdep "+ "-memcpyopt -sccp -instcombine -lazy-value-info -jump-threading "+ "-correlated-propagation -domtree -memdep -dse -adce -simplifycfg "+ "-strip-dead-prototypes -print-used-types -deadtypeelim "+ "-globaldce -constmerge -preverify -domtree -verify").split(" ")));
    }
    exec(optPath,opts,"-o=" + outOptedFile.toString(),f);
  }
  opts=new ArrayList<String>(llcOpts);
  opts.add("-relocation-model=pic");
  opts.add("-march=" + (arch == Arch.x86_64 ? "x86-64" : arch.toString()));
  if (cpu != null) {
    opts.add("-mcpu=" + cpu);
  }
  exec(llcPath,opts,"-o=" + outFile.toString(),outOptedFile);
  return processGccFile(entry,outFile);
}
