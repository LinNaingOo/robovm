{
  File libFile=new File(new File(new File(libCache,input.getName()),hash(input)),"lib" + input.getName() + ".a");
  libFile.getParentFile().mkdirs();
  if (!clean && libFile.exists() && libFile.lastModified() >= input.lastModified()) {
    if (verbose) {
      stdout.println("Skipping unchanged archive: " + input);
    }
    return libFile;
  }
  ZipFile archive=null;
  try {
    archive=new ZipFile(input);
    List<File> objectFiles=new ArrayList<File>();
    Enumeration<? extends ZipEntry> entries=archive.entries();
    while (entries.hasMoreElements()) {
      ZipEntry entry=entries.nextElement();
      if (!entry.getName().toLowerCase().endsWith(".class")) {
        continue;
      }
      InputStream in=null;
      OutputStream out=null;
      try {
        in=archive.getInputStream(entry);
        objectFiles.add(processClassFile(entry.getName(),in,entry.getTime()));
      }
 catch (      Throwable t) {
        if (t instanceof IOException) {
          throw (IOException)t;
        }
        if (t instanceof RuntimeException) {
          throw (RuntimeException)t;
        }
        throw new RuntimeException(t);
      }
 finally {
        IOUtils.closeQuietly(in);
        IOUtils.closeQuietly(out);
      }
    }
    return buildLibrary(objectFiles,libFile);
  }
  finally {
    try {
      archive.close();
    }
 catch (    Throwable t) {
    }
  }
}
