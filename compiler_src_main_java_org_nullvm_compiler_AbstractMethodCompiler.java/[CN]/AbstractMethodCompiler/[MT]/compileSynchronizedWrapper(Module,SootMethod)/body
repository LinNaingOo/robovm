{
  String targetName=mangleMethod(method);
  Function function=createFunction(targetName + "_synchronized",method,Linkage.external,FunctionAttribute.noinline);
  module.addFunction(function);
  FunctionType functionType=function.getType();
  FunctionRef target=new FunctionRef(targetName,functionType);
  Value monitor=null;
  if (method.isStatic()) {
    FunctionRef fn=new FunctionRef(mangleClass(sootMethod.getDeclaringClass()) + "_ldc",new FunctionType(OBJECT_PTR,ENV_PTR));
    monitor=call(function,fn,ENV);
  }
 else {
    monitor=new VariableRef("this",OBJECT_PTR);
  }
  String[] parameterNames=function.getParameterNames();
  Type[] parameterTypes=function.getType().getParameterTypes();
  Value[] args=new Value[parameterNames.length];
  for (int i=0; i < args.length; i++) {
    args[i]=new VariableRef(parameterNames[i],parameterTypes[i]);
  }
  call(function,NVM_BC_MONITOR_ENTER,ENV,monitor);
  BasicBlockRef bbSuccess=function.newBasicBlockRef(new Label("success"));
  BasicBlockRef bbFailure=function.newBasicBlockRef(new Label("failure"));
  Value result=invoke(function,target,bbSuccess,bbFailure,args);
  function.newBasicBlock(new Label("success"));
  call(function,NVM_BC_MONITOR_EXIT,ENV,monitor);
  function.add(new Ret(result));
  function.newBasicBlock(new Label("failure"));
  call(function,NVM_BC_MONITOR_EXIT,ENV,monitor);
  Variable ehptr=function.newVariable(I8_PTR);
  function.add(new Call(ehptr,LLVM_EH_EXCEPTION,new Value[0]));
  call(function,LLVM_EH_SELECTOR,ehptr.ref(),new ConstantBitcast(NVM_BC_PERSONALITY,I8_PTR),new IntegerConstant(1));
  call(function,NVM_BC_RETHROW,ENV);
  function.add(new Unreachable());
}
