{
  final Composite parent=getFieldEditorParent();
  ComboFieldEditor archFieldEditor=new ComboFieldEditor(PREFERENCE_INCREMENTAL_BUILD_ARCH,"Default arch:",new String[][]{{"Auto (build for current host)",ARCH_AUTO},{Arch.armv6.toString(),Arch.armv6.toString()},{Arch.armv7.toString(),Arch.armv7.toString()},{Arch.thumbv6.toString(),Arch.thumbv6.toString()},{Arch.thumbv7.toString(),Arch.thumbv7.toString()},{Arch.x86.toString(),Arch.x86.toString()}},parent);
  addField(archFieldEditor);
  ComboFieldEditor osFieldEditor=new ComboFieldEditor(PREFERENCE_INCREMENTAL_BUILD_OS,"Default OS:",new String[][]{{"Auto (build for current host)",OS_AUTO},{OS.macosx.toString(),OS.macosx.toString()},{OS.ios.toString(),OS.ios.toString()},{OS.linux.toString(),OS.linux.toString()}},parent);
  addField(osFieldEditor);
  final BoolFieldEditor useBundledRoboVMEditor=new BoolFieldEditor(PREFERENCE_USE_BUNDLED_ROBOVM,"Use bundled RoboVM",parent);
  final RequiredDirectoryFieldEditor roboVMHomeFieldEditor=new RequiredDirectoryFieldEditor(PREFERENCE_ROBOVM_HOME_DIR,"RoboVM home:",parent){
    @Override protected boolean validateDir(    File dir){
      File lib=new File(dir,"lib");
      File rt=new File(lib,"robovm-rt.jar");
      return lib.exists() && lib.isDirectory() && rt.exists()&& rt.isFile();
    }
  }
;
  roboVMHomeFieldEditor.setErrorMessage("RoboVM home value is invalid");
  addField(useBundledRoboVMEditor);
  addField(roboVMHomeFieldEditor);
  useBundledRoboVMEditor.getCheckbox().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean b=useBundledRoboVMEditor.getCheckbox().getSelection();
      roboVMHomeFieldEditor.setEnabled(!b);
      if (b) {
        roboVMHomeFieldEditor.setStringValue("");
      }
 else {
        roboVMHomeFieldEditor.focus();
      }
      roboVMHomeFieldEditor.revalidate();
      RoboVMPreferencePage.this.checkState();
      if (!roboVMHomeFieldEditor.isValid()) {
        RoboVMPreferencePage.this.setErrorMessage(roboVMHomeFieldEditor.getErrorMessage());
      }
    }
  }
);
  final BoolFieldEditor useSystemLlvmEditor=new BoolFieldEditor(PREFERENCE_USE_SYSTEM_LLVM,"Use system LLVM",parent);
  final RequiredDirectoryFieldEditor llvmHomeDirEditor=new RequiredDirectoryFieldEditor(PREFERENCE_LLVM_HOME_DIR,"LLVM home:",parent){
    @Override protected boolean validateDir(    File dir){
      File llc=new File(new File(dir,"bin"),"llc");
      File opt=new File(new File(dir,"bin"),"opt");
      return llc.exists() && llc.isFile() && llc.canExecute()&& opt.exists()&& opt.isFile()&& opt.canExecute();
    }
  }
;
  llvmHomeDirEditor.setErrorMessage("LLVM home value is invalid");
  addField(useSystemLlvmEditor);
  addField(llvmHomeDirEditor);
  useSystemLlvmEditor.getCheckbox().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean b=useSystemLlvmEditor.getCheckbox().getSelection();
      llvmHomeDirEditor.setEnabled(!b);
      if (b) {
        llvmHomeDirEditor.setStringValue("");
      }
 else {
        llvmHomeDirEditor.focus();
      }
      llvmHomeDirEditor.revalidate();
      RoboVMPreferencePage.this.checkState();
    }
  }
);
  if (RoboVMPlugin.getDefault().getPreferenceStore().getBoolean(PREFERENCE_USE_BUNDLED_ROBOVM)) {
    roboVMHomeFieldEditor.setEnabled(false);
    roboVMHomeFieldEditor.setStringValue("");
  }
  if (RoboVMPlugin.getDefault().getPreferenceStore().getBoolean(PREFERENCE_USE_SYSTEM_LLVM)) {
    llvmHomeDirEditor.setEnabled(false);
    llvmHomeDirEditor.setStringValue("");
  }
}
