{
  long scanOffset=mRaf.length() - ENDHDR;
  if (scanOffset < 0) {
    throw new ZipException("File too short to be a zip file: " + mRaf.length());
  }
  long stopOffset=scanOffset - 65536;
  if (stopOffset < 0) {
    stopOffset=0;
  }
  final int ENDHEADERMAGIC=0x06054b50;
  while (true) {
    mRaf.seek(scanOffset);
    if (Integer.reverseBytes(mRaf.readInt()) == ENDHEADERMAGIC) {
      break;
    }
    scanOffset--;
    if (scanOffset < stopOffset) {
      throw new ZipException("EOCD not found; not a Zip archive?");
    }
  }
  byte[] eocd=new byte[18];
  mRaf.readFully(eocd);
  BufferIterator it=HeapBufferIterator.iterator(eocd,0,eocd.length,ByteOrder.LITTLE_ENDIAN);
  int diskNumber=it.readShort() & 0xffff;
  int diskWithCentralDir=it.readShort() & 0xffff;
  int numEntries=it.readShort() & 0xffff;
  int totalNumEntries=it.readShort() & 0xffff;
  it.skip(4);
  int centralDirOffset=it.readInt();
  if (numEntries != totalNumEntries || diskNumber != 0 || diskWithCentralDir != 0) {
    throw new ZipException("spanned archives not supported");
  }
  RAFStream rafs=new RAFStream(mRaf,centralDirOffset);
  BufferedInputStream bin=new BufferedInputStream(rafs,4096);
  byte[] hdrBuf=new byte[CENHDR];
  for (int i=0; i < numEntries; ++i) {
    ZipEntry newEntry=new ZipEntry(hdrBuf,bin);
    mEntries.put(newEntry.getName(),newEntry);
  }
}
