{
  if (man == null || signatures.size() == 0) {
    return null;
  }
  Attributes attributes=man.getAttributes(name);
  if (attributes == null) {
    return null;
  }
  Vector<Certificate> certs=new Vector<Certificate>();
  Iterator<Map.Entry<String,HashMap<String,Attributes>>> it=signatures.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,HashMap<String,Attributes>> entry=it.next();
    HashMap<String,Attributes> hm=entry.getValue();
    if (hm.get(name) != null) {
      String signatureFile=entry.getKey();
      Vector<Certificate> newCerts=getSignerCertificates(signatureFile,certificates);
      Iterator<Certificate> iter=newCerts.iterator();
      while (iter.hasNext()) {
        certs.add(iter.next());
      }
    }
  }
  if (certs.size() == 0) {
    return null;
  }
  Certificate[] certificatesArray=new Certificate[certs.size()];
  certs.toArray(certificatesArray);
  String algorithms=attributes.getValue("Digest-Algorithms");
  if (algorithms == null) {
    algorithms="SHA SHA1";
  }
  StringTokenizer tokens=new StringTokenizer(algorithms);
  while (tokens.hasMoreTokens()) {
    String algorithm=tokens.nextToken();
    String hash=attributes.getValue(algorithm + "-Digest");
    if (hash == null) {
      continue;
    }
    byte[] hashBytes;
    try {
      hashBytes=hash.getBytes("ISO-8859-1");
    }
 catch (    UnsupportedEncodingException e) {
      throw new RuntimeException(e.toString());
    }
    try {
      return new VerifierEntry(name,MessageDigest.getInstance(algorithm),hashBytes,certificatesArray);
    }
 catch (    NoSuchAlgorithmException e) {
    }
  }
  return null;
}
