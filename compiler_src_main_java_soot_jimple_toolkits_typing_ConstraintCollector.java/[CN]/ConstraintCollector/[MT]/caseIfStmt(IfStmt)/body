{
  if (uses) {
    ConditionExpr cond=(ConditionExpr)stmt.getCondition();
    BinopExpr expr=cond;
    Value lv=expr.getOp1();
    Value rv=expr.getOp2();
    TypeVariable lop;
    TypeVariable rop;
    if (lv instanceof Local) {
      lop=resolver.typeVariable((Local)lv);
    }
 else     if (lv instanceof DoubleConstant) {
      lop=resolver.typeVariable(DoubleType.v());
    }
 else     if (lv instanceof FloatConstant) {
      lop=resolver.typeVariable(FloatType.v());
    }
 else     if (lv instanceof IntConstant) {
      lop=resolver.typeVariable(IntType.v());
    }
 else     if (lv instanceof LongConstant) {
      lop=resolver.typeVariable(LongType.v());
    }
 else     if (lv instanceof NullConstant) {
      lop=resolver.typeVariable(NullType.v());
    }
 else     if (lv instanceof StringConstant) {
      lop=resolver.typeVariable(RefType.v("java.lang.String"));
    }
 else     if (lv instanceof ClassConstant) {
      lop=resolver.typeVariable(RefType.v("java.lang.Class"));
    }
 else {
      throw new RuntimeException("Unhandled binary expression left operand type: " + lv.getClass());
    }
    if (rv instanceof Local) {
      rop=resolver.typeVariable((Local)rv);
    }
 else     if (rv instanceof DoubleConstant) {
      rop=resolver.typeVariable(DoubleType.v());
    }
 else     if (rv instanceof FloatConstant) {
      rop=resolver.typeVariable(FloatType.v());
    }
 else     if (rv instanceof IntConstant) {
      rop=resolver.typeVariable(IntType.v());
    }
 else     if (rv instanceof LongConstant) {
      rop=resolver.typeVariable(LongType.v());
    }
 else     if (rv instanceof NullConstant) {
      rop=resolver.typeVariable(NullType.v());
    }
 else     if (rv instanceof StringConstant) {
      rop=resolver.typeVariable(RefType.v("java.lang.String"));
    }
 else     if (rv instanceof ClassConstant) {
      rop=resolver.typeVariable(RefType.v("java.lang.Class"));
    }
 else {
      throw new RuntimeException("Unhandled binary expression right operand type: " + rv.getClass());
    }
    TypeVariable common=resolver.typeVariable();
    rop.addParent(common);
    lop.addParent(common);
  }
}
