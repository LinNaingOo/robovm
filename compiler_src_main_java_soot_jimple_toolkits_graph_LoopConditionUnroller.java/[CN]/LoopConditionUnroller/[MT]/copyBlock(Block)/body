{
  Map<Unit,List> traps=getTraps();
  Set<Trap> openedTraps=new HashSet<Trap>();
  Map<Trap,Trap> copiedTraps=new HashMap<Trap,Trap>();
  Chain unitChain=body.getUnits();
  Unit tail=block.getTail();
  Unit immediateSucc=(Unit)unitChain.getSuccOf(tail);
  Unit newGoto=insertGotoAfter(tail,immediateSucc);
  Unit last=newGoto;
  boolean first=true;
  Unit copiedHead=null;
  for (Unit currentUnit=block.getHead(); currentUnit != newGoto; currentUnit=(Unit)unitChain.getSuccOf(currentUnit)) {
    last=insertCloneAfter(unitChain,last,currentUnit);
    if (first) {
      first=false;
      copiedHead=last;
    }
    List currentTraps=traps.get(currentUnit);
    if (currentTraps != null) {
      Iterator trapIt=currentTraps.iterator();
      while (trapIt.hasNext()) {
        Trap trap=(Trap)trapIt.next();
        if (trap.getBeginUnit() == currentUnit) {
          Trap copiedTrap=(Trap)trap.clone();
          copiedTrap.setBeginUnit(last);
          copiedTraps.put(trap,copiedTrap);
          openedTraps.add(copiedTrap);
          body.getTraps().insertAfter(copiedTrap,trap);
        }
        if (trap.getEndUnit() == currentUnit) {
          Trap copiedTrap=copiedTraps.get(trap);
          if (copiedTrap == null) {
            copiedTrap=(Trap)trap.clone();
            copiedTrap.setBeginUnit(copiedHead);
            body.getTraps().insertAfter(copiedTrap,trap);
          }
 else {
            openedTraps.remove(copiedTrap);
          }
          copiedTrap.setEndUnit(last);
        }
      }
    }
  }
  Iterator<Trap> openedIterator=openedTraps.iterator();
  while (openedIterator.hasNext()) {
    openedIterator.next().setEndUnit(last);
  }
  return copiedHead;
}
