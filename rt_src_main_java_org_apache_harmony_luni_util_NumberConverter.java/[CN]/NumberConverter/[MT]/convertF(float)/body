{
  int p=127 + 23;
  int signMask=0x80000000;
  int eMask=0x7F800000;
  int fMask=0x007FFFFF;
  int inputNumberBits=Float.floatToIntBits(inputNumber);
  String signString=(inputNumberBits & signMask) == 0 ? "" : "-";
  int e=(inputNumberBits & eMask) >> 23;
  int f=inputNumberBits & fMask;
  boolean mantissaIsZero=f == 0;
  int pow=0, numBits=23;
  if (e == 255)   return mantissaIsZero ? signString + "Infinity" : "NaN";
  if (e == 0) {
    if (mantissaIsZero)     return signString + "0.0";
    pow=1 - p;
    if (f < 8) {
      f=f << 2;
      pow-=2;
    }
    int ff=f;
    while ((ff & 0x00800000) == 0) {
      ff=ff << 1;
      numBits--;
    }
  }
 else {
    f=f | 0x00800000;
    pow=e - p;
  }
  if (-59 < pow && pow < 35 || (pow == -59 && !mantissaIsZero))   longDigitGenerator(f,pow,e == 0,mantissaIsZero,numBits);
 else   bigIntDigitGeneratorInstImpl(f,pow,e == 0,mantissaIsZero,numBits);
  if (inputNumber >= 1e7f || inputNumber <= -1e7f || (inputNumber > -1e-3f && inputNumber < 1e-3f))   return signString + freeFormatExponential();
  return signString + freeFormat();
}
