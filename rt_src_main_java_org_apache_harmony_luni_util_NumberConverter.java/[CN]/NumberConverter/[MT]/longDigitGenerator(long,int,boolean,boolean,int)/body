{
  long R, S, M;
  if (e >= 0) {
    M=1l << e;
    if (!mantissaIsZero) {
      R=f << (e + 1);
      S=2;
    }
 else {
      R=f << (e + 2);
      S=4;
    }
  }
 else {
    M=1;
    if (isDenormalized || !mantissaIsZero) {
      R=f << 1;
      S=1l << (1 - e);
    }
 else {
      R=f << 2;
      S=1l << (2 - e);
    }
  }
  int k=(int)Math.ceil((e + p - 1) * invLogOfTenBaseTwo - 1e-10);
  if (k > 0) {
    S=S * TEN_TO_THE[k];
  }
 else   if (k < 0) {
    long scale=TEN_TO_THE[-k];
    R=R * scale;
    M=M == 1 ? scale : M * scale;
  }
  if (R + M > S) {
    firstK=k;
  }
 else {
    firstK=k - 1;
    R=R * 10;
    M=M * 10;
  }
  getCount=setCount=0;
  boolean low, high;
  int U;
  long[] Si=new long[]{S,S << 1,S << 2,S << 3};
  while (true) {
    U=0;
    long remainder;
    for (int i=3; i >= 0; i--) {
      remainder=R - Si[i];
      if (remainder >= 0) {
        R=remainder;
        U+=1 << i;
      }
    }
    low=R < M;
    high=R + M > S;
    if (low || high)     break;
    R=R * 10;
    M=M * 10;
    uArray[setCount++]=U;
  }
  if (low && !high)   uArray[setCount++]=U;
 else   if (high && !low)   uArray[setCount++]=U + 1;
 else   if ((R << 1) < S)   uArray[setCount++]=U;
 else   uArray[setCount++]=U + 1;
}
