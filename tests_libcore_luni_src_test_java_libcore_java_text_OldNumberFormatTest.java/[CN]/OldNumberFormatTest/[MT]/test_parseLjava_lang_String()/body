{
  NumberFormat nf1=NumberFormat.getInstance();
  try {
    assertEquals("Test1: NumberFormat.getInstance().parse(\"1234567890.1\") returned wrong number",new Double(1234567890.1),nf1.parse("1234567890.1"));
  }
 catch (  java.text.ParseException pe) {
    fail("java.text.ParseException is thrown for 1234567890.1");
  }
  try {
    assertEquals("Test2: NumberFormat.getInstance().parse(\"-1234567890.1\") returned wrong number",new Double(-1234567890.1),nf1.parse("-1,234,567,890.1"));
  }
 catch (  java.text.ParseException pe) {
    fail("java.text.ParseException is thrown for -1,234,567,890.1");
  }
  try {
    nf1.parse("@1,234,567,8901");
    fail("java.text.ParseException is not thrown for 1,234,567,890z1");
  }
 catch (  java.text.ParseException pe) {
  }
  nf1=NumberFormat.getPercentInstance();
  try {
    assertEquals("Test3: NumberFormat.getPercentInstance().parse(\"-123%\") returned wrong number",new Double(-1.23),nf1.parse("-123%"));
  }
 catch (  java.text.ParseException pe) {
    fail("java.text.ParseException is thrown for -123%");
  }
  nf1=NumberFormat.getCurrencyInstance();
  try {
    assertEquals("Test4: NumberFormat.getCurrencyInstance().parse(\"$123\") returned wrong number",new Long(123),nf1.parse("$123"));
  }
 catch (  java.text.ParseException pe) {
    fail("java.text.ParseException is thrown for $123");
  }
  try {
    assertEquals("Test4: NumberFormat.getCurrencyInstance().parse(\"$123abc\") returned wrong number",new Long(123),nf1.parse("$123abc"));
  }
 catch (  java.text.ParseException pe) {
    fail("java.text.ParseException is thrown for $123");
  }
  nf1=NumberFormat.getIntegerInstance();
  try {
    assertEquals("Test5: NumberFormat.getIntegerInstance().parse(\"-123.123\") returned wrong number",nf1.parseObject("-123.123"),nf1.parse("-123.123"));
  }
 catch (  java.text.ParseException pe) {
    fail("java.text.ParseException is thrown for $123");
  }
}
