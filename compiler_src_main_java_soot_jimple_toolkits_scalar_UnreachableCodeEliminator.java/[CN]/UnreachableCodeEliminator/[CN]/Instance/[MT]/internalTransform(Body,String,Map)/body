{
  StmtBody body=(StmtBody)b;
  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "] Eliminating unreachable code...");
  numPruned=0;
  if (PhaseOptions.getBoolean(options,"remove-unreachable-traps")) {
    stmtGraph=new ExceptionalUnitGraph(body);
  }
 else {
    stmtGraph=new ExceptionalUnitGraph(body,PedanticThrowAnalysis.v(),false);
  }
  visited=new HashSet<Object>();
  Map<Unit,Set> handlerToTraps=new HashMap<Unit,Set>();
  for (Iterator trapIt=body.getTraps().iterator(); trapIt.hasNext(); ) {
    final Trap trap=(Trap)trapIt.next();
    Unit handler=trap.getHandlerUnit();
    Set<Trap> handlersTraps=handlerToTraps.get(handler);
    if (handlersTraps == null) {
      handlersTraps=new ArraySet(3);
      handlerToTraps.put(handler,handlersTraps);
    }
    handlersTraps.add(trap);
  }
  if (!body.getUnits().isEmpty()) {
    LinkedList<Unit> startPoints=new LinkedList<Unit>();
    startPoints.addLast(body.getUnits().getFirst());
    visitStmts(startPoints);
  }
  Iterator stmtIt=body.getUnits().snapshotIterator();
  while (stmtIt.hasNext()) {
    Stmt stmt=(Stmt)stmtIt.next();
    if (!visited.contains(stmt)) {
      body.getUnits().remove(stmt);
      Set traps=handlerToTraps.get(stmt);
      if (traps != null) {
        for (Iterator trapIt=traps.iterator(); trapIt.hasNext(); ) {
          final Trap trap=(Trap)trapIt.next();
          body.getTraps().remove(trap);
        }
      }
      numPruned++;
    }
  }
  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "]     Removed "+ numPruned+ " statements...");
{
    Iterator trapIt=b.getTraps().iterator();
    while (trapIt.hasNext()) {
      Trap t=(Trap)trapIt.next();
      if (t.getBeginUnit() == t.getEndUnit())       trapIt.remove();
    }
  }
}
