{
  try {
    if (os == null) {
      File f=new File("DTMDump" + ((Object)this).hashCode() + ".txt");
      System.err.println("Dumping... " + f.getAbsolutePath());
      os=new FileOutputStream(f);
    }
    PrintStream ps=new PrintStream(os);
    while (nextNode()) {
    }
    int nRecords=m_size;
    ps.println("Total nodes: " + nRecords);
    for (int index=0; index < nRecords; ++index) {
      int i=makeNodeHandle(index);
      ps.println("=========== index=" + index + " handle="+ i+ " ===========");
      ps.println("NodeName: " + getNodeName(i));
      ps.println("NodeNameX: " + getNodeNameX(i));
      ps.println("LocalName: " + getLocalName(i));
      ps.println("NamespaceURI: " + getNamespaceURI(i));
      ps.println("Prefix: " + getPrefix(i));
      int exTypeID=_exptype(index);
      ps.println("Expanded Type ID: " + Integer.toHexString(exTypeID));
      int type=_type(index);
      String typestring;
switch (type) {
case DTM.ATTRIBUTE_NODE:
        typestring="ATTRIBUTE_NODE";
      break;
case DTM.CDATA_SECTION_NODE:
    typestring="CDATA_SECTION_NODE";
  break;
case DTM.COMMENT_NODE:
typestring="COMMENT_NODE";
break;
case DTM.DOCUMENT_FRAGMENT_NODE:
typestring="DOCUMENT_FRAGMENT_NODE";
break;
case DTM.DOCUMENT_NODE:
typestring="DOCUMENT_NODE";
break;
case DTM.DOCUMENT_TYPE_NODE:
typestring="DOCUMENT_NODE";
break;
case DTM.ELEMENT_NODE:
typestring="ELEMENT_NODE";
break;
case DTM.ENTITY_NODE:
typestring="ENTITY_NODE";
break;
case DTM.ENTITY_REFERENCE_NODE:
typestring="ENTITY_REFERENCE_NODE";
break;
case DTM.NAMESPACE_NODE:
typestring="NAMESPACE_NODE";
break;
case DTM.NOTATION_NODE:
typestring="NOTATION_NODE";
break;
case DTM.NULL:
typestring="NULL";
break;
case DTM.PROCESSING_INSTRUCTION_NODE:
typestring="PROCESSING_INSTRUCTION_NODE";
break;
case DTM.TEXT_NODE:
typestring="TEXT_NODE";
break;
default :
typestring="Unknown!";
break;
}
ps.println("Type: " + typestring);
int firstChild=_firstch(index);
if (DTM.NULL == firstChild) ps.println("First child: DTM.NULL");
 else if (NOTPROCESSED == firstChild) ps.println("First child: NOTPROCESSED");
 else ps.println("First child: " + firstChild);
if (m_prevsib != null) {
int prevSibling=_prevsib(index);
if (DTM.NULL == prevSibling) ps.println("Prev sibling: DTM.NULL");
 else if (NOTPROCESSED == prevSibling) ps.println("Prev sibling: NOTPROCESSED");
 else ps.println("Prev sibling: " + prevSibling);
}
int nextSibling=_nextsib(index);
if (DTM.NULL == nextSibling) ps.println("Next sibling: DTM.NULL");
 else if (NOTPROCESSED == nextSibling) ps.println("Next sibling: NOTPROCESSED");
 else ps.println("Next sibling: " + nextSibling);
int parent=_parent(index);
if (DTM.NULL == parent) ps.println("Parent: DTM.NULL");
 else if (NOTPROCESSED == parent) ps.println("Parent: NOTPROCESSED");
 else ps.println("Parent: " + parent);
int level=_level(index);
ps.println("Level: " + level);
ps.println("Node Value: " + getNodeValue(i));
ps.println("String Value: " + getStringValue(i));
}
}
 catch (IOException ioe) {
ioe.printStackTrace(System.err);
throw new RuntimeException(ioe.getMessage());
}
}
