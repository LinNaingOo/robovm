{
  soot.Type sootType=method.getParameterType(i);
  if (hasPointerAnnotation(method,i)) {
    if (!sootType.equals(LongType.v())) {
      throw new IllegalArgumentException("Parameter " + (i + 1) + " of "+ anno+ " annotated method "+ method+ " must be of type long when annotated with @Pointer.");
    }
    return I8_PTR;
  }
  if (hasMachineSizedFloatAnnotation(method,i)) {
    if (!sootType.equals(DoubleType.v()) && !sootType.equals(FloatType.v())) {
      throw new IllegalArgumentException("Parameter " + (i + 1) + " of "+ anno+ " annotated method "+ method+ " must be of type float or double when annotated with @MachineSizedFloat.");
    }
    return config.getArch().is32Bit() ? FLOAT : DOUBLE;
  }
  if (hasMachineSizedSIntAnnotation(method,i) || hasMachineSizedUIntAnnotation(method,i)) {
    if (!sootType.equals(LongType.v())) {
      throw new IllegalArgumentException("Parameter " + (i + 1) + " of "+ anno+ " annotated method "+ method+ " must be of type long when annotated with "+ "@MachineSizedSInt or @MachineSizedUInt");
    }
    return config.getArch().is32Bit() ? I32 : I64;
  }
  if (hasStructRetAnnotation(method,i)) {
    if (i > 0) {
      throw new IllegalArgumentException("Parameter " + (i + 1) + " of "+ anno+ " annotated method "+ method+ " cannot be annotated with @StructRet. Only the first"+ " parameter may have this annotation.");
    }
    if (!isStruct(sootType)) {
      throw new IllegalArgumentException("Parameter " + (i + 1) + " of "+ anno+ " annotated method "+ method+ " must be a sub class of Struct when annotated with @StructRet.");
    }
    return new PointerType(getStructType(sootType));
  }
  if (isStruct(sootType)) {
    StructureType structType=getStructType(sootType);
    if (hasByValAnnotation(method,i)) {
      return getStructType(sootType);
    }
    return new PointerType(structType);
  }
 else   if (isNativeObject(sootType)) {
    return I8_PTR;
  }
 else   if (sootType instanceof PrimType) {
    return getType(sootType);
  }
  MarshalerMethod marshalerMethod=config.getMarshalerLookup().findMarshalerMethod(new MarshalSite(method,i));
  if (marshalerMethod instanceof ValueMarshalerMethod) {
    return ((ValueMarshalerMethod)marshalerMethod).getNativeType(config.getArch());
  }
 else {
    return I8_PTR;
  }
}
