{
  Type returnType=getReturnType(anno,method);
  boolean varargs=considerVariadic && hasVariadicAnnotation(method);
  int variadicIndex=varargs ? getVariadicParameterIndex(method) : Integer.MAX_VALUE;
  List<Type> paramTypes=new ArrayList<>();
  for (int i=dynamic ? 1 : 0; i < method.getParameterCount(); i++) {
    if (i == variadicIndex) {
      break;
    }
    paramTypes.add(getParameterType(anno,method,i));
  }
  if (!method.isStatic()) {
    int idx=hasStructRetAnnotation(method,0) ? 1 : 0;
    soot.Type sootType=method.getDeclaringClass().getType();
    if (isStruct(sootType)) {
      paramTypes.add(idx,new PointerType(getStructType(sootType)));
    }
 else     if (isNativeObject(sootType)) {
      paramTypes.add(idx,I8_PTR);
    }
 else {
      throw new IllegalArgumentException("Receiver of non static " + anno + " method "+ method+ " must either be a Struct or a NativeObject");
    }
  }
  return new FunctionType(returnType,varargs,paramTypes.toArray(new Type[paramTypes.size()]));
}
