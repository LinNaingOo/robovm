{
  int result=0;
  NodeSortKey k=(NodeSortKey)m_keys.elementAt(kIndex);
  if (k.m_treatAsNumbers) {
    double n1Num, n2Num;
    if (kIndex == 0) {
      n1Num=((Double)n1.m_key1Value).doubleValue();
      n2Num=((Double)n2.m_key1Value).doubleValue();
    }
 else     if (kIndex == 1) {
      n1Num=((Double)n1.m_key2Value).doubleValue();
      n2Num=((Double)n2.m_key2Value).doubleValue();
    }
 else {
      XObject r1=k.m_selectPat.execute(m_execContext,n1.m_node,k.m_namespaceContext);
      XObject r2=k.m_selectPat.execute(m_execContext,n2.m_node,k.m_namespaceContext);
      n1Num=r1.num();
      n2Num=r2.num();
    }
    if ((n1Num == n2Num) && ((kIndex + 1) < m_keys.size())) {
      result=compare(n1,n2,kIndex + 1,support);
    }
 else {
      double diff;
      if (Double.isNaN(n1Num)) {
        if (Double.isNaN(n2Num))         diff=0.0;
 else         diff=-1;
      }
 else       if (Double.isNaN(n2Num))       diff=1;
 else       diff=n1Num - n2Num;
      result=(int)((diff < 0.0) ? (k.m_descending ? 1 : -1) : (diff > 0.0) ? (k.m_descending ? -1 : 1) : 0);
    }
  }
 else {
    CollationKey n1String, n2String;
    if (kIndex == 0) {
      n1String=(CollationKey)n1.m_key1Value;
      n2String=(CollationKey)n2.m_key1Value;
    }
 else     if (kIndex == 1) {
      n1String=(CollationKey)n1.m_key2Value;
      n2String=(CollationKey)n2.m_key2Value;
    }
 else {
      XObject r1=k.m_selectPat.execute(m_execContext,n1.m_node,k.m_namespaceContext);
      XObject r2=k.m_selectPat.execute(m_execContext,n2.m_node,k.m_namespaceContext);
      n1String=k.m_col.getCollationKey(r1.str());
      n2String=k.m_col.getCollationKey(r2.str());
    }
    result=n1String.compareTo(n2String);
    if (k.m_caseOrderUpper) {
      String tempN1=n1String.getSourceString().toLowerCase();
      String tempN2=n2String.getSourceString().toLowerCase();
      if (tempN1.equals(tempN2)) {
        result=result == 0 ? 0 : -result;
      }
    }
    if (k.m_descending) {
      result=-result;
    }
  }
  if (0 == result) {
    if ((kIndex + 1) < m_keys.size()) {
      result=compare(n1,n2,kIndex + 1,support);
    }
  }
  if (0 == result) {
    DTM dtm=support.getDTM(n1.m_node);
    result=dtm.isNodeAfter(n1.m_node,n2.m_node) ? -1 : 1;
  }
  return result;
}
