{
  if (true) {
    return new CombinedDUAnalysis(graph);
  }
  return new CombinedAnalysis(){
    CombinedDUAnalysis combined=new CombinedDUAnalysis(graph);
    SimpleLocalDefs defs=new SimpleLocalDefs(graph);
    SimpleLocalUses uses=new SimpleLocalUses(graph,defs);
    SimpleLiveLocals live=new SimpleLiveLocals(graph);
    public List<Unit> getDefsOfAt(    Local l,    Unit s){
      HashSet<Unit> hs1=new HashSet<Unit>(combined.getDefsOfAt(l,s));
      HashSet<Unit> hs2=new HashSet<Unit>(defs.getDefsOfAt(l,s));
      if (!hs1.equals(hs2))       throw new RuntimeException("Defs of " + l + " in "+ s+ "\ncombined: "+ hs1+ "\nsimple: "+ hs2);
      return combined.getDefsOfAt(l,s);
    }
    public List getUsesOf(    Unit u){
      HashSet hs1=new HashSet(combined.getUsesOf(u));
      HashSet hs2=new HashSet(uses.getUsesOf(u));
      if (!hs1.equals(hs2))       throw new RuntimeException("Uses of " + u + "\ncombined: "+ hs1+ "\nsimple: "+ hs2);
      return combined.getUsesOf(u);
    }
    public List getLiveLocalsBefore(    Unit u){
      HashSet hs1=new HashSet(combined.getLiveLocalsBefore(u));
      HashSet hs2=new HashSet(live.getLiveLocalsBefore(u));
      if (!hs1.equals(hs2))       throw new RuntimeException("llb of " + u + "\ncombined: "+ hs1+ "\nsimple: "+ hs2);
      return combined.getLiveLocalsBefore(u);
    }
    public List getLiveLocalsAfter(    Unit u){
      HashSet hs1=new HashSet(combined.getLiveLocalsAfter(u));
      HashSet hs2=new HashSet(live.getLiveLocalsAfter(u));
      if (!hs1.equals(hs2))       throw new RuntimeException("lla of " + u + "\ncombined: "+ hs1+ "\nsimple: "+ hs2);
      return combined.getLiveLocalsAfter(u);
    }
  }
;
}
