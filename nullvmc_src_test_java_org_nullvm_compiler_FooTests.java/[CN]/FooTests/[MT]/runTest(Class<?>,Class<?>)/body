{
  String testName=testClass.getName();
  NullVMC nullvmc=new NullVMC();
  nullvmc.addInput(new File("src/test/c/launcher.c"));
  nullvmc.addInput(new File("src/test/c/native.c"));
  nullvmc.addInput(new File("target/rt-test-classes"));
  nullvmc.addInput(new File("target/test-classes/" + Type.getInternalName(testClass) + ".class"));
  nullvmc.addInput(new File("target/test-classes/" + Type.getInternalName(Echo.class) + ".class"));
  for (  Class<?> c : classes) {
    nullvmc.addInput(new File("target/test-classes/" + Type.getInternalName(c) + ".class"));
  }
  nullvmc.addLibDir(new File("../gc/lib"));
  nullvmc.addIncludeDir(new File("../gc/include"));
  nullvmc.setSkipRtLib(true);
  nullvmc.setClean(true);
  nullvmc.setWork(new File("target/" + testName + ".build"));
  nullvmc.setOutput(new File("target/" + testName));
  nullvmc.run();
  String actual=exec("target/" + testName,Type.getInternalName(testClass),LlvmUtil.mangleString(Type.getInternalName(testClass)));
  String expected=exec("java","-cp","target/classes:target/test-classes",testClass.getName());
  assertEquals(expected,actual);
}
