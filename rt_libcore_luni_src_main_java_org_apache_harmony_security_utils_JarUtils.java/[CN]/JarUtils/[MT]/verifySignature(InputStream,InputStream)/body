{
  BerInputStream bis=new BerInputStream(signatureBlock);
  ContentInfo info=(ContentInfo)ContentInfo.ASN1.decode(bis);
  SignedData signedData=info.getSignedData();
  if (signedData == null) {
    throw new IOException("No SignedData found");
  }
  Collection<org.apache.harmony.security.x509.Certificate> encCerts=signedData.getCertificates();
  if (encCerts.isEmpty()) {
    return null;
  }
  X509Certificate[] certs=new X509Certificate[encCerts.size()];
  int i=0;
  for (  org.apache.harmony.security.x509.Certificate encCert : encCerts) {
    certs[i++]=new X509CertImpl(encCert);
  }
  List<SignerInfo> sigInfos=signedData.getSignerInfos();
  SignerInfo sigInfo;
  if (!sigInfos.isEmpty()) {
    sigInfo=sigInfos.get(0);
  }
 else {
    return null;
  }
  X500Principal issuer=sigInfo.getIssuer();
  BigInteger snum=sigInfo.getSerialNumber();
  int issuerSertIndex=0;
  for (i=0; i < certs.length; i++) {
    if (issuer.equals(certs[i].getIssuerDN()) && snum.equals(certs[i].getSerialNumber())) {
      issuerSertIndex=i;
      break;
    }
  }
  if (i == certs.length) {
    return null;
  }
  if (certs[issuerSertIndex].hasUnsupportedCriticalExtension()) {
    throw new SecurityException("Can not recognize a critical extension");
  }
  final String daOid=sigInfo.getDigestAlgorithm();
  final String daName=sigInfo.getDigestAlgorithmName();
  final String deaOid=sigInfo.getDigestEncryptionAlgorithm();
  String alg=null;
  Signature sig=null;
  if (daOid != null && deaOid != null) {
    alg=daOid + "with" + deaOid;
    try {
      sig=Signature.getInstance(alg);
    }
 catch (    NoSuchAlgorithmException e) {
    }
    if (sig == null) {
      final String deaName=sigInfo.getDigestEncryptionAlgorithmName();
      alg=daName + "with" + deaName;
      try {
        sig=Signature.getInstance(alg);
      }
 catch (      NoSuchAlgorithmException e) {
      }
    }
  }
  if (sig == null && daOid != null) {
    alg=daOid;
    try {
      sig=Signature.getInstance(alg);
    }
 catch (    NoSuchAlgorithmException e) {
    }
    if (sig == null && daName != null) {
      alg=daName;
      try {
        sig=Signature.getInstance(alg);
      }
 catch (      NoSuchAlgorithmException e) {
      }
    }
  }
  if (sig == null) {
    return null;
  }
  sig.initVerify(certs[issuerSertIndex]);
  List<AttributeTypeAndValue> atr=sigInfo.getAuthenticatedAttributes();
  byte[] sfBytes=new byte[signature.available()];
  signature.read(sfBytes);
  if (atr == null) {
    sig.update(sfBytes);
  }
 else {
    sig.update(sigInfo.getEncodedAuthenticatedAttributes());
    byte[] existingDigest=null;
    for (    AttributeTypeAndValue a : atr) {
      if (Arrays.equals(a.getType().getOid(),MESSAGE_DIGEST_OID)) {
        if (existingDigest != null) {
          throw new SecurityException("Too many MessageDigest attributes");
        }
        Collection<?> entries=a.getValue().getValues(ASN1OctetString.getInstance());
        if (entries.size() != 1) {
          throw new SecurityException("Too many values for MessageDigest attribute");
        }
        existingDigest=(byte[])entries.iterator().next();
      }
    }
    if (existingDigest == null) {
      throw new SecurityException("Missing MessageDigest in Authenticated Attributes");
    }
    MessageDigest md=null;
    if (daOid != null) {
      md=MessageDigest.getInstance(daOid);
    }
    if (md == null && daName != null) {
      md=MessageDigest.getInstance(daName);
    }
    if (md == null) {
      return null;
    }
    byte[] computedDigest=md.digest(sfBytes);
    if (!Arrays.equals(existingDigest,computedDigest)) {
      throw new SecurityException("Incorrect MD");
    }
  }
  if (!sig.verify(sigInfo.getEncryptedDigest())) {
    throw new SecurityException("Incorrect signature");
  }
  return createChain(certs[issuerSertIndex],certs);
}
