{
  Pattern pattern=Pattern.compile("\\p{javaLowerCase}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaUpperCase}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaWhitespace}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaMirrored}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaDefined}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaDigit}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaIdentifierIgnorable}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaISOControl}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaJavaIdentifierPart}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaJavaIdentifierStart}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaLetter}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaLetterOrDigit}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaSpaceChar}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaTitleCase}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaUnicodeIdentifierPart}");
  assertNotNull(pattern);
  pattern=Pattern.compile("\\p{javaUnicodeIdentifierStart}");
  assertNotNull(pattern);
}
