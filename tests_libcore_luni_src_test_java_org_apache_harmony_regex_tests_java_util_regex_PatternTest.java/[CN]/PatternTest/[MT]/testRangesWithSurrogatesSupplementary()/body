{
  String patString="[abc\uD8D2]";
  String testString="\uD8D2";
  Pattern pat=Pattern.compile(patString);
  Matcher mat=pat.matcher(testString);
  assertTrue(mat.matches());
  testString="a";
  mat=pat.matcher(testString);
  assertTrue(mat.matches());
  testString="ef\uD8D2\uDD71gh";
  mat=pat.matcher(testString);
  assertFalse(mat.find());
  testString="ef\uD8D2gh";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  patString="[abc\uD8D3&&[c\uD8D3]]";
  testString="c";
  pat=Pattern.compile(patString);
  mat=pat.matcher(testString);
  assertTrue(mat.matches());
  testString="a";
  mat=pat.matcher(testString);
  assertFalse(mat.matches());
  testString="ef\uD8D3\uDD71gh";
  mat=pat.matcher(testString);
  assertFalse(mat.find());
  testString="ef\uD8D3gh";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  patString="[abc\uD8D3\uDBEE\uDF0C&&[c\uD8D3\uDBEE\uDF0C]]";
  testString="c";
  pat=Pattern.compile(patString);
  mat=pat.matcher(testString);
  assertTrue(mat.matches());
  testString="\uDBEE\uDF0C";
  mat=pat.matcher(testString);
  assertTrue(mat.matches());
  testString="ef\uD8D3\uDD71gh";
  mat=pat.matcher(testString);
  assertFalse(mat.find());
  testString="ef\uD8D3gh";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  patString="[abc\uDBFC]\uDDC2cd";
  testString="\uDBFC\uDDC2cd";
  pat=Pattern.compile(patString);
  mat=pat.matcher(testString);
  assertFalse(mat.matches());
  testString="a\uDDC2cd";
  mat=pat.matcher(testString);
  assertTrue(mat.matches());
}
