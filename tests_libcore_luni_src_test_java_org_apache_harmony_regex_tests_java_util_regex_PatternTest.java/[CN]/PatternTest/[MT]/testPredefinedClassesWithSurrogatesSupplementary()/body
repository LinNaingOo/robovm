{
  String patString="[123\\D]";
  String testString="a";
  Pattern pat=Pattern.compile(patString);
  Matcher mat=pat.matcher(testString);
  assertTrue(mat.find());
  testString="5";
  mat=pat.matcher(testString);
  assertFalse(mat.find());
  testString="3";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  testString="\uDFC4";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  testString="\uDADA";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  testString="\uDADA\uDFC4";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  patString="[123[^\\p{javaDigit}]]";
  testString="a";
  pat=Pattern.compile(patString);
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  testString="5";
  mat=pat.matcher(testString);
  assertFalse(mat.find());
  testString="3";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  testString="\uDFC4";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  testString="\uDADA";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  testString="\uDADA\uDFC4";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  patString="\\p{Cs}";
  testString="\uD916\uDE27";
  pat=Pattern.compile(patString);
  mat=pat.matcher(testString);
  testString="\uDE27\uD916";
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  patString="[\uD916\uDE271\uD91623&&[^\\p{Cs}]]";
  testString="1";
  pat=Pattern.compile(patString);
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  testString="\uD916";
  pat=Pattern.compile(patString);
  mat=pat.matcher(testString);
  assertFalse(mat.find());
  testString="\uD916\uDE27";
  pat=Pattern.compile(patString);
  mat=pat.matcher(testString);
  assertTrue(mat.find());
  patString="[a-\uD9A0\uDE8E]";
  testString="\uD9A0\uDE81";
  pat=Pattern.compile(patString);
  mat=pat.matcher(testString);
  assertTrue(mat.matches());
}
