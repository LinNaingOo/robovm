{
  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);
  final int RELATIVE_PATH_NOT_PERMITTED=0;
  final int RELATIVE_PATH_PERMITTED=1;
  final int RELATIVE_PATH_REQUIRED=2;
  int relativePathStatus=RELATIVE_PATH_NOT_PERMITTED;
  appendOp(2,OpCodes.OP_LOCATIONPATHPATTERN);
  if (lookahead('(',1) && (tokenIs(Keywords.FUNC_ID_STRING) || tokenIs(Keywords.FUNC_KEY_STRING))) {
    IdKeyPattern();
    if (tokenIs('/')) {
      nextToken();
      if (tokenIs('/')) {
        appendOp(4,OpCodes.MATCH_ANY_ANCESTOR);
        nextToken();
      }
 else {
        appendOp(4,OpCodes.MATCH_IMMEDIATE_ANCESTOR);
      }
      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);
      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_FUNCTEST);
      relativePathStatus=RELATIVE_PATH_REQUIRED;
    }
  }
 else   if (tokenIs('/')) {
    if (lookahead('/',1)) {
      appendOp(4,OpCodes.MATCH_ANY_ANCESTOR);
      nextToken();
      relativePathStatus=RELATIVE_PATH_REQUIRED;
    }
 else {
      appendOp(4,OpCodes.FROM_ROOT);
      relativePathStatus=RELATIVE_PATH_PERMITTED;
    }
    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);
    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_ROOT);
    nextToken();
  }
 else {
    relativePathStatus=RELATIVE_PATH_REQUIRED;
  }
  if (relativePathStatus != RELATIVE_PATH_NOT_PERMITTED) {
    if (!tokenIs('|') && (null != m_token)) {
      RelativePathPattern();
    }
 else     if (relativePathStatus == RELATIVE_PATH_REQUIRED) {
      error(XPATHErrorResources.ER_EXPECTED_REL_PATH_PATTERN,null);
    }
  }
  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);
  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);
  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);
}
