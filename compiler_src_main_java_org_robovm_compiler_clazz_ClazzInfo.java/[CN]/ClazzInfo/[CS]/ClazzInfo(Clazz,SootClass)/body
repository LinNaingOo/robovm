{
  this.clazz=clazz;
  modifiers=sootClass.getModifiers();
  name=sootClass.getName();
  internalName=Types.getInternalName(sootClass);
  if (sootClass.hasSuperclass()) {
    superclassName=Types.getInternalName(sootClass.getSuperclass());
  }
  for (  SootClass ifs : sootClass.getInterfaces()) {
    interfaceNames.add(Types.getInternalName(ifs));
  }
  for (  SootField field : sootClass.getFields()) {
    fields.add(new FieldInfo(field.getModifiers(),field.getName(),Types.getDescriptor(field)));
  }
  for (  SootMethod method : sootClass.getMethods()) {
    methods.add(new MethodInfo(method.getModifiers(),method.getName(),Types.getDescriptor(method)));
  }
}
