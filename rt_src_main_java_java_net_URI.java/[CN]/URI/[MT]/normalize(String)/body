{
  int index=-1;
  int pathlen=path.length();
  int size=0;
  if (pathlen > 0 && path.charAt(0) != '/') {
    size++;
  }
  while ((index=path.indexOf('/',index + 1)) != -1) {
    if (index + 1 < pathlen && path.charAt(index + 1) != '/') {
      size++;
    }
  }
  String[] seglist=new String[size];
  boolean[] include=new boolean[size];
  int current=0;
  int index2=0;
  index=(pathlen > 0 && path.charAt(0) == '/') ? 1 : 0;
  while ((index2=path.indexOf('/',index + 1)) != -1) {
    seglist[current++]=path.substring(index,index2);
    index=index2 + 1;
  }
  if (current < size) {
    seglist[current]=path.substring(index);
  }
  for (int i=0; i < size; i++) {
    include[i]=true;
    if (seglist[i].equals("..")) {
      int remove=i - 1;
      while (remove > -1 && !include[remove]) {
        remove--;
      }
      if (remove > -1 && !seglist[remove].equals("..")) {
        include[remove]=false;
        include[i]=false;
      }
    }
 else     if (seglist[i].equals(".")) {
      include[i]=false;
    }
  }
  StringBuilder newpath=new StringBuilder();
  if (path.startsWith("/")) {
    newpath.append('/');
  }
  for (int i=0; i < seglist.length; i++) {
    if (include[i]) {
      newpath.append(seglist[i]);
      newpath.append('/');
    }
  }
  if (!path.endsWith("/") && seglist.length > 0 && include[seglist.length - 1]) {
    newpath.deleteCharAt(newpath.length() - 1);
  }
  String result=newpath.toString();
  index=result.indexOf(':');
  index2=result.indexOf('/');
  if (index != -1 && (index < index2 || index2 == -1)) {
    newpath.insert(0,"./");
    result=newpath.toString();
  }
  return result;
}
