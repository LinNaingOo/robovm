{
  BitSet bitset=new BitSet();
  for (int i=0; i < 20; i++) {
    bitset.set(i);
  }
  bitset.clear(10,10);
  BitSet bs=new BitSet(16);
  int initialSize=bs.size();
  assertEquals(64,initialSize);
  bs.set(0,initialSize);
  bs.clear(5);
  bs.clear(15);
  bs.clear(7,11);
  assertEquals("{0, 1, 2, 3, 4, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, " + "26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, " + "46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}",bs.toString());
  for (int i=initialSize; i < bs.size(); i++) {
    assertFalse("Shouldn't have flipped bit " + i,bs.get(i));
  }
  bs=new BitSet(16);
  initialSize=bs.size();
  bs.set(0,initialSize);
  bs.clear(7,64);
  assertEquals("Failed to grow BitSet",64,bs.size());
  for (int i=0; i < 7; i++) {
    assertTrue("Shouldn't have cleared bit " + i,bs.get(i));
  }
  for (int i=7; i < 64; i++) {
    assertFalse("Failed to clear bit " + i,bs.get(i));
  }
  for (int i=64; i < bs.size(); i++) {
    assertTrue("Shouldn't have flipped bit " + i,!bs.get(i));
  }
  bs=new BitSet(32);
  initialSize=bs.size();
  bs.set(0,initialSize);
  bs.clear(0,64);
  for (int i=0; i < 64; i++) {
    assertFalse("Failed to clear bit " + i,bs.get(i));
  }
  for (int i=64; i < bs.size(); i++) {
    assertFalse("Shouldn't have flipped bit " + i,bs.get(i));
  }
  bs=new BitSet(32);
  initialSize=bs.size();
  bs.set(0,initialSize);
  bs.clear(0,65);
  for (int i=0; i < 65; i++) {
    assertFalse("Failed to clear bit " + i,bs.get(i));
  }
  for (int i=65; i < bs.size(); i++) {
    assertFalse("Shouldn't have flipped bit " + i,bs.get(i));
  }
  bs=new BitSet(128);
  initialSize=bs.size();
  bs.set(0,initialSize);
  bs.clear(7);
  bs.clear(110);
  bs.clear(9,74);
  for (int i=0; i < 9; i++) {
    if (i == 7) {
      assertFalse("Shouldn't have flipped bit " + i,bs.get(i));
    }
 else {
      assertTrue("Shouldn't have cleared bit " + i,bs.get(i));
    }
  }
  for (int i=9; i < 74; i++) {
    assertFalse("Failed to clear bit " + i,bs.get(i));
  }
  for (int i=74; i < initialSize; i++) {
    if (i == 110) {
      assertFalse("Shouldn't have flipped bit " + i,bs.get(i));
    }
 else {
      assertTrue("Shouldn't have cleared bit " + i,bs.get(i));
    }
  }
  for (int i=initialSize; i < bs.size(); i++) {
    assertFalse("Shouldn't have flipped bit " + i,bs.get(i));
  }
  bs=new BitSet(256);
  bs.set(0,256);
  bs.clear(7);
  bs.clear(255);
  bs.clear(9,219);
  for (int i=0; i < 9; i++) {
    if (i == 7) {
      assertFalse("Shouldn't have flipped bit " + i,bs.get(i));
    }
 else {
      assertTrue("Shouldn't have cleared bit " + i,bs.get(i));
    }
  }
  for (int i=9; i < 219; i++) {
    assertFalse("failed to clear bit " + i,bs.get(i));
  }
  for (int i=219; i < 255; i++) {
    assertTrue("Shouldn't have cleared bit " + i,bs.get(i));
  }
  for (int i=255; i < bs.size(); i++) {
    assertFalse("Shouldn't have flipped bit " + i,bs.get(i));
  }
  bs=new BitSet(10);
  try {
    bs.clear(-1,3);
    fail();
  }
 catch (  IndexOutOfBoundsException expected) {
  }
  try {
    bs.clear(2,-1);
    fail();
  }
 catch (  IndexOutOfBoundsException expected) {
  }
  bs.set(2,4);
  bs.clear(2,2);
  assertTrue("Bit got cleared incorrectly ",bs.get(2));
  try {
    bs.clear(4,2);
    fail();
  }
 catch (  IndexOutOfBoundsException expected) {
  }
  bs=new BitSet(0);
  assertEquals("Test1: Wrong length,",0,bs.length());
  assertEquals("Test1: Wrong size,",0,bs.size());
  bs.clear(0,2);
  assertEquals("Test2: Wrong length,",0,bs.length());
  assertEquals("Test2: Wrong size,",0,bs.size());
  bs.clear(60,64);
  assertEquals("Test3: Wrong length,",0,bs.length());
  assertEquals("Test3: Wrong size,",0,bs.size());
  bs.clear(64,120);
  assertEquals("Test4: Wrong length,",0,bs.length());
  assertEquals("Test4: Wrong size,",0,bs.size());
  bs.set(25);
  assertEquals("Test5: Wrong length,",26,bs.length());
  assertEquals("Test5: Wrong size,",64,bs.size());
  bs.clear(60,64);
  assertEquals("Test6: Wrong length,",26,bs.length());
  assertEquals("Test6: Wrong size,",64,bs.size());
  bs.clear(64,120);
  assertEquals("Test7: Wrong size,",64,bs.size());
  assertEquals("Test7: Wrong length,",26,bs.length());
  bs.clear(80);
  assertEquals("Test8: Wrong size,",64,bs.size());
  assertEquals("Test8: Wrong length,",26,bs.length());
  bs.clear(25);
  assertEquals("Test9: Wrong size,",64,bs.size());
  assertEquals("Test9: Wrong length,",0,bs.length());
}
