{
  BranchedRefVarsAnalysis analysis=new BranchedRefVarsAnalysis(new ExceptionalUnitGraph(b));
  Iterator it=b.getUnits().iterator();
  while (it.hasNext()) {
    Stmt s=(Stmt)it.next();
    Iterator usesIt=s.getUseBoxes().iterator();
    FlowSet beforeSet=(FlowSet)analysis.getFlowBefore(s);
    while (usesIt.hasNext()) {
      ValueBox vBox=(ValueBox)usesIt.next();
      addColorTags(vBox,beforeSet,s,analysis);
    }
    Iterator defsIt=s.getDefBoxes().iterator();
    FlowSet afterSet=(FlowSet)analysis.getFallFlowAfter(s);
    while (defsIt.hasNext()) {
      ValueBox vBox=(ValueBox)defsIt.next();
      addColorTags(vBox,afterSet,s,analysis);
    }
  }
  Iterator keysIt=b.getMethod().getDeclaringClass().getTags().iterator();
  boolean keysAdded=false;
  while (keysIt.hasNext()) {
    Object next=keysIt.next();
    if (next instanceof KeyTag) {
      if (((KeyTag)next).analysisType().equals("NullCheckTag")) {
        keysAdded=true;
      }
    }
  }
  if (!keysAdded) {
    b.getMethod().getDeclaringClass().addTag(new KeyTag(ColorTag.RED,"Nullness: Null","NullCheckTag"));
    b.getMethod().getDeclaringClass().addTag(new KeyTag(ColorTag.GREEN,"Nullness: Not Null","NullCheckTag"));
    b.getMethod().getDeclaringClass().addTag(new KeyTag(ColorTag.BLUE,"Nullness: Nullness Unknown","NullCheckTag"));
  }
}
