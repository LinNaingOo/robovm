{
  int axesType=getOp(opPos);
  int testType=getOp(opPos + 3);
switch (testType) {
case OpCodes.NODETYPE_COMMENT:
    return DTMFilter.SHOW_COMMENT;
case OpCodes.NODETYPE_TEXT:
  return DTMFilter.SHOW_TEXT | DTMFilter.SHOW_CDATA_SECTION;
case OpCodes.NODETYPE_PI:
return DTMFilter.SHOW_PROCESSING_INSTRUCTION;
case OpCodes.NODETYPE_NODE:
switch (axesType) {
case OpCodes.FROM_NAMESPACE:
return DTMFilter.SHOW_NAMESPACE;
case OpCodes.FROM_ATTRIBUTES:
case OpCodes.MATCH_ATTRIBUTE:
return DTMFilter.SHOW_ATTRIBUTE;
case OpCodes.FROM_SELF:
case OpCodes.FROM_ANCESTORS_OR_SELF:
case OpCodes.FROM_DESCENDANTS_OR_SELF:
return DTMFilter.SHOW_ALL;
default :
if (getOp(0) == OpCodes.OP_MATCHPATTERN) return ~DTMFilter.SHOW_ATTRIBUTE & ~DTMFilter.SHOW_DOCUMENT & ~DTMFilter.SHOW_DOCUMENT_FRAGMENT;
 else return ~DTMFilter.SHOW_ATTRIBUTE;
}
case OpCodes.NODETYPE_ROOT:
return DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT;
case OpCodes.NODETYPE_FUNCTEST:
return NodeTest.SHOW_BYFUNCTION;
case OpCodes.NODENAME:
switch (axesType) {
case OpCodes.FROM_NAMESPACE:
return DTMFilter.SHOW_NAMESPACE;
case OpCodes.FROM_ATTRIBUTES:
case OpCodes.MATCH_ATTRIBUTE:
return DTMFilter.SHOW_ATTRIBUTE;
case OpCodes.MATCH_ANY_ANCESTOR:
case OpCodes.MATCH_IMMEDIATE_ANCESTOR:
return DTMFilter.SHOW_ELEMENT;
default :
return DTMFilter.SHOW_ELEMENT;
}
default :
return DTMFilter.SHOW_ALL;
}
}
