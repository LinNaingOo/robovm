{
  StmtBody stmtBody=(StmtBody)b;
  int numFolded=0;
  int numPropagated=0;
  if (Options.v().verbose())   G.v().out.println("[" + stmtBody.getMethod().getName() + "] Propagating and folding constants...");
  ExceptionalUnitGraph unitGraph=new ExceptionalUnitGraph(stmtBody);
  LocalDefs localDefs;
  localDefs=new SmartLocalDefs(unitGraph,new SimpleLiveLocals(unitGraph));
  Iterator stmtIt=(new PseudoTopologicalOrderer()).newList(unitGraph,false).iterator();
  while (stmtIt.hasNext()) {
    Stmt stmt=(Stmt)stmtIt.next();
    Iterator useBoxIt=stmt.getUseBoxes().iterator();
    ValueBox useBox;
    while (useBoxIt.hasNext()) {
      useBox=(ValueBox)useBoxIt.next();
      if (useBox.getValue() instanceof Local) {
        Local local=(Local)useBox.getValue();
        List<Unit> defsOfUse=localDefs.getDefsOfAt(local,stmt);
        if (defsOfUse.size() == 1) {
          DefinitionStmt defStmt=(DefinitionStmt)defsOfUse.get(0);
          if (defStmt.getRightOp() instanceof NumericConstant) {
            if (useBox.canContainValue(defStmt.getRightOp())) {
              useBox.setValue(defStmt.getRightOp());
              numPropagated++;
            }
          }
        }
      }
    }
    useBoxIt=stmt.getUseBoxes().iterator();
    while (useBoxIt.hasNext()) {
      useBox=(ValueBox)useBoxIt.next();
      Value value=useBox.getValue();
      if (!(value instanceof Constant)) {
        if (Evaluator.isValueConstantValued(value)) {
          Value constValue=Evaluator.getConstantValueOf(value);
          if (useBox.canContainValue(constValue)) {
            useBox.setValue(constValue);
            numFolded++;
          }
        }
      }
    }
  }
  if (Options.v().verbose())   G.v().out.println("[" + stmtBody.getMethod().getName() + "]     Propagated: "+ numPropagated+ ", Folded:  "+ numFolded);
}
