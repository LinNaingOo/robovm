{
  super(file);
  byte[] magicStartTest=new byte[8];
  byte[] magicEndTest=new byte[6];
  byte[] metaData=new byte[26];
  try {
    stream=new RandomAccessFile(file,"r");
    stream.read(magicStartTest);
    if (!Arrays.equals(STARTMAGIC,magicStartTest))     throw new PropertyListException("File is not a binary property list.");
    stream.seek(this.stream.length() - 32);
    stream.read(magicEndTest);
    if (!Arrays.equals(ENDMAGIC,magicEndTest))     throw new PropertyListException("File is not a binary property list.");
    stream.read(metaData);
    offsetEntrySize=metaData[0];
    objRefSize=metaData[1];
    numObjects=getInteger(metaData[6],metaData[7],metaData[8],metaData[9]);
    rootAddr=8L + getLong(metaData[10],metaData[11],metaData[12],metaData[13],metaData[14],metaData[15],metaData[16],metaData[17]);
    offsetTableOffset=getLong(metaData[18],metaData[19],metaData[20],metaData[21],metaData[22],metaData[23],metaData[24],metaData[25]);
    offsetTable=new int[numObjects];
    byte[] offsetBytes=new byte[numObjects * offsetEntrySize];
    stream.seek(offsetTableOffset);
    stream.read(offsetBytes);
    for (int i=0; i < numObjects; i++) {
      byte[] offsetTableEntry=new byte[offsetEntrySize];
      System.arraycopy(offsetBytes,i * offsetEntrySize,offsetTableEntry,0,offsetEntrySize);
      offsetTable[i]=getInteger(offsetTableEntry);
    }
  }
 catch (  IOException ioe) {
    try {
      if (this.stream != null)       this.stream.close();
    }
 catch (    IOException ioe2) {
    }
    throw ioe;
  }
}
