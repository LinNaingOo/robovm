{
  String[] queries={"update zoo set name='Masha', family='cat' where id=2;","drop table if exists hutch","create table hutch (id integer not null, animal_id integer, address char(20), primary key (id));","insert into hutch (id, animal_id, address) values (1, 2, 'Birds-house, 1');","insert into hutch (id, animal_id, address) values (2, 1, 'Horse-house, 5');","create view address as select address from hutch where animal_id=2","drop view address;","drop table hutch;"};
  String[] wrongQueries={"update zoo set name='Masha', family='cat' where;","drop table if exists hutch;","create view address as select address from hutch where animal_id=2;","drop view address;","drop table hutch;"};
  int[] result={1,1,1,1,1,1,1,1};
  Statement st=null;
  try {
    st=conn.createStatement();
    assertEquals(0,st.executeBatch().length);
    for (int i=0; i < wrongQueries.length; i++) {
      st.addBatch(wrongQueries[i]);
    }
    st.executeBatch();
    fail("BatchupdateException expected");
  }
 catch (  BatchUpdateException e) {
  }
 finally {
    try {
      st.close();
    }
 catch (    SQLException ee) {
    }
  }
  try {
    st=conn.createStatement();
    assertEquals(0,st.executeBatch().length);
    for (int i=0; i < queries.length; i++) {
      st.addBatch(queries[i]);
    }
    int[] resArray=st.executeBatch();
    assertTrue(java.util.Arrays.equals(result,resArray));
  }
  finally {
    try {
      st.close();
    }
 catch (    SQLException ee) {
    }
  }
  try {
    st=conn.createStatement();
    st.addBatch("select * from zoo");
    st.executeBatch();
    fail("Exception expected");
  }
 catch (  BatchUpdateException bue) {
  }
 finally {
    try {
      st.close();
    }
 catch (    SQLException ee) {
    }
  }
  try {
    st.close();
    st.executeBatch();
    fail("SQLException not thrown");
  }
 catch (  SQLException e) {
  }
}
