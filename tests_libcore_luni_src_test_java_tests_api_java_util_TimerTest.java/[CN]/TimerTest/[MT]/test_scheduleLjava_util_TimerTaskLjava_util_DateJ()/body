{
  Timer t=null;
  try {
    t=new Timer();
    TimerTestTask testTask=new TimerTestTask();
    Date d=new Date(System.currentTimeMillis() + 100);
    t.cancel();
    boolean exception=false;
    try {
      t.schedule(testTask,d,100);
    }
 catch (    IllegalStateException e) {
      exception=true;
    }
    assertTrue("Scheduling a task after Timer.cancel() should throw exception",exception);
    t=new Timer();
    d=new Date(System.currentTimeMillis() + 100);
    testTask=new TimerTestTask();
    testTask.cancel();
    exception=false;
    try {
      t.schedule(testTask,d,100);
    }
 catch (    IllegalStateException e) {
      exception=true;
    }
    assertTrue("Scheduling a task after cancelling it should throw exception",exception);
    t.cancel();
    t=new Timer();
    d=new Date(-100);
    testTask=new TimerTestTask();
    exception=false;
    try {
      t.schedule(testTask,d,100);
    }
 catch (    IllegalArgumentException e) {
      exception=true;
    }
    assertTrue("Scheduling a task with negative delay should throw IllegalArgumentException",exception);
    t.cancel();
    t=new Timer();
    d=new Date(System.currentTimeMillis() + 100);
    testTask=new TimerTestTask();
    exception=false;
    try {
      t.schedule(testTask,d,-100);
    }
 catch (    IllegalArgumentException e) {
      exception=true;
    }
    assertTrue("Scheduling a task with negative period should throw IllegalArgumentException",exception);
    t.cancel();
    t=new Timer();
    d=new Date(System.currentTimeMillis() + 100);
    exception=false;
    try {
      t.schedule(null,d,10);
    }
 catch (    NullPointerException e) {
      exception=true;
    }
    assertTrue("Scheduling a null task should throw NullPointerException",exception);
    t.cancel();
    t=new Timer();
    testTask=new TimerTestTask();
    exception=false;
    try {
      t.schedule(testTask,null,10);
    }
 catch (    NullPointerException e) {
      exception=true;
    }
    assertTrue("Scheduling a null task should throw NullPointerException",exception);
    t.cancel();
    t=new Timer();
    d=new Date(-100);
    exception=false;
    try {
      t.schedule(null,d,10);
    }
 catch (    NullPointerException e) {
    }
catch (    IllegalArgumentException e) {
      exception=true;
    }
    assertTrue("Scheduling a null task with negative dates should throw IllegalArgumentException first",exception);
    t.cancel();
    t=new Timer();
    d=new Date(System.currentTimeMillis() + 100);
    testTask=new TimerTestTask();
    t.schedule(testTask,d,100);
    try {
      Thread.sleep(800);
    }
 catch (    InterruptedException e) {
    }
    assertTrue("TimerTask.run() method should have been called at least twice (" + testTask.wasRun() + ")",testTask.wasRun() >= 2);
    t.cancel();
    t=new Timer();
    testTask=new TimerTestTask();
    testTask.incrementCount(true);
    d=new Date(System.currentTimeMillis() + 100);
    t.schedule(testTask,d,100);
    testTask=new TimerTestTask();
    testTask.incrementCount(true);
    d=new Date(System.currentTimeMillis() + 200);
    t.schedule(testTask,d,100);
    testTask=new TimerTestTask();
    testTask.incrementCount(true);
    d=new Date(System.currentTimeMillis() + 300);
    t.schedule(testTask,d,200);
    testTask=new TimerTestTask();
    testTask.incrementCount(true);
    d=new Date(System.currentTimeMillis() + 100);
    t.schedule(testTask,d,200);
    try {
      Thread.sleep(3000);
    }
 catch (    InterruptedException e) {
    }
    assertTrue("Multiple tasks should have incremented counter 24 times not " + timerCounter,timerCounter >= 24);
    t.cancel();
  }
  finally {
    if (t != null)     t.cancel();
  }
}
