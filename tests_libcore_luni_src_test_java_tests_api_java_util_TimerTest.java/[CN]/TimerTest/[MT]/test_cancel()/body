{
  Timer t=null;
  try {
    t=new Timer();
    TimerTestTask testTask=new TimerTestTask();
    t.cancel();
    try {
      t.schedule(testTask,100,200);
      fail("Scheduling a task after Timer.cancel() should throw exception");
    }
 catch (    IllegalStateException expected) {
    }
    t=new Timer();
    testTask=new TimerTestTask();
    t.schedule(testTask,100,500);
    awaitRun(testTask);
    t.cancel();
synchronized (sync) {
      sync.wait(500);
    }
    assertEquals("TimerTask.run() method should not have been called after cancel",1,testTask.wasRun());
    t=new Timer();
    testTask=new TimerTestTask();
    t.schedule(testTask,100,500);
    awaitRun(testTask);
    t.cancel();
    t.cancel();
    t.cancel();
synchronized (sync) {
      sync.wait(500);
    }
    assertEquals("TimerTask.run() method should not have been called after cancel",1,testTask.wasRun());
    t=new Timer();
    testTask=new TimerTestTask(t);
    testTask.incrementCount(true);
    testTask.terminateCount(5);
    t.schedule(testTask,100,100);
synchronized (sync) {
      sync.wait(200);
      assertEquals(1,testTask.wasRun());
      sync.wait(200);
      assertEquals(2,testTask.wasRun());
      sync.wait(200);
      assertEquals(3,testTask.wasRun());
      sync.wait(200);
      assertEquals(4,testTask.wasRun());
      sync.wait(200);
      assertEquals(5,testTask.wasRun());
      sync.wait(200);
      assertEquals(5,testTask.wasRun());
    }
    t.cancel();
    Thread.sleep(200);
  }
  finally {
    if (t != null)     t.cancel();
  }
}
