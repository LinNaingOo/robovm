{
  dynamicClasses=new ArrayList<SootClass>();
  HashSet<String> dynClasses=new HashSet<String>();
  dynClasses.addAll(Options.v().dynamic_class());
  for (Iterator<String> pathIt=Options.v().dynamic_dir().iterator(); pathIt.hasNext(); ) {
    final String path=(String)pathIt.next();
    dynClasses.addAll(SourceLocator.v().getClassesUnder(path));
  }
  for (Iterator<String> pkgIt=Options.v().dynamic_package().iterator(); pkgIt.hasNext(); ) {
    final String pkg=(String)pkgIt.next();
    dynClasses.addAll(SourceLocator.v().classesInDynamicPackage(pkg));
  }
  for (  String className : dynClasses) {
    dynamicClasses.add(loadClassAndSupport(className));
  }
  for (Iterator<SootClass> iterator=dynamicClasses.iterator(); iterator.hasNext(); ) {
    SootClass c=iterator.next();
    if (!c.isConcrete()) {
      if (Options.v().verbose()) {
        G.v().out.println("Warning: dynamic class " + c.getName() + " is abstract or an interface, and it will not be considered.");
      }
      iterator.remove();
    }
  }
}
