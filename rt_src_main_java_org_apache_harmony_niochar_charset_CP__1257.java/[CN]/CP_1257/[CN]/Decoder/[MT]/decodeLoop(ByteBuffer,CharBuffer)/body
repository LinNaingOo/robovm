{
  int cbRemaining=cb.remaining();
  if (CharsetProviderImpl.hasLoadedNatives() && bb.isDirect() && bb.hasRemaining()&& cb.hasArray()) {
    int toProceed=bb.remaining();
    int cbPos=cb.position();
    int bbPos=bb.position();
    boolean throwOverflow=false;
    if (cbRemaining < toProceed) {
      toProceed=cbRemaining;
      throwOverflow=true;
    }
    int res=nDecode(cb.array(),cb.arrayOffset() + cbPos,toProceed,AddressUtil.getDirectBufferAddress(bb),bbPos);
    if (res <= 0) {
      bb.position(bbPos - res);
      cb.position(cbPos - res);
      return CoderResult.unmappableForLength(1);
    }
 else {
      cb.position(cbPos + res);
      bb.position(bbPos + res);
      if (throwOverflow)       return CoderResult.OVERFLOW;
    }
  }
 else {
    if (bb.hasArray() && cb.hasArray()) {
      int rem=bb.remaining();
      rem=cbRemaining >= rem ? rem : cbRemaining;
      byte[] bArr=bb.array();
      char[] cArr=cb.array();
      int bStart=bb.position();
      int cStart=cb.position();
      int i;
      for (i=bStart; i < bStart + rem; i++) {
        int in=(int)bArr[i];
        if (in < 0 && in >= -128) {
          int index=(int)in + 128;
          if (arr[index] != 0x0000) {
            cArr[cStart++]=(char)arr[index];
          }
 else {
            bb.position(i);
            cb.position(cStart);
            return CoderResult.unmappableForLength(1);
          }
        }
 else {
          cArr[cStart++]=(char)(in & 0xFF);
        }
      }
      bb.position(i);
      cb.position(cStart);
      if (rem == cbRemaining && bb.hasRemaining())       return CoderResult.OVERFLOW;
    }
 else {
      while (bb.hasRemaining()) {
        if (cbRemaining == 0)         return CoderResult.OVERFLOW;
        int in=(int)bb.get();
        if (in < 0 && in >= -128) {
          int index=(int)in + 128;
          if (arr[index] != 0x0000) {
            cb.put(arr[index]);
          }
 else {
            bb.position(bb.position() - 1);
            return CoderResult.unmappableForLength(1);
          }
        }
 else {
          cb.put((char)(in & 0xFF));
        }
        cbRemaining--;
      }
    }
  }
  return CoderResult.UNDERFLOW;
}
