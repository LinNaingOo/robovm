{
  PrintWriter out=w instanceof PrintWriter ? (PrintWriter)w : new PrintWriter(w);
  try {
    out.println(LlvmUtil.javaMethodToLlvmFunctionDefinition(classNode,methodNode) + " {");
    BasicInterpreter interpreter=new BasicInterpreter();
    Analyzer analyzer=new Analyzer(interpreter);
    analyzer.analyze(classNode.name,methodNode);
    Frame[] frames=analyzer.getFrames();
    Set<Var> stackVars=new TreeSet<Var>();
    Set<Var> localVars=new TreeSet<Var>();
    for (    Frame frame : frames) {
      if (frame != null) {
        for (int i=0, slot=0; i < frame.getStackSize(); i++) {
          BasicValue value=(BasicValue)frame.getStack(i);
          Type t=value.getType();
          if (t == null) {
            if (value == BasicValue.UNINITIALIZED_VALUE) {
              stackVars.add(new Var("s" + slot,"%Object*"));
            }
 else {
              stackVars.add(new Var("s" + slot,"i8*"));
            }
          }
 else {
            stackVars.add(new Var("s" + slot,LlvmUtil.javaLocalVarTypeToLlvmType(t)));
          }
          slot+=value.getSize();
        }
        for (int i=0; i < frame.getLocals(); ) {
          BasicValue value=(BasicValue)frame.getLocal(i);
          Type t=value.getType();
          if (t == null) {
            if (value == BasicValue.UNINITIALIZED_VALUE) {
              localVars.add(new Var("v" + i,"%Object*"));
            }
 else {
              localVars.add(new Var("v" + i,"i8*"));
            }
          }
 else {
            localVars.add(new Var("v" + i,LlvmUtil.javaLocalVarTypeToLlvmType(value.getType())));
          }
          i+=value.getSize();
        }
      }
    }
    for (    Var v : stackVars) {
      out.format("    %s = alloca %s\n",v,v.getType());
    }
    for (    Var v : localVars) {
      out.format("    %s = alloca %s\n",v,v.getType());
    }
    Type[] args=Type.getArgumentTypes(methodNode.desc);
    int slot=0;
    int first=0;
    if ((methodNode.access & Opcodes.ACC_STATIC) == 0) {
      Var src=new Var("arg0","%Object*");
      Var dest=new Var("v" + slot,"%Object*");
      out.format("    store %s %s, %s* %s\n",dest.getType(),src,dest.getType(),dest);
      slot++;
      first++;
    }
    for (int i=0; i < args.length; i++) {
      Type t=args[i];
      String argName="arg" + (i + first);
      Var dest=new Var("v" + slot,LlvmUtil.javaLocalVarTypeToLlvmType(t));
      Var src=new Var(argName,LlvmUtil.javaTypeToLlvmType(t));
      if (t.getSort() == Type.CHAR || t.getSort() == Type.BOOLEAN) {
        Var tmp=new Var(argName,"i32");
        out.format("    %s = zext %s %s to i32\n",tmp,src.getType(),src);
        src=tmp;
      }
 else       if (t.getSort() == Type.BYTE || t.getSort() == Type.SHORT) {
        Var tmp=new Var(argName,"i32");
        out.format("    %s = sext %s %s to i32\n",tmp,src.getType(),src);
        src=tmp;
      }
      out.format("    store %s %s, %s* %s\n",dest.getType(),src,dest.getType(),dest);
      slot+=t.getSize();
    }
    MethodVisitor methodVisitor=new MethodVisitor(classNode,methodNode,frames,out);
    methodVisitor.write();
    out.println("}");
  }
 catch (  AnalyzerException ae) {
    throw new RuntimeException(ae);
  }
 finally {
    out.flush();
  }
}
