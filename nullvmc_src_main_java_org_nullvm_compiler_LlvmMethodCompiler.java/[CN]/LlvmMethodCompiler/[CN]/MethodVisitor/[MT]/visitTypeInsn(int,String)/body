{
  Var env=new Var("env","%Env*");
switch (opcode) {
case Opcodes.NEW:
{
      String prefix="New";
      String mangledClass=LlvmUtil.mangleString(type);
      String varName=prefix + "_" + mangledClass;
      Var f=tmp("f","%Object* (%NewRes*, %Env*)*");
      out.format("    %s = load %s* bitcast (%%NewRes* @%s to %s*)\n",f,f.getType(),varName,f.getType());
      Var res=tmpr("res");
      if (currentTryCatchBlocks.isEmpty()) {
        out.format("    %s = call %%Object* %s(%%NewRes* @%s, %%Env* %s)\n",res,f,varName,env);
      }
 else {
        String successLabel=String.format("NewInstanceSuccess%d",pc);
        out.format("    %s = invoke %%Object* %s(%%NewRes* @%s, %%Env* %s) to label %%%s unwind label %%%s\n",res,f,varName,env,successLabel,currentLandingPad.getLabel());
        out.format("%s:\n",successLabel);
      }
      push1(res);
      break;
    }
case Opcodes.ANEWARRAY:
{
    Var length=pop1("length");
    Var res=tmpr("res");
    Var caller=tmp("caller","%Class*");
    out.format("    %s = load %%Class** @clazz\n",caller);
    if (currentTryCatchBlocks.isEmpty()) {
      out.format("    %s = call %%Object* @_nvmBcNewObjectArray(%%Env* %s, i32 %s, i8* %s, %s %s)\n",res,env,length,LlvmUtil.getStringReference("[" + type),caller.getType(),caller);
    }
 else {
      String successLabel=String.format("ANewArraySuccess%d",pc);
      out.format("    %s = invoke %%Object* @_nvmBcNewObjectArray(%%Env* %s, i32 %s, i8* %s, %s %s) to label %%%s unwind label %%%s\n",res,env,length,LlvmUtil.getStringReference("[" + type),caller.getType(),caller,successLabel,currentLandingPad.getLabel());
      out.format("%s:\n",successLabel);
    }
    push1(res);
    break;
  }
case Opcodes.CHECKCAST:
{
  String prefix="Checkcast";
  String mangledClass=LlvmUtil.mangleString(type);
  String varName=prefix + "_" + mangledClass;
  Var f=tmp("f","void (%CheckcastRes*, %Env*, %Object*)*");
  out.format("    %s = load %s* bitcast (%%CheckcastRes* @%s to %s*)\n",f,f.getType(),varName,f.getType());
  Var obj=pop1("obj");
  if (currentTryCatchBlocks.isEmpty()) {
    out.format("    call void %s(%%CheckcastRes* @%s, %%Env* %s, %%Object* %s)\n",f,varName,env,obj);
  }
 else {
    String successLabel=String.format("CheckCastSuccess%d",pc);
    out.format("    invoke void %s(%%CheckcastRes* @%s, %%Env* %s, %%Object* %s) to label %%%s unwind label %%%s\n",f,varName,env,obj,successLabel,currentLandingPad.getLabel());
    out.format("%s:\n",successLabel);
  }
  push1(obj);
  break;
}
case Opcodes.INSTANCEOF:
{
String prefix="Instanceof";
String mangledClass=LlvmUtil.mangleString(type);
String varName=prefix + "_" + mangledClass;
Var f=tmp("f","i32 (%InstanceofRes*, %Env*, %Object*)*");
out.format("    %s = load %s* bitcast (%%InstanceofRes* @%s to %s*)\n",f,f.getType(),varName,f.getType());
Var obj=pop1("obj");
Var res=tmpi("res");
if (currentTryCatchBlocks.isEmpty()) {
  out.format("    %s = call i32 %s(%%InstanceofRes* @%s, %%Env* %s, %%Object* %s)\n",res,f,varName,env,obj);
}
 else {
  String successLabel=String.format("InstanceofSuccess%d",pc);
  out.format("    %s = invoke i32 %s(%%InstanceofRes* @%s, %%Env* %s, %%Object* %s) to label %%%s unwind label %%%s\n",res,f,varName,env,obj,successLabel,currentLandingPad.getLabel());
  out.format("%s:\n",successLabel);
}
push1(res);
break;
}
default :
throw new RuntimeException("Opcode not implemented: " + opcodeNames[opcode]);
}
}
