{
  for (int i=0; i < dims; i++) {
    Var ptr=tmp("ptr","i32*");
    Var length=pop1("length" + (dims - i - 1));
    out.format("    %s = getelementptr %s* %s, i32 0, i32 %d\n",ptr,multiANewArrayLengths.getType(),multiANewArrayLengths,dims - i - 1);
    out.format("    store i32 %s, i32* %s\n",length,ptr);
  }
  Var caller=tmp("caller","%Class*");
  out.format("    %s = load %%Class** @clazz\n",caller);
  Var lengthsi32=tmp("lengths","i32*");
  out.format("    %s = bitcast %s* %s to i32*\n",lengthsi32,multiANewArrayLengths.getType(),multiANewArrayLengths);
  Var res=tmpr("res");
  if (currentTryCatchBlocks.isEmpty()) {
    out.format("    %s = call %%Object* @_nvmBcNewMultiArray(%%Env* %s, i32 %d, i32* %s, i8* %s, %%Class* %s)\n",res,new Var("env","%Env*"),dims,lengthsi32,LlvmUtil.getStringReference(desc),caller);
  }
 else {
    String successLabel=String.format("NewArraySuccess%d",pc);
    out.format("    %s = invoke %%Object* @_nvmBcNewMultiArray(%%Env* %s, i32 %d, i32* %s, i8* %s, %%Class* %s) to label %%%s unwind label %%%s\n",res,new Var("env","%Env*"),dims,lengthsi32,LlvmUtil.getStringReference(desc),caller,successLabel,currentLandingPad.getLabel());
    out.format("%s:\n",successLabel);
  }
  push1(res);
}
