{
  if (!methodNode.tryCatchBlocks.isEmpty()) {
    throwablePtr=new Var("throwable","%jobject*");
    out.format("    %s = alloca %s\n",throwablePtr,throwablePtr.getType());
  }
  Set<String> accessors=new HashSet<String>();
  getters=new HashMap<String,Var>();
  setters=new HashMap<String,Var>();
  for (AbstractInsnNode insn=methodNode.instructions.getFirst(); insn != null; insn=insn.getNext()) {
    if (insn instanceof FieldInsnNode) {
      FieldInsnNode n=(FieldInsnNode)insn;
      String fieldName=LlvmUtil.mangleString(n.owner) + "_" + LlvmUtil.mangleString(n.name)+ "__"+ LlvmUtil.mangleString(n.desc);
      String llvmType=LlvmUtil.javaTypeToLlvmType(Type.getType(n.desc));
      if (n.getOpcode() == Opcodes.PUTSTATIC) {
        String setter="PUTSTATIC_" + fieldName;
        if (!accessors.contains(setter)) {
          Var v=new Var(setter,String.format("void (%s)*",llvmType));
          out.format("    %s = load %s* @%s\n",v,v.getType(),setter);
          accessors.add(setter);
        }
      }
 else       if (n.getOpcode() == Opcodes.GETSTATIC) {
        String getter="GETSTATIC_" + fieldName;
        if (!accessors.contains(getter)) {
          Var v=new Var(getter,String.format("%s ()*",llvmType));
          out.format("    %s = load %s* @%s\n",v,v.getType(),getter);
          accessors.add(getter);
        }
      }
 else       if (n.getOpcode() == Opcodes.PUTFIELD) {
        String setter="PUTFIELD_" + fieldName;
        if (!accessors.contains(setter)) {
          Var v=new Var(setter,String.format("void (%%jobject*,%s)*",llvmType));
          out.format("    %s = load %s* @%s\n",v,v.getType(),setter);
          accessors.add(setter);
        }
      }
 else       if (n.getOpcode() == Opcodes.GETFIELD) {
        String getter="GETFIELD_" + fieldName;
        if (!accessors.contains(getter)) {
          Var v=new Var(getter,String.format("%s (%%jobject*)*",llvmType));
          out.format("    %s = load %s* @%s\n",v,v.getType(),getter);
          accessors.add(getter);
        }
      }
    }
  }
  for (AbstractInsnNode insn=methodNode.instructions.getFirst(); insn != null; insn=insn.getNext()) {
    if (nextFrame() != null) {
      if (insn.getOpcode() != -1) {
        out.format("    ; %s\n",opcodeNames[insn.getOpcode()]);
      }
      if (insn instanceof LabelNode) {
        List<TryCatchBlockNode> newCurrentTryCatchBlocks=new ArrayList<TryCatchBlockNode>();
        for (        TryCatchBlockNode node : (List<TryCatchBlockNode>)methodNode.tryCatchBlocks) {
          int start=methodNode.instructions.indexOf(node.start);
          int end=methodNode.instructions.indexOf(node.end);
          if (pc >= start && pc < end) {
            newCurrentTryCatchBlocks.add(node);
          }
        }
        if (!currentTryCatchBlocks.equals(newCurrentTryCatchBlocks)) {
          currentTryCatchBlocks=newCurrentTryCatchBlocks;
          if (!currentTryCatchBlocks.isEmpty()) {
            LandingPad lp=new LandingPad(currentTryCatchBlocks,methodNode,frames);
            landingPads.add(lp);
            currentLandingPad=lp;
          }
 else {
            currentLandingPad=null;
          }
        }
      }
      insn.accept(this);
    }
    pc++;
  }
  for (  LandingPad lpad : landingPads) {
    out.format("%s:\n",lpad.getLabel());
    Var ehptr=tmp("ehptr","i8*");
    out.format("    %s = call i8* @llvm.eh.exception()\n",ehptr);
    Var throwable=tmpr("throwable");
    out.format("    %s = call %%jobject* @j_get_throwable(i8* %s)\n",throwable,ehptr);
    Var sel=tmp("sel","i64");
    out.format("    %s = call i64 (i8*, i8*, ...)* @llvm.eh.selector.i64(i8* %s, " + "i8* bitcast (i32 (i32, i32, i64, i8*, i8*)* @j_eh_personality to i8*), i32 1)\n",sel,ehptr);
    out.format("    store %s %s, %s* %s\n",throwablePtr.getType(),throwable,throwablePtr.getType(),throwablePtr);
    out.format("    br label %%%sMatch\n",lpad.getLabel());
    out.format("%sMatch:\n",lpad.getLabel());
    boolean alwaysMatches=false;
    for (    LandingPadHandler handler : lpad.getHandlers()) {
      String type=handler.getType();
      if (type == null || type.equals("java/lang/Throwable")) {
        out.format("    br label %%%s\n",handler.getLabel());
        alwaysMatches=true;
        break;
      }
 else {
        Var condi32=tmpi("cond");
        Var cond=tmp("cond","i1");
        Var clazz=tmp("clazz","%jclass*");
        out.format("    %s = load %%jclass** @\"%s_%%jclass*\"\n",clazz,LlvmUtil.mangleString(type));
        throwable=tmpr("throwable");
        out.format("    %s = load %s* %s\n",throwable,throwablePtr.getType(),throwablePtr);
        out.format("    %s = call i32 @j_eh_match_throwable(%%jobject* %s, %%jclass* %s)\n",condi32,throwable,clazz);
        out.format("    %s = trunc i32 %s to i1\n",cond,condi32);
        out.format("    br i1 %s, label %%%s%s, label %%%sNot%s\n",cond,lpad.getLabel(),LlvmUtil.mangleString(type),lpad.getLabel(),LlvmUtil.mangleString(type));
        out.format("%s%s:\n",lpad.getLabel(),LlvmUtil.mangleString(type));
        throwable=tmpr("throwable");
        out.format("    %s = load %s* %s\n",throwable,throwablePtr.getType(),throwablePtr);
        setFrame(handler.getFrame());
        stack.pop();
        push(throwable);
        out.format("    br label %%%s\n",handler.getLabel());
        out.format("%sNot%s:\n",lpad.getLabel(),LlvmUtil.mangleString(type));
      }
    }
    if (!alwaysMatches) {
      throwable=tmpr("throwable");
      out.format("    %s = load %s* %s\n",throwable,throwablePtr.getType(),throwablePtr);
      out.format("    call void @nvmThrow(%%jobject* %s)\n",throwable);
      out.format("    unreachable\n");
    }
  }
}
