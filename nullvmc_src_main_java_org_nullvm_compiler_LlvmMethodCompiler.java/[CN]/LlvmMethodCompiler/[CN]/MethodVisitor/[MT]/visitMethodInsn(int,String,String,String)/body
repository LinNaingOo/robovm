{
  Type[] args=Type.getArgumentTypes(desc);
  ArrayUtils.reverse(args);
  LinkedList<Var> argVars=new LinkedList<Var>();
  int n=args.length;
  for (  Type arg : args) {
    Var p=null;
    if (arg.getSize() == 2) {
      p=pop2("p" + (--n));
    }
 else {
      p=pop("p" + (--n));
    }
    if (arg.getSort() == Type.BOOLEAN || arg.getSort() == Type.BYTE) {
      Var tmp=tmp(p.getName(),"i8");
      out.format("    %s = trunc i32 %s to i8\n",tmp,p);
      p=tmp;
    }
 else     if (arg.getSort() == Type.SHORT || arg.getSort() == Type.CHAR) {
      Var tmp=tmp(p.getName(),"i16");
      out.format("    %s = trunc i32 %s to i16\n",tmp,p);
      p=tmp;
    }
    argVars.addFirst(p);
  }
  if (opcode != Opcodes.INVOKESTATIC) {
    Var obj=pop("obj");
    checkNull(obj);
    argVars.addFirst(obj);
  }
  String method=null;
  if (owner.equals(classNode.name)) {
    MethodNode mnode=LlvmUtil.findMethodNode(classNode,name,desc);
    if (mnode != null && ((classNode.access & Opcodes.ACC_STATIC) > 0 || "<init>".equals(mnode.name) || (mnode.access & Opcodes.ACC_PRIVATE) > 0 || (mnode.access & Opcodes.ACC_FINAL) > 0 || (opcode == Opcodes.INVOKESTATIC && (mnode.access & Opcodes.ACC_STATIC) > 0))) {
      method="@" + LlvmUtil.mangleMethod(owner,name,desc);
    }
  }
  if (method == null) {
    String function=opcodeNames[opcode] + "_" + LlvmUtil.mangleMethod(owner,name,desc);
    Var v=tmp(function,LlvmUtil.functionType(desc,opcode == Opcodes.INVOKESTATIC));
    out.format("    %s = load %s** @%s\n",v,v.getType(),function);
    method=v.toString();
  }
  String successLabel=String.format("InvokeSuccess%d",pc);
  Type returnType=Type.getReturnType(desc);
  if (returnType.getSort() == Type.VOID) {
    if (currentTryCatchBlocks.isEmpty()) {
      out.format("    call void %s(%s)\n",method,LlvmUtil.varListToParameterList(argVars));
    }
 else {
      out.format("    invoke void %s(%s) to label %%%s unwind label %%%s\n",method,LlvmUtil.varListToParameterList(argVars),successLabel,currentLandingPad.getLabel());
      out.format("%s:\n",successLabel);
    }
  }
 else {
    String llvmReturnType=LlvmUtil.javaTypeToLlvmType(returnType);
    Var res=tmp("res",llvmReturnType);
    if (currentTryCatchBlocks.isEmpty()) {
      out.format("    %s = call %s %s(%s)\n",res,llvmReturnType,method,LlvmUtil.varListToParameterList(argVars));
    }
 else {
      out.format("    %s = invoke %s %s(%s) to label %%%s unwind label %%%s\n",res,llvmReturnType,method,LlvmUtil.varListToParameterList(argVars),successLabel,currentLandingPad.getLabel());
      out.format("%s:\n",successLabel);
    }
    if (returnType.getSort() == Type.BOOLEAN || returnType.getSort() == Type.CHAR) {
      Var tmp=tmpi("res");
      out.format("    %s = zext %s %s to i32\n",tmp,res.getType(),res);
      res=tmp;
    }
 else     if (returnType.getSort() == Type.BYTE || returnType.getSort() == Type.SHORT) {
      Var tmp=tmpi("res");
      out.format("    %s = sext %s %s to i32\n",tmp,res.getType(),res);
      res=tmp;
    }
    if (returnType.getSize() == 2) {
      push2(res);
    }
 else {
      push(res);
    }
  }
}
