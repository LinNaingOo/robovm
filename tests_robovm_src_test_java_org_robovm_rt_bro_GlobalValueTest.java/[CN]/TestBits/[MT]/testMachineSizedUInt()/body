{
  if (Bro.IS_32BIT) {
    assertEquals(0,memory.order(ByteOrder.nativeOrder()).asIntBuffer().get(0));
    assertEquals(0,machineSizedUIntGetter());
    machineSizedUIntSetter(-1);
    assertEquals(-1,memory.order(ByteOrder.nativeOrder()).asIntBuffer().get(0));
    assertEquals(0xffffffffL,machineSizedUIntGetter());
    assertEquals(0,memory.order(ByteOrder.nativeOrder()).asIntBuffer().get(1));
    machineSizedUIntSetter(0x80000000L);
    assertEquals(0xffffffff80000000L,memory.order(ByteOrder.nativeOrder()).asIntBuffer().get(0));
    assertEquals(0x80000000L,machineSizedUIntGetter());
    assertEquals(0,memory.order(ByteOrder.nativeOrder()).asIntBuffer().get(1));
    machineSizedUIntSetter(0x1234567880000000L);
    assertEquals(0xffffffff80000000L,memory.order(ByteOrder.nativeOrder()).asIntBuffer().get(0));
    assertEquals(0x80000000L,machineSizedUIntGetter());
    assertEquals(0,memory.order(ByteOrder.nativeOrder()).asIntBuffer().get(1));
  }
 else {
    assertEquals(0,memory.order(ByteOrder.nativeOrder()).asLongBuffer().get(0));
    assertEquals(0,machineSizedUIntGetter());
    machineSizedUIntSetter(-1);
    assertEquals(-1,memory.order(ByteOrder.nativeOrder()).asLongBuffer().get(0));
    assertEquals(-1,machineSizedUIntGetter());
    assertEquals(0,memory.order(ByteOrder.nativeOrder()).asLongBuffer().get(1));
    machineSizedUIntSetter(0x80000000L);
    assertEquals(0x80000000L,memory.order(ByteOrder.nativeOrder()).asLongBuffer().get(0));
    assertEquals(0x80000000L,machineSizedUIntGetter());
    assertEquals(0,memory.order(ByteOrder.nativeOrder()).asLongBuffer().get(1));
    machineSizedUIntSetter(0x1234567880000000L);
    assertEquals(0x1234567880000000L,memory.order(ByteOrder.nativeOrder()).asLongBuffer().get(0));
    assertEquals(0x1234567880000000L,machineSizedUIntGetter());
    assertEquals(0,memory.order(ByteOrder.nativeOrder()).asLongBuffer().get(1));
  }
}
