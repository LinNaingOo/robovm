{
  if (other == null)   return;
  WeightedDirectedSparseGraph othergraph=other;
  if (othergraph.isUnknown)   return;
  if (this.isUnknown)   addAll(othergraph);
  List<Object> sourceList=new ArrayList<Object>(this.sources.keySet());
  Iterator<Object> firstSrcIt=sourceList.iterator();
  while (firstSrcIt.hasNext()) {
    Object srcKey=firstSrcIt.next();
    Hashtable src1=this.sources.get(srcKey);
    Hashtable src2=othergraph.sources.get(srcKey);
    if (src2 == null) {
      this.sources.remove(srcKey);
      continue;
    }
    List targetList=new ArrayList(src1.keySet());
    Iterator targetIt=targetList.iterator();
    while (targetIt.hasNext()) {
      Object target=targetIt.next();
      IntContainer w1=(IntContainer)src1.get(target);
      IntContainer w2=(IntContainer)src2.get(target);
      if (w2 == null) {
        src1.remove(target);
        continue;
      }
      if (w2.value > w1.value)       w1.value=w2.value;
    }
    if (src1.size() == 0)     this.sources.remove(srcKey);
  }
}
