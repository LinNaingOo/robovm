{
  int available=super.available();
  if (available <= 0) {
    available=1;
  }
  if (available > inBuf.length) {
    available=super.read(inBuf,0,inBuf.length);
  }
 else {
    available=super.read(inBuf,0,available);
  }
  if (available < 0) {
    if (finalized) {
      return -1;
    }
    try {
      if (bufferedBlockCipher != null) {
        maxBuf=bufferedBlockCipher.doFinal(buf,0);
      }
 else {
        maxBuf=0;
      }
    }
 catch (    Exception e) {
      throw new IOException("error processing stream: " + e.toString());
    }
    bufOff=0;
    finalized=true;
    if (bufOff == maxBuf) {
      return -1;
    }
  }
 else {
    bufOff=0;
    try {
      if (bufferedBlockCipher != null) {
        maxBuf=bufferedBlockCipher.processBytes(inBuf,0,available,buf,0);
      }
 else {
        streamCipher.processBytes(inBuf,0,available,buf,0);
        maxBuf=available;
      }
    }
 catch (    Exception e) {
      throw new IOException("error processing stream: " + e.toString());
    }
    if (maxBuf == 0) {
      return nextChunk();
    }
  }
  return maxBuf;
}
