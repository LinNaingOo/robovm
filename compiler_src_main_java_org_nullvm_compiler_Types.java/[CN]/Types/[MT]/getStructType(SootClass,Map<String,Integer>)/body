{
  List<Type> types=new ArrayList<Type>();
  Map<String,Type> members=new HashMap<String,Type>();
  int index=0;
  for (  SootMethod method : clazz.getMethods()) {
    if (isStructMember(method)) {
      boolean getter=method.getName().startsWith("get");
      boolean setter=method.getName().startsWith("set");
      if (!method.isNative() && !method.isStatic()) {
        throw new IllegalArgumentException("@StructMember annotated method must be native and not static");
      }
      if (!getter && !setter || method.getName().length() == 3) {
        throw new IllegalArgumentException("@StructMember annotated method has invalid name");
      }
      if (getter && method.getParameterCount() != 0) {
        throw new IllegalArgumentException("@StructMember annotated getter method must have no arguments");
      }
      if (setter && method.getParameterCount() != 1) {
        throw new IllegalArgumentException("@StructMember annotated setter method must take a single argument");
      }
      soot.Type sootType=getter ? method.getReturnType() : method.getParameterType(0);
      if (!(sootType instanceof PrimType || sootType instanceof RefType && isStruct(sootType))) {
        if (getter) {
          throw new IllegalArgumentException("@StructMember annotated getter method must return primitive or Struct type");
        }
 else {
          throw new IllegalArgumentException("@StructMember annotated setter method must take a single primitive or Struct type argument");
        }
      }
      String name=method.getName().substring(3,4).toLowerCase() + method.getName().substring(4);
      Type type=sootType instanceof PrimType ? getType(sootType) : I8_PTR;
      if (getter) {
        if (hasPointerAnnotation(method)) {
          if (!sootType.equals(LongType.v()) && !isStruct(sootType)) {
            throw new IllegalArgumentException("@StructMember annotated getter method " + method.getName() + " must return long or Struct when annotated with @Pointer");
          }
          type=I8_PTR;
        }
 else         if (isStruct(sootType)) {
          try {
            type=getStructType(sootType);
          }
 catch (          StackOverflowError e) {
            throw new IllegalArgumentException("Struct type " + sootType + " refers to itself");
          }
        }
      }
 else {
        if (hasPointerAnnotation(method,0)) {
          if (!sootType.equals(LongType.v()) && !isStruct(sootType)) {
            throw new IllegalArgumentException("First parameter of @StructMember annotated setter method " + method.getName() + " must be of type long or Struct when annotated with @Pointer");
          }
          type=I8_PTR;
        }
 else         if (isStruct(sootType)) {
          try {
            type=getStructType(sootType);
          }
 catch (          StackOverflowError e) {
            throw new IllegalArgumentException("Struct type " + sootType + " refers to itself");
          }
        }
      }
      if (members.containsKey(name)) {
        if (!members.get(name).equals(type)) {
          throw new IllegalArgumentException("@StructMember annotated getter and setter methods for property " + name + " have different types");
        }
      }
 else {
        members.put(name,type);
        types.add(type);
        if (indexes != null) {
          indexes.put(name,index);
        }
        index++;
      }
    }
  }
  if (!types.isEmpty()) {
    return new StructureType(types.toArray(new Type[types.size()]));
  }
  return null;
}
