{
  if (readOnly) {
    b=b.asReadOnlyBuffer();
  }
  assertEquals(ByteOrder.BIG_ENDIAN,b.order());
  assertEquals(ByteOrder.BIG_ENDIAN,b.wrap(new byte[10]).order());
  b.order(ByteOrder.BIG_ENDIAN);
  assertEquals(ByteOrder.BIG_ENDIAN,b.duplicate().order());
  b.order(ByteOrder.LITTLE_ENDIAN);
  assertEquals(ByteOrder.BIG_ENDIAN,b.duplicate().order());
  b.order(ByteOrder.BIG_ENDIAN);
  assertEquals(ByteOrder.BIG_ENDIAN,b.slice().order());
  b.order(ByteOrder.LITTLE_ENDIAN);
  assertEquals(ByteOrder.BIG_ENDIAN,b.slice().order());
  b.order(ByteOrder.BIG_ENDIAN);
  assertEquals(ByteOrder.BIG_ENDIAN,b.asCharBuffer().order());
  assertEquals(ByteOrder.BIG_ENDIAN,b.asDoubleBuffer().order());
  assertEquals(ByteOrder.BIG_ENDIAN,b.asFloatBuffer().order());
  assertEquals(ByteOrder.BIG_ENDIAN,b.asIntBuffer().order());
  assertEquals(ByteOrder.BIG_ENDIAN,b.asLongBuffer().order());
  assertEquals(ByteOrder.BIG_ENDIAN,b.asShortBuffer().order());
  assertEquals(ByteOrder.BIG_ENDIAN,b.asReadOnlyBuffer().order());
  b.order(ByteOrder.LITTLE_ENDIAN);
  assertEquals(ByteOrder.LITTLE_ENDIAN,b.asCharBuffer().order());
  assertEquals(ByteOrder.LITTLE_ENDIAN,b.asDoubleBuffer().order());
  assertEquals(ByteOrder.LITTLE_ENDIAN,b.asFloatBuffer().order());
  assertEquals(ByteOrder.LITTLE_ENDIAN,b.asIntBuffer().order());
  assertEquals(ByteOrder.LITTLE_ENDIAN,b.asLongBuffer().order());
  assertEquals(ByteOrder.LITTLE_ENDIAN,b.asShortBuffer().order());
  assertEquals(ByteOrder.BIG_ENDIAN,b.asReadOnlyBuffer().order());
}
