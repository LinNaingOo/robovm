{
  for (int i=0; i < b.limit(); ++i) {
    b.put(i,(byte)i);
  }
  b.position(1);
  char[] chars=new char[6];
  b.order(ByteOrder.BIG_ENDIAN).asCharBuffer().get(chars,1,4);
  assertEquals("[\u0000, \u0102, \u0304, \u0506, \u0708, \u0000]",Arrays.toString(chars));
  b.order(ByteOrder.LITTLE_ENDIAN).asCharBuffer().get(chars,1,4);
  assertEquals("[\u0000, \u0201, \u0403, \u0605, \u0807, \u0000]",Arrays.toString(chars));
  double[] doubles=new double[3];
  b.order(ByteOrder.BIG_ENDIAN).asDoubleBuffer().get(doubles,1,1);
  assertEquals(0,Double.doubleToRawLongBits(doubles[0]));
  assertEquals(0x0102030405060708L,Double.doubleToRawLongBits(doubles[1]));
  assertEquals(0,Double.doubleToRawLongBits(doubles[2]));
  b.order(ByteOrder.LITTLE_ENDIAN).asDoubleBuffer().get(doubles,1,1);
  assertEquals(0,Double.doubleToRawLongBits(doubles[0]));
  assertEquals(0x0807060504030201L,Double.doubleToRawLongBits(doubles[1]));
  assertEquals(0,Double.doubleToRawLongBits(doubles[2]));
  float[] floats=new float[4];
  b.order(ByteOrder.BIG_ENDIAN).asFloatBuffer().get(floats,1,2);
  assertEquals(0,Float.floatToRawIntBits(floats[0]));
  assertEquals(0x01020304,Float.floatToRawIntBits(floats[1]));
  assertEquals(0x05060708,Float.floatToRawIntBits(floats[2]));
  assertEquals(0,Float.floatToRawIntBits(floats[3]));
  b.order(ByteOrder.LITTLE_ENDIAN).asFloatBuffer().get(floats,1,2);
  assertEquals(0,Float.floatToRawIntBits(floats[0]));
  assertEquals(0x04030201,Float.floatToRawIntBits(floats[1]));
  assertEquals(0x08070605,Float.floatToRawIntBits(floats[2]));
  assertEquals(0,Float.floatToRawIntBits(floats[3]));
  int[] ints=new int[4];
  b.order(ByteOrder.BIG_ENDIAN).asIntBuffer().get(ints,1,2);
  assertEquals(0,ints[0]);
  assertEquals(0x01020304,ints[1]);
  assertEquals(0x05060708,ints[2]);
  assertEquals(0,ints[3]);
  b.order(ByteOrder.LITTLE_ENDIAN).asIntBuffer().get(ints,1,2);
  assertEquals(0,ints[0]);
  assertEquals(0x04030201,ints[1]);
  assertEquals(0x08070605,ints[2]);
  assertEquals(0,ints[3]);
  long[] longs=new long[3];
  b.order(ByteOrder.BIG_ENDIAN).asLongBuffer().get(longs,1,1);
  assertEquals(0,longs[0]);
  assertEquals(0x0102030405060708L,longs[1]);
  assertEquals(0,longs[2]);
  b.order(ByteOrder.LITTLE_ENDIAN).asLongBuffer().get(longs,1,1);
  assertEquals(0,longs[0]);
  assertEquals(0x0807060504030201L,longs[1]);
  assertEquals(0,longs[2]);
  short[] shorts=new short[6];
  b.order(ByteOrder.BIG_ENDIAN).asShortBuffer().get(shorts,1,4);
  assertEquals(0,shorts[0]);
  assertEquals(0x0102,shorts[1]);
  assertEquals(0x0304,shorts[2]);
  assertEquals(0x0506,shorts[3]);
  assertEquals(0x0708,shorts[4]);
  assertEquals(0,shorts[5]);
  b.order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(shorts,1,4);
  assertEquals(0,shorts[0]);
  assertEquals(0x0201,shorts[1]);
  assertEquals(0x0403,shorts[2]);
  assertEquals(0x0605,shorts[3]);
  assertEquals(0x0807,shorts[4]);
  assertEquals(0,shorts[5]);
}
