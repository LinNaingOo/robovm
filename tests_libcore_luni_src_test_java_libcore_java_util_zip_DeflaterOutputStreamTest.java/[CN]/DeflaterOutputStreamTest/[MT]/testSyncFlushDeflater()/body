{
  Deflater def=new Deflater();
  Field f=def.getClass().getDeclaredField("flushParm");
  f.setAccessible(true);
  f.setInt(def,Deflater.SYNC_FLUSH);
  final int deflaterBufferSize=512;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DeflaterOutputStream dos=new DeflaterOutputStream(baos,def,deflaterBufferSize);
  final int outputBufferSize=128 * deflaterBufferSize;
  byte[] output=new byte[outputBufferSize];
  for (int i=0; i < output.length; i++) {
    output[i]=(byte)i;
  }
  dos.write(output);
  byte[] compressed=baos.toByteArray();
  assertTrue("compressed=" + compressed.length + " but deflaterBufferSize="+ deflaterBufferSize,compressed.length > deflaterBufferSize);
  ByteArrayInputStream bais=new ByteArrayInputStream(compressed);
  InflaterInputStream iis=new InflaterInputStream(bais);
  byte[] input=new byte[output.length];
  int total=0;
  while (true) {
    int n=iis.read(input,total,input.length - total);
    if (n == -1) {
      break;
    }
    total+=n;
    if (total == input.length) {
      try {
        iis.read();
        fail();
      }
 catch (      EOFException expected) {
        break;
      }
    }
  }
  assertEquals(output.length,total);
  assertTrue(Arrays.equals(input,output));
  assertFalse(def.finished());
  def.end();
  iis.close();
}
