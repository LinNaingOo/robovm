{
  FunctionRef callbackCWrapperRef=getCallbackCWrapperRef(method,Symbols.callbackCSymbol(method));
  getCWrapperFunctions().add(createCallbackCWrapper(callbackCWrapperRef.getType(),callbackCWrapperRef.getName(),Symbols.callbackInnerCSymbol(method)));
  moduleBuilder.addFunctionDeclaration(new FunctionDeclaration(callbackCWrapperRef));
  Type callbackRetType=callbackCWrapperRef.getType().getReturnType() instanceof StructureType ? I8_PTR : callbackCWrapperRef.getType().getReturnType();
  Type[] callbackParamTypes=new Type[callbackCWrapperRef.getType().getParameterTypes().length];
  for (int i=0; i < callbackParamTypes.length; i++) {
    Type t=callbackCWrapperRef.getType().getParameterTypes()[i];
    if (t instanceof StructureType) {
      t=I8_PTR;
    }
    callbackParamTypes[i]=t;
  }
  Function callbackFn=new FunctionBuilder(Symbols.callbackInnerCSymbol(method),new FunctionType(callbackRetType,callbackParamTypes)).build();
  moduleBuilder.addFunction(callbackFn);
  moduleBuilder.addAlias(new Alias(Symbols.callbackPtrSymbol(method),Linkage._private,new ConstantBitcast(callbackCWrapperRef,I8_PTR)));
  String targetName=method.isSynchronized() ? Symbols.synchronizedWrapperSymbol(method) : Symbols.methodSymbol(method);
  FunctionRef targetFn=new FunctionRef(targetName,getFunctionType(method));
  Value env=call(callbackFn,BC_ATTACH_THREAD_FROM_CALLBACK);
  BasicBlockRef bbSuccess=callbackFn.newBasicBlockRef(new Label("success"));
  BasicBlockRef bbFailure=callbackFn.newBasicBlockRef(new Label("failure"));
  pushCallbackFrame(callbackFn,env);
  trycatchAllEnter(callbackFn,env,bbSuccess,bbFailure);
  callbackFn.newBasicBlock(bbSuccess.getLabel());
  List<MarshaledArg> marshaledArgs=new ArrayList<MarshaledArg>();
  ArrayList<Value> args=new ArrayList<Value>();
  args.add(env);
  if (!method.isStatic()) {
    MarshalerMethod marshalerMethod=config.getMarshalerLookup().findMarshalerMethod(new MarshalSite(method,MarshalSite.RECEIVER));
    MarshaledArg marshaledArg=new MarshaledArg();
    marshaledArg.paramIndex=MarshalSite.RECEIVER;
    marshaledArgs.add(marshaledArg);
    Value arg=callbackFn.getParameterRef(0);
    String targetClassName=getInternalName(method.getDeclaringClass());
    arg=marshalNativeToObject(callbackFn,marshalerMethod,marshaledArg,env,targetClassName,arg,MarshalerFlags.CALL_TYPE_CALLBACK);
    args.add(arg);
  }
  for (int i=0, argIdx=0; i < method.getParameterCount(); i++, argIdx++) {
    if (!method.isStatic() && argIdx == 0) {
      argIdx++;
    }
    Value arg=callbackFn.getParameterRef(argIdx);
    soot.Type type=method.getParameterType(i);
    if (needsMarshaler(type)) {
      MarshalerMethod marshalerMethod=config.getMarshalerLookup().findMarshalerMethod(new MarshalSite(method,i));
      String targetClassName=getInternalName(type);
      if (arg.getType() instanceof PrimitiveType) {
        arg=marshalNativeToValueObject(callbackFn,marshalerMethod,env,targetClassName,arg,MarshalerFlags.CALL_TYPE_CALLBACK);
      }
 else {
        MarshaledArg marshaledArg=new MarshaledArg();
        marshaledArg.paramIndex=i;
        marshaledArgs.add(marshaledArg);
        Type nativeType=callbackCWrapperRef.getType().getParameterTypes()[argIdx];
        if (nativeType instanceof StructureType) {
          DataLayout dataLayout=config.getDataLayout();
          Value heapCopy=call(callbackFn,BC_COPY_STRUCT,env,arg,new IntegerConstant(dataLayout.getAllocSize(nativeType)));
          arg=marshalNativeToObject(callbackFn,marshalerMethod,marshaledArg,env,targetClassName,heapCopy,MarshalerFlags.CALL_TYPE_CALLBACK);
        }
 else {
          arg=marshalNativeToObject(callbackFn,marshalerMethod,marshaledArg,env,targetClassName,arg,MarshalerFlags.CALL_TYPE_CALLBACK);
        }
      }
    }
 else {
      arg=marshalNativeToPrimitive(callbackFn,method,i,arg);
    }
    args.add(arg);
  }
  Value result=call(callbackFn,targetFn,args);
  updateNative(method,callbackFn,env,MarshalerFlags.CALL_TYPE_CALLBACK,marshaledArgs);
  if (needsMarshaler(method.getReturnType())) {
    MarshalerMethod marshalerMethod=config.getMarshalerLookup().findMarshalerMethod(new MarshalSite(method));
    Type nativeType=callbackFn.getType().getReturnType();
    if (nativeType instanceof PrimitiveType) {
      result=marshalValueObjectToNative(callbackFn,marshalerMethod,nativeType,env,result,MarshalerFlags.CALL_TYPE_CALLBACK);
    }
 else {
      result=marshalObjectToNative(callbackFn,marshalerMethod,null,nativeType,env,result,MarshalerFlags.CALL_TYPE_CALLBACK);
    }
  }
 else {
    result=marshalPrimitiveToNative(callbackFn,method,result);
  }
  trycatchLeave(callbackFn,env);
  popCallbackFrame(callbackFn,env);
  call(callbackFn,BC_DETACH_THREAD_FROM_CALLBACK,env);
  callbackFn.add(new Ret(result));
  callbackFn.newBasicBlock(bbFailure.getLabel());
  trycatchLeave(callbackFn,env);
  popCallbackFrame(callbackFn,env);
  Value ex=call(callbackFn,BC_EXCEPTION_CLEAR,env);
  updateNative(method,callbackFn,env,MarshalerFlags.CALL_TYPE_CALLBACK,marshaledArgs);
  call(callbackFn,BC_DETACH_THREAD_FROM_CALLBACK,env);
  call(callbackFn,BC_THROW,env,ex);
  callbackFn.add(new Unreachable());
  return callbackFn;
}
