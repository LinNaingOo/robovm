{
  if (t instanceof LdcString) {
    return;
  }
  Function f=new Function(Linkage.external,t.getFunctionRef());
  if (!checkClassExists(f,t) || !checkClassAccessible(f,t)) {
    module.addFunction(f);
    return;
  }
  if (t instanceof New) {
    Clazz target=config.getClazzes().load(t.getTarget());
    if (target.getClazzInfo().isAbstract() || target.getClazzInfo().isInterface()) {
      call(f,NVM_BC_THROW_INSTANTIATION_ERROR,f.getParameterRef(0),getString(t.getTarget()));
      f.add(new Unreachable());
      module.addFunction(f);
      return;
    }
    aliases.put(t.getFunctionName(),mangleClass(target.getInternalName()) + "_allocator_clinit");
  }
 else   if (t instanceof ExceptionMatch) {
    String fnName=mangleClass(t.getTarget()) + "_exmatch";
    if (!module.hasFunctionDefined(fnName)) {
      Function fn=new Function(Linkage.external,t.getFunctionRef(),fnName);
      GlobalRef exHeader=new GlobalRef(mangleClass(t.getTarget()) + "_info",I8_PTR);
      Value result=call(fn,NVM_BC_EXCEPTION_MATCH,f.getParameterRef(0),exHeader);
      fn.add(new Ret(result));
      module.addFunction(fn);
    }
    aliases.put(t.getFunctionName(),fnName);
  }
 else   if (t instanceof Instanceof) {
    if (isArray(t.getTarget())) {
      String fnName="array_" + mangleClass(t.getTarget()) + "_instanceof";
      if (!module.hasFunctionDefined(fnName)) {
        Function fn=new Function(Linkage.external,t.getFunctionRef(),fnName);
        Value arrayClass=callLdcArray(module,fn,t.getTarget());
        Value result=call(fn,NVM_BC_INSTANCEOF_ARRAY,fn.getParameterRef(0),arrayClass,fn.getParameterRef(1));
        fn.add(new Ret(result));
        module.addFunction(fn);
      }
      aliases.put(t.getFunctionName(),fnName);
    }
 else {
      aliases.put(t.getFunctionName(),mangleClass(t.getTarget()) + "_instanceof_clinit");
    }
  }
 else   if (t instanceof Checkcast) {
    if (isArray(t.getTarget())) {
      String fnName="array_" + mangleClass(t.getTarget()) + "_checkcast";
      if (!module.hasFunctionDefined(fnName)) {
        Function fn=new Function(Linkage.external,t.getFunctionRef(),fnName);
        Value arrayClass=callLdcArray(module,fn,t.getTarget());
        Value result=call(fn,NVM_BC_CHECKCAST_ARRAY,fn.getParameterRef(0),arrayClass,fn.getParameterRef(1));
        fn.add(new Ret(result));
        module.addFunction(fn);
      }
      aliases.put(t.getFunctionName(),fnName);
    }
 else {
      aliases.put(t.getFunctionName(),mangleClass(t.getTarget()) + "_checkcast_clinit");
    }
  }
 else   if (t instanceof LdcClass) {
    if (isArray(t.getTarget())) {
      FunctionRef fn=createLdcArray(module,t.getTarget());
      aliases.put(t.getFunctionName(),fn.getName());
    }
 else {
      Clazz target=config.getClazzes().load(t.getTarget());
      aliases.put(t.getFunctionName(),mangleClass(target.getInternalName()) + "_ldc_clinit");
    }
  }
 else   if (t instanceof Anewarray) {
    String fnName="array_" + mangleClass(t.getTarget()) + "_new";
    if (!module.hasFunctionDefined(fnName)) {
      Function fn=new Function(Linkage.external,t.getFunctionRef(),fnName);
      Value arrayClass=callLdcArray(module,fn,t.getTarget());
      Value result=call(fn,NVM_BC_NEW_OBJECT_ARRAY,fn.getParameterRef(0),fn.getParameterRef(1),arrayClass);
      fn.add(new Ret(result));
      module.addFunction(fn);
    }
    aliases.put(t.getFunctionName(),fnName);
  }
 else   if (t instanceof Multianewarray) {
    String fnName="array_" + mangleClass(t.getTarget()) + "_multi";
    if (!module.hasFunctionDefined(fnName)) {
      Function fn=new Function(Linkage.external,t.getFunctionRef(),fnName);
      Value arrayClass=callLdcArray(module,fn,t.getTarget());
      Value result=call(fn,NVM_BC_NEW_MULTI_ARRAY,fn.getParameterRef(0),fn.getParameterRef(1),fn.getParameterRef(2),arrayClass);
      fn.add(new Ret(result));
      module.addFunction(fn);
    }
    aliases.put(t.getFunctionName(),fnName);
  }
 else   if (t instanceof NativeCall) {
    Clazz target=config.getClazzes().load(t.getTarget());
    NativeCall nc=(NativeCall)t;
    String shortName=mangleNativeMethod(target.getInternalName(),nc.getMethodName());
    String longName=mangleNativeMethod(target.getInternalName(),nc.getMethodName(),nc.getMethodDesc());
    if (target.isInBootClasspath()) {
      Function fnLong=new Function(Linkage.weak,longName,nc.getFunctionType());
      call(fnLong,NVM_BC_THROW_UNSATISIFED_LINK_ERROR,fnLong.getParameterRef(0));
      fnLong.add(new Unreachable());
      module.addFunction(fnLong);
      FunctionRef targetFn=fnLong.ref();
      if (!isLongNativeFunctionNameRequired(nc)) {
        Function fnShort=new Function(Linkage.weak,shortName,nc.getFunctionType());
        Value resultInner=call(fnShort,fnLong.ref(),fnShort.getParameterRefs());
        fnShort.add(new Ret(resultInner));
        module.addFunction(fnShort);
        targetFn=fnShort.ref();
      }
      Function fn=new Function(Linkage.external,nc.getFunctionRef());
      Value result=call(fn,targetFn,fn.getParameterRefs());
      fn.add(new Ret(result));
      module.addFunction(fn);
    }
 else {
      Global g=new Global("native_" + mangleMethod(nc.getTarget(),nc.getMethodName(),nc.getMethodDesc()) + "_ptr",new NullConstant(I8_PTR));
      module.addGlobal(g);
      Function fn=new Function(Linkage.external,nc.getFunctionRef());
      Value implI8Ptr=call(fn,NVM_BC_RESOLVE_NATIVE,fn.getParameterRef(0),new GlobalRef(mangleClass(nc.getTarget()) + "_info",I8_PTR),getString(nc.getMethodName()),getString(nc.getMethodDesc()),getString(mangleNativeMethod(nc.getTarget(),nc.getMethodName())),getString(mangleNativeMethod(nc.getTarget(),nc.getMethodName(),nc.getMethodDesc())),g.ref());
      Variable impl=fn.newVariable(nc.getFunctionType());
      fn.add(new Bitcast(impl,implI8Ptr,impl.getType()));
      Value result=call(fn,impl.ref(),fn.getParameterRefs());
      fn.add(new Ret(result));
      module.addFunction(fn);
    }
  }
 else   if (t instanceof FieldAccessor) {
    ResolvedField rf=resolveField(f,(FieldAccessor)t);
    if (rf == null || !checkAccessible(f,t,rf)) {
      module.addFunction(f);
      return;
    }
    Clazz caller=config.getClazzes().load(t.getCallingClass());
    Clazz target=config.getClazzes().load(t.getTarget());
    if (!((FieldAccessor)t).isGetter() && rf.field.isFinal() && caller != target) {
      throwIllegalAccessError(f,"Attempt to write to final field %s.%s " + "from class %s",target,rf.field.getName(),caller);
      module.addFunction(f);
      return;
    }
    createTrampolineAliasForField(module,(FieldAccessor)t,rf);
  }
 else   if (t instanceof Invokeinterface) {
    ResolvedMethod rm=resolveInterfaceMethod(f,(Invokeinterface)t);
    if (rm == null || !checkAccessible(f,t,rm)) {
      module.addFunction(f);
      return;
    }
    createTrampolineAliasForMethod(module,(Invoke)t,rm);
  }
 else   if (t instanceof Invoke) {
    ResolvedMethod rm=resolveMethod(f,(Invoke)t);
    if (rm == null || !checkAccessible(f,t,rm)) {
      module.addFunction(f);
      return;
    }
    if (t instanceof Invokespecial && rm.method.isAbstract()) {
      call(f,NVM_BC_THROW_ABSTRACT_METHOD_ERROR,f.getParameterRef(0),getString(String.format("%s.%s%s",rm.clazz.getClassName(),rm.method.getName(),rm.method.getDesc())));
      f.add(new Unreachable());
      module.addFunction(f);
      return;
    }
    createTrampolineAliasForMethod(module,(Invoke)t,rm);
  }
}
