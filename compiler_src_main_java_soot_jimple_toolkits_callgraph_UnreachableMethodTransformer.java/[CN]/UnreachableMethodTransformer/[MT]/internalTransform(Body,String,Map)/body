{
  ReachableMethods reachableMethods=Scene.v().getReachableMethods();
  SootMethod method=b.getMethod();
  if (reachableMethods.contains(method))   return;
  JimpleBody body=(JimpleBody)method.getActiveBody();
  PatchingChain units=body.getUnits();
  List<Unit> list=new Vector<Unit>();
  Local tmpRef=Jimple.v().newLocal("tmpRef",RefType.v("java.io.PrintStream"));
  body.getLocals().add(tmpRef);
  list.add(Jimple.v().newAssignStmt(tmpRef,Jimple.v().newStaticFieldRef(Scene.v().getField("<java.lang.System: java.io.PrintStream out>").makeRef())));
  SootMethod toCall=Scene.v().getMethod("<java.lang.Thread: void dumpStack()>");
  list.add(Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(toCall.makeRef())));
  toCall=Scene.v().getMethod("<java.io.PrintStream: void println(java.lang.String)>");
  list.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(tmpRef,toCall.makeRef(),StringConstant.v("Executing supposedly unreachable method:"))));
  list.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(tmpRef,toCall.makeRef(),StringConstant.v("\t" + method.getDeclaringClass().getName() + "."+ method.getName()))));
  toCall=Scene.v().getMethod("<java.lang.System: void exit(int)>");
  list.add(Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(toCall.makeRef(),IntConstant.v(1))));
{
    units.insertBefore(list,units.getFirst());
  }
}
