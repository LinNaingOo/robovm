{
  Set<EnumFoo> set=EnumSet.noneOf(EnumFoo.class);
  try {
    set.removeAll(null);
    fail("Should throw NullPointerException");
  }
 catch (  NullPointerException e) {
  }
  set=EnumSet.allOf(EnumFoo.class);
  assertEquals("Size of set should be 64:",64,set.size());
  try {
    set.removeAll(null);
    fail("Should throw NullPointerException");
  }
 catch (  NullPointerException e) {
  }
  Collection<EnumFoo> collection=new ArrayList<EnumFoo>();
  collection.add(EnumFoo.a);
  boolean result=set.removeAll(collection);
  assertTrue("Should return true",result);
  assertEquals("Size of set should be 63",63,set.size());
  collection=new ArrayList();
  result=set.removeAll(collection);
  assertFalse("Should return false",result);
  Set<EmptyEnum> emptySet=EnumSet.noneOf(EmptyEnum.class);
  result=set.removeAll(emptySet);
  assertFalse("Should return false",result);
  EnumSet<EnumFoo> emptyFooSet=EnumSet.noneOf(EnumFoo.class);
  result=set.removeAll(emptyFooSet);
  assertFalse("Should return false",result);
  emptyFooSet.add(EnumFoo.a);
  result=set.removeAll(emptyFooSet);
  assertFalse("Should return false",result);
  Set<EnumWithInnerClass> setWithSubclass=EnumSet.noneOf(EnumWithInnerClass.class);
  result=set.removeAll(setWithSubclass);
  assertFalse("Should return false",result);
  setWithSubclass.add(EnumWithInnerClass.a);
  result=set.removeAll(setWithSubclass);
  assertFalse("Should return false",result);
  Set<EnumFoo> anotherSet=EnumSet.noneOf(EnumFoo.class);
  anotherSet.add(EnumFoo.a);
  set=EnumSet.allOf(EnumFoo.class);
  result=set.removeAll(anotherSet);
  assertTrue("Should return true",result);
  assertEquals("Size of set should be 63:",63,set.size());
  Set<EnumWithInnerClass> setWithInnerClass=EnumSet.noneOf(EnumWithInnerClass.class);
  setWithInnerClass.add(EnumWithInnerClass.a);
  setWithInnerClass.add(EnumWithInnerClass.b);
  Set<EnumWithInnerClass> anotherSetWithInnerClass=EnumSet.noneOf(EnumWithInnerClass.class);
  anotherSetWithInnerClass.add(EnumWithInnerClass.c);
  anotherSetWithInnerClass.add(EnumWithInnerClass.d);
  result=anotherSetWithInnerClass.removeAll(setWithInnerClass);
  assertFalse("Should return false",result);
  anotherSetWithInnerClass.add(EnumWithInnerClass.a);
  result=anotherSetWithInnerClass.removeAll(setWithInnerClass);
  assertTrue("Should return true",result);
  assertEquals("Size of anotherSetWithInnerClass should remain 2",2,anotherSetWithInnerClass.size());
  anotherSetWithInnerClass.remove(EnumWithInnerClass.c);
  anotherSetWithInnerClass.remove(EnumWithInnerClass.d);
  result=anotherSetWithInnerClass.remove(setWithInnerClass);
  assertFalse("Should return false",result);
  Set rawSet=EnumSet.allOf(EnumWithAllInnerClass.class);
  result=rawSet.removeAll(EnumSet.allOf(EnumFoo.class));
  assertFalse("Should return false",result);
  setWithInnerClass=EnumSet.allOf(EnumWithInnerClass.class);
  anotherSetWithInnerClass=EnumSet.allOf(EnumWithInnerClass.class);
  setWithInnerClass.remove(EnumWithInnerClass.a);
  anotherSetWithInnerClass.remove(EnumWithInnerClass.f);
  result=setWithInnerClass.removeAll(anotherSetWithInnerClass);
  assertTrue("Should return true",result);
  assertEquals("Size of setWithInnerClass should be 1",1,setWithInnerClass.size());
  result=setWithInnerClass.contains(EnumWithInnerClass.f);
  assertTrue("Should return true",result);
  Set<HugeEnum> hugeSet=EnumSet.allOf(HugeEnum.class);
  Collection<HugeEnum> hugeCollection=new ArrayList<HugeEnum>();
  hugeCollection.add(HugeEnum.a);
  result=hugeSet.removeAll(hugeCollection);
  assertTrue(result);
  assertEquals(64,hugeSet.size());
  collection=new ArrayList();
  result=hugeSet.removeAll(collection);
  assertFalse(result);
  Set<HugeEnum> emptyHugeSet=EnumSet.noneOf(HugeEnum.class);
  result=hugeSet.removeAll(emptyHugeSet);
  assertFalse(result);
  Set<HugeEnumWithInnerClass> hugeSetWithSubclass=EnumSet.noneOf(HugeEnumWithInnerClass.class);
  result=hugeSet.removeAll(hugeSetWithSubclass);
  assertFalse(result);
  hugeSetWithSubclass.add(HugeEnumWithInnerClass.a);
  result=hugeSet.removeAll(hugeSetWithSubclass);
  assertFalse(result);
  Set<HugeEnum> anotherHugeSet=EnumSet.noneOf(HugeEnum.class);
  anotherHugeSet.add(HugeEnum.a);
  hugeSet=EnumSet.allOf(HugeEnum.class);
  result=hugeSet.removeAll(anotherHugeSet);
  assertTrue(result);
  assertEquals(63,set.size());
  Set<HugeEnumWithInnerClass> hugeSetWithInnerClass=EnumSet.noneOf(HugeEnumWithInnerClass.class);
  hugeSetWithInnerClass.add(HugeEnumWithInnerClass.a);
  hugeSetWithInnerClass.add(HugeEnumWithInnerClass.b);
  Set<HugeEnumWithInnerClass> anotherHugeSetWithInnerClass=EnumSet.noneOf(HugeEnumWithInnerClass.class);
  anotherHugeSetWithInnerClass.add(HugeEnumWithInnerClass.c);
  anotherHugeSetWithInnerClass.add(HugeEnumWithInnerClass.d);
  result=anotherHugeSetWithInnerClass.removeAll(setWithInnerClass);
  assertFalse("Should return false",result);
  anotherHugeSetWithInnerClass.add(HugeEnumWithInnerClass.a);
  result=anotherHugeSetWithInnerClass.removeAll(hugeSetWithInnerClass);
  assertTrue(result);
  assertEquals(2,anotherHugeSetWithInnerClass.size());
  anotherHugeSetWithInnerClass.remove(HugeEnumWithInnerClass.c);
  anotherHugeSetWithInnerClass.remove(HugeEnumWithInnerClass.d);
  result=anotherHugeSetWithInnerClass.remove(hugeSetWithInnerClass);
  assertFalse(result);
  rawSet=EnumSet.allOf(HugeEnumWithInnerClass.class);
  result=rawSet.removeAll(EnumSet.allOf(HugeEnum.class));
  assertFalse(result);
  hugeSetWithInnerClass=EnumSet.allOf(HugeEnumWithInnerClass.class);
  anotherHugeSetWithInnerClass=EnumSet.allOf(HugeEnumWithInnerClass.class);
  hugeSetWithInnerClass.remove(HugeEnumWithInnerClass.a);
  anotherHugeSetWithInnerClass.remove(HugeEnumWithInnerClass.f);
  result=hugeSetWithInnerClass.removeAll(anotherHugeSetWithInnerClass);
  assertTrue(result);
  assertEquals(1,hugeSetWithInnerClass.size());
  result=hugeSetWithInnerClass.contains(HugeEnumWithInnerClass.f);
  assertTrue(result);
}
