{
  Set<EnumFoo> set=EnumSet.allOf(EnumFoo.class);
  try {
    set.retainAll(null);
    fail("Should throw NullPointerException");
  }
 catch (  NullPointerException e) {
  }
  set.clear();
  boolean result=set.retainAll(null);
  assertFalse("Should return false",result);
  Collection rawCollection=new ArrayList();
  result=set.retainAll(rawCollection);
  assertFalse("Should return false",result);
  rawCollection.add(EnumFoo.a);
  result=set.retainAll(rawCollection);
  assertFalse("Should return false",result);
  rawCollection.add(EnumWithInnerClass.a);
  result=set.retainAll(rawCollection);
  assertFalse("Should return false",result);
  assertEquals("Size of set should be 0:",0,set.size());
  rawCollection.remove(EnumFoo.a);
  result=set.retainAll(rawCollection);
  assertFalse("Should return false",result);
  Set<EnumFoo> anotherSet=EnumSet.allOf(EnumFoo.class);
  result=set.retainAll(anotherSet);
  assertFalse("Should return false",result);
  assertEquals("Size of set should be 0",0,set.size());
  Set<EnumWithInnerClass> setWithInnerClass=EnumSet.allOf(EnumWithInnerClass.class);
  result=set.retainAll(setWithInnerClass);
  assertFalse("Should return false",result);
  assertEquals("Size of set should be 0",0,set.size());
  setWithInnerClass=EnumSet.noneOf(EnumWithInnerClass.class);
  result=set.retainAll(setWithInnerClass);
  assertFalse("Should return false",result);
  Set<EmptyEnum> emptySet=EnumSet.allOf(EmptyEnum.class);
  result=set.retainAll(emptySet);
  assertFalse("Should return false",result);
  Set<EnumWithAllInnerClass> setWithAllInnerClass=EnumSet.allOf(EnumWithAllInnerClass.class);
  result=set.retainAll(setWithAllInnerClass);
  assertFalse("Should return false",result);
  set.add(EnumFoo.a);
  result=set.retainAll(setWithInnerClass);
  assertTrue("Should return true",result);
  assertEquals("Size of set should be 0",0,set.size());
  setWithInnerClass=EnumSet.allOf(EnumWithInnerClass.class);
  setWithInnerClass.remove(EnumWithInnerClass.f);
  Set<EnumWithInnerClass> anotherSetWithInnerClass=EnumSet.noneOf(EnumWithInnerClass.class);
  anotherSetWithInnerClass.add(EnumWithInnerClass.e);
  anotherSetWithInnerClass.add(EnumWithInnerClass.f);
  result=setWithInnerClass.retainAll(anotherSetWithInnerClass);
  assertTrue("Should return true",result);
  result=setWithInnerClass.contains(EnumWithInnerClass.e);
  assertTrue("Should contain EnumWithInnerClass.e",result);
  result=setWithInnerClass.contains(EnumWithInnerClass.b);
  assertFalse("Should not contain EnumWithInnerClass.b",result);
  assertEquals("Size of set should be 1:",1,setWithInnerClass.size());
  anotherSetWithInnerClass=EnumSet.allOf(EnumWithInnerClass.class);
  result=setWithInnerClass.retainAll(anotherSetWithInnerClass);
  assertFalse("Return value should be false",result);
  rawCollection=new ArrayList();
  rawCollection.add(EnumWithInnerClass.e);
  rawCollection.add(EnumWithInnerClass.f);
  result=setWithInnerClass.retainAll(rawCollection);
  assertFalse("Should return false",result);
  set=EnumSet.allOf(EnumFoo.class);
  set.remove(EnumFoo.a);
  anotherSet=EnumSet.noneOf(EnumFoo.class);
  anotherSet.add(EnumFoo.a);
  result=set.retainAll(anotherSet);
  assertTrue("Should return true",result);
  assertEquals("size should be 0",0,set.size());
  Set<HugeEnum> hugeSet=EnumSet.allOf(HugeEnum.class);
  try {
    hugeSet.retainAll(null);
    fail("Should throw NullPointerException");
  }
 catch (  NullPointerException e) {
  }
  hugeSet.clear();
  result=hugeSet.retainAll(null);
  assertFalse(result);
  rawCollection=new ArrayList();
  result=hugeSet.retainAll(rawCollection);
  assertFalse(result);
  rawCollection.add(HugeEnum.a);
  result=hugeSet.retainAll(rawCollection);
  assertFalse(result);
  rawCollection.add(HugeEnumWithInnerClass.a);
  result=hugeSet.retainAll(rawCollection);
  assertFalse(result);
  assertEquals(0,set.size());
  rawCollection.remove(HugeEnum.a);
  result=set.retainAll(rawCollection);
  assertFalse(result);
  Set<HugeEnum> anotherHugeSet=EnumSet.allOf(HugeEnum.class);
  result=hugeSet.retainAll(anotherHugeSet);
  assertFalse(result);
  assertEquals(0,hugeSet.size());
  Set<HugeEnumWithInnerClass> hugeSetWithInnerClass=EnumSet.allOf(HugeEnumWithInnerClass.class);
  result=hugeSet.retainAll(hugeSetWithInnerClass);
  assertFalse(result);
  assertEquals(0,hugeSet.size());
  hugeSetWithInnerClass=EnumSet.noneOf(HugeEnumWithInnerClass.class);
  result=hugeSet.retainAll(hugeSetWithInnerClass);
  assertFalse(result);
  Set<HugeEnumWithInnerClass> hugeSetWithAllInnerClass=EnumSet.allOf(HugeEnumWithInnerClass.class);
  result=hugeSet.retainAll(hugeSetWithAllInnerClass);
  assertFalse(result);
  hugeSet.add(HugeEnum.a);
  result=hugeSet.retainAll(hugeSetWithInnerClass);
  assertTrue(result);
  assertEquals(0,hugeSet.size());
  hugeSetWithInnerClass=EnumSet.allOf(HugeEnumWithInnerClass.class);
  hugeSetWithInnerClass.remove(HugeEnumWithInnerClass.f);
  Set<HugeEnumWithInnerClass> anotherHugeSetWithInnerClass=EnumSet.noneOf(HugeEnumWithInnerClass.class);
  anotherHugeSetWithInnerClass.add(HugeEnumWithInnerClass.e);
  anotherHugeSetWithInnerClass.add(HugeEnumWithInnerClass.f);
  result=hugeSetWithInnerClass.retainAll(anotherHugeSetWithInnerClass);
  assertTrue(result);
  result=hugeSetWithInnerClass.contains(HugeEnumWithInnerClass.e);
  assertTrue("Should contain HugeEnumWithInnerClass.e",result);
  result=hugeSetWithInnerClass.contains(HugeEnumWithInnerClass.b);
  assertFalse("Should not contain HugeEnumWithInnerClass.b",result);
  assertEquals("Size of hugeSet should be 1:",1,hugeSetWithInnerClass.size());
  anotherHugeSetWithInnerClass=EnumSet.allOf(HugeEnumWithInnerClass.class);
  result=hugeSetWithInnerClass.retainAll(anotherHugeSetWithInnerClass);
  assertFalse("Return value should be false",result);
  rawCollection=new ArrayList();
  rawCollection.add(HugeEnumWithInnerClass.e);
  rawCollection.add(HugeEnumWithInnerClass.f);
  result=hugeSetWithInnerClass.retainAll(rawCollection);
  assertFalse(result);
  hugeSet=EnumSet.allOf(HugeEnum.class);
  hugeSet.remove(HugeEnum.a);
  anotherHugeSet=EnumSet.noneOf(HugeEnum.class);
  anotherHugeSet.add(HugeEnum.a);
  result=hugeSet.retainAll(anotherHugeSet);
  assertTrue(result);
  assertEquals(0,hugeSet.size());
}
