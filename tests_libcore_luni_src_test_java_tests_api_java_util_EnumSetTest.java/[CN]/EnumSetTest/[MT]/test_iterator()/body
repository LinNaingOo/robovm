{
  Set<EnumFoo> set=EnumSet.noneOf(EnumFoo.class);
  set.add(EnumFoo.a);
  set.add(EnumFoo.b);
  Iterator<EnumFoo> iterator=set.iterator();
  Iterator<EnumFoo> anotherIterator=set.iterator();
  assertNotSame("Should not be same",iterator,anotherIterator);
  try {
    iterator.remove();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  assertTrue("Should has next element:",iterator.hasNext());
  assertSame("Should be identical",EnumFoo.a,iterator.next());
  iterator.remove();
  assertTrue("Should has next element:",iterator.hasNext());
  assertSame("Should be identical",EnumFoo.b,iterator.next());
  assertFalse("Should not has next element:",iterator.hasNext());
  assertFalse("Should not has next element:",iterator.hasNext());
  assertEquals("Size should be 1:",1,set.size());
  try {
    iterator.next();
    fail("Should throw NoSuchElementException");
  }
 catch (  NoSuchElementException e) {
  }
  set=EnumSet.noneOf(EnumFoo.class);
  set.add(EnumFoo.a);
  iterator=set.iterator();
  assertEquals("Should be equal",EnumFoo.a,iterator.next());
  iterator.remove();
  try {
    iterator.remove();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  Set<EmptyEnum> emptySet=EnumSet.allOf(EmptyEnum.class);
  Iterator<EmptyEnum> emptyIterator=emptySet.iterator();
  try {
    emptyIterator.next();
    fail("Should throw NoSuchElementException");
  }
 catch (  NoSuchElementException e) {
  }
  Set<EnumWithInnerClass> setWithSubclass=EnumSet.allOf(EnumWithInnerClass.class);
  setWithSubclass.remove(EnumWithInnerClass.e);
  Iterator<EnumWithInnerClass> iteratorWithSubclass=setWithSubclass.iterator();
  assertSame("Should be same",EnumWithInnerClass.a,iteratorWithSubclass.next());
  assertTrue("Should return true",iteratorWithSubclass.hasNext());
  assertSame("Should be same",EnumWithInnerClass.b,iteratorWithSubclass.next());
  setWithSubclass.remove(EnumWithInnerClass.c);
  assertTrue("Should return true",iteratorWithSubclass.hasNext());
  assertSame("Should be same",EnumWithInnerClass.c,iteratorWithSubclass.next());
  assertTrue("Should return true",iteratorWithSubclass.hasNext());
  assertSame("Should be same",EnumWithInnerClass.d,iteratorWithSubclass.next());
  setWithSubclass.add(EnumWithInnerClass.e);
  assertTrue("Should return true",iteratorWithSubclass.hasNext());
  assertSame("Should be same",EnumWithInnerClass.f,iteratorWithSubclass.next());
  set=EnumSet.noneOf(EnumFoo.class);
  iterator=set.iterator();
  try {
    iterator.next();
    fail("Should throw NoSuchElementException");
  }
 catch (  NoSuchElementException e) {
  }
  set.add(EnumFoo.a);
  iterator=set.iterator();
  assertEquals("Should return EnumFoo.a",EnumFoo.a,iterator.next());
  assertEquals("Size of set should be 1",1,set.size());
  iterator.remove();
  assertEquals("Size of set should be 0",0,set.size());
  assertFalse("Should return false",set.contains(EnumFoo.a));
  set.add(EnumFoo.a);
  set.add(EnumFoo.b);
  iterator=set.iterator();
  assertEquals("Should be equals",EnumFoo.a,iterator.next());
  iterator.remove();
  try {
    iterator.remove();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  assertTrue("Should have next element",iterator.hasNext());
  try {
    iterator.remove();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  assertEquals("Size of set should be 1",1,set.size());
  assertTrue("Should have next element",iterator.hasNext());
  assertEquals("Should return EnumFoo.b",EnumFoo.b,iterator.next());
  set.remove(EnumFoo.b);
  assertEquals("Size of set should be 0",0,set.size());
  iterator.remove();
  assertFalse("Should return false",set.contains(EnumFoo.a));
  if (!disableRIBugs) {
    assertFalse("Should return false",set.contains(EnumFoo.b));
  }
  Set<HugeEnum> hugeSet=EnumSet.noneOf(HugeEnum.class);
  hugeSet.add(HugeEnum.a);
  hugeSet.add(HugeEnum.b);
  Iterator<HugeEnum> hIterator=hugeSet.iterator();
  Iterator<HugeEnum> anotherHugeIterator=hugeSet.iterator();
  assertNotSame(hIterator,anotherHugeIterator);
  try {
    hIterator.remove();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  assertTrue(hIterator.hasNext());
  assertSame(HugeEnum.a,hIterator.next());
  hIterator.remove();
  assertTrue(hIterator.hasNext());
  assertSame(HugeEnum.b,hIterator.next());
  assertFalse(hIterator.hasNext());
  assertFalse(hIterator.hasNext());
  assertEquals(1,hugeSet.size());
  try {
    hIterator.next();
    fail("Should throw NoSuchElementException");
  }
 catch (  NoSuchElementException e) {
  }
  Set<HugeEnumWithInnerClass> hugeSetWithSubclass=EnumSet.allOf(HugeEnumWithInnerClass.class);
  hugeSetWithSubclass.remove(HugeEnumWithInnerClass.e);
  Iterator<HugeEnumWithInnerClass> hugeIteratorWithSubclass=hugeSetWithSubclass.iterator();
  assertSame(HugeEnumWithInnerClass.a,hugeIteratorWithSubclass.next());
  assertTrue(hugeIteratorWithSubclass.hasNext());
  assertSame(HugeEnumWithInnerClass.b,hugeIteratorWithSubclass.next());
  setWithSubclass.remove(HugeEnumWithInnerClass.c);
  assertTrue(hugeIteratorWithSubclass.hasNext());
  assertSame(HugeEnumWithInnerClass.c,hugeIteratorWithSubclass.next());
  assertTrue(hugeIteratorWithSubclass.hasNext());
  assertSame(HugeEnumWithInnerClass.d,hugeIteratorWithSubclass.next());
  hugeSetWithSubclass.add(HugeEnumWithInnerClass.e);
  assertTrue(hugeIteratorWithSubclass.hasNext());
  assertSame(HugeEnumWithInnerClass.f,hugeIteratorWithSubclass.next());
  hugeSet=EnumSet.noneOf(HugeEnum.class);
  hIterator=hugeSet.iterator();
  try {
    hIterator.next();
    fail("Should throw NoSuchElementException");
  }
 catch (  NoSuchElementException e) {
  }
  hugeSet.add(HugeEnum.a);
  hIterator=hugeSet.iterator();
  assertEquals(HugeEnum.a,hIterator.next());
  assertEquals(1,hugeSet.size());
  hIterator.remove();
  assertEquals(0,hugeSet.size());
  assertFalse(hugeSet.contains(HugeEnum.a));
  hugeSet.add(HugeEnum.a);
  hugeSet.add(HugeEnum.b);
  hIterator=hugeSet.iterator();
  hIterator.next();
  hIterator.remove();
  assertTrue(hIterator.hasNext());
  try {
    hIterator.remove();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  assertEquals(1,hugeSet.size());
  assertTrue(hIterator.hasNext());
  assertEquals(HugeEnum.b,hIterator.next());
  hugeSet.remove(HugeEnum.b);
  assertEquals(0,hugeSet.size());
  hIterator.remove();
  assertFalse(hugeSet.contains(HugeEnum.a));
  if (!disableRIBugs) {
    assertFalse("Should return false",set.contains(EnumFoo.b));
  }
}
