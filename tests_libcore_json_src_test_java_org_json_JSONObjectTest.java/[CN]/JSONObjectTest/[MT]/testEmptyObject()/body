{
  JSONObject object=new JSONObject();
  assertEquals(0,object.length());
  assertNull(object.names());
  assertNull(object.toJSONArray(new JSONArray()));
  assertEquals("{}",object.toString());
  assertEquals("{}",object.toString(5));
  try {
    object.get("foo");
    fail();
  }
 catch (  JSONException e) {
  }
  try {
    object.getBoolean("foo");
    fail();
  }
 catch (  JSONException e) {
  }
  try {
    object.getDouble("foo");
    fail();
  }
 catch (  JSONException e) {
  }
  try {
    object.getInt("foo");
    fail();
  }
 catch (  JSONException e) {
  }
  try {
    object.getJSONArray("foo");
    fail();
  }
 catch (  JSONException e) {
  }
  try {
    object.getJSONObject("foo");
    fail();
  }
 catch (  JSONException e) {
  }
  try {
    object.getLong("foo");
    fail();
  }
 catch (  JSONException e) {
  }
  try {
    object.getString("foo");
    fail();
  }
 catch (  JSONException e) {
  }
  assertFalse(object.has("foo"));
  assertTrue(object.isNull("foo"));
  assertNull(object.opt("foo"));
  assertEquals(false,object.optBoolean("foo"));
  assertEquals(true,object.optBoolean("foo",true));
  assertEquals(Double.NaN,object.optDouble("foo"));
  assertEquals(5.0,object.optDouble("foo",5.0));
  assertEquals(0,object.optInt("foo"));
  assertEquals(5,object.optInt("foo",5));
  assertEquals(null,object.optJSONArray("foo"));
  assertEquals(null,object.optJSONObject("foo"));
  assertEquals(0,object.optLong("foo"));
  assertEquals(Long.MAX_VALUE - 1,object.optLong("foo",Long.MAX_VALUE - 1));
  assertEquals("",object.optString("foo"));
  assertEquals("bar",object.optString("foo","bar"));
  assertNull(object.remove("foo"));
}
