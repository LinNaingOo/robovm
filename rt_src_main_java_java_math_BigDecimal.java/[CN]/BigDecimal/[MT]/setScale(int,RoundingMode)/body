{
  if (roundingMode == null) {
    throw new NullPointerException();
  }
  long diffScale=newScale - (long)scale;
  if (diffScale == 0) {
    return this;
  }
  if (diffScale > 0) {
    if (diffScale < LONG_TEN_POW.length && (this.bitLength + LONG_TEN_POW_BIT_LENGTH[(int)diffScale]) < 64) {
      return valueOf(this.smallValue * LONG_TEN_POW[(int)diffScale],newScale);
    }
    return new BigDecimal(Multiplication.multiplyByTenPow(getUnscaledValue(),(int)diffScale),newScale);
  }
  if (this.bitLength < 64 && -diffScale < LONG_TEN_POW.length) {
    return dividePrimitiveLongs(this.smallValue,LONG_TEN_POW[(int)-diffScale],newScale,roundingMode);
  }
  return divideBigIntegers(this.getUnscaledValue(),Multiplication.powerOf10(-diffScale),newScale,roundingMode);
}
