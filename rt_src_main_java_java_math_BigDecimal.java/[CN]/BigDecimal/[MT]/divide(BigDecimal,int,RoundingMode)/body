{
  if (roundingMode == null) {
    throw new NullPointerException();
  }
  if (divisor.isZero()) {
    throw new ArithmeticException(Messages.getString("math.04"));
  }
  long diffScale=((long)this.scale - divisor.scale) - scale;
  if (this.bitLength < 64 && divisor.bitLength < 64) {
    if (diffScale == 0) {
      return dividePrimitiveLongs(this.smallValue,divisor.smallValue,scale,roundingMode);
    }
 else     if (diffScale > 0) {
      if (diffScale < LONG_TEN_POW.length && divisor.bitLength + LONG_TEN_POW_BIT_LENGTH[(int)diffScale] < 64) {
        return dividePrimitiveLongs(this.smallValue,divisor.smallValue * LONG_TEN_POW[(int)diffScale],scale,roundingMode);
      }
    }
 else {
      if (-diffScale < LONG_TEN_POW.length && this.bitLength + LONG_TEN_POW_BIT_LENGTH[(int)-diffScale] < 64) {
        return dividePrimitiveLongs(this.smallValue * LONG_TEN_POW[(int)-diffScale],divisor.smallValue,scale,roundingMode);
      }
    }
  }
  BigInteger scaledDividend=this.getUnscaledValue();
  BigInteger scaledDivisor=divisor.getUnscaledValue();
  if (diffScale > 0) {
    scaledDivisor=Multiplication.multiplyByTenPow(scaledDivisor,(int)diffScale);
  }
 else   if (diffScale < 0) {
    scaledDividend=Multiplication.multiplyByTenPow(scaledDividend,(int)-diffScale);
  }
  return divideBigIntegers(scaledDividend,scaledDivisor,scale,roundingMode);
}
