{
  SootMethod getter=method.getParameterCount() == 0 ? method : null;
  SootMethod setter=getter == null ? method : null;
  soot.Type type=getter != null ? getter.getReturnType() : setter.getParameterType(0);
  Type memberType=null;
  if (getter != null && hasPointerAnnotation(getter) || setter != null && hasPointerAnnotation(setter,0)) {
    memberType=I8_PTR;
  }
 else   if (type instanceof PrimType) {
    memberType=getType(type);
  }
 else   if (getter != null && hasArrayAnnotation(getter) || setter != null && hasArrayAnnotation(setter,0)) {
    int[] dimensions=getter != null ? getArrayDimensions(getter) : getArrayDimensions(setter,0);
    if (dimensions == null || dimensions.length == 0) {
      throw new IllegalArgumentException("No dimensions specified for @Array annotation on struct member " + (getter != null ? "getter" : "setter") + " "+ method);
    }
    if (type instanceof soot.ArrayType && ((soot.ArrayType)type).numDimensions != dimensions.length) {
      throw new IllegalArgumentException("Mismatch in number of dimennsions for @Array annotation " + "and struct member type on struct member " + (getter != null ? "getter" : "setter") + " "+ method);
    }
    Type baseType=null;
    if (type instanceof soot.ArrayType) {
      soot.ArrayType arrayType=(soot.ArrayType)type;
      if (isStruct(arrayType.baseType)) {
        try {
          baseType=getStructType(dataLayout,arrayType.baseType);
        }
 catch (        StackOverflowError e) {
          throw new IllegalArgumentException("Struct type " + type + " refers to itself");
        }
      }
 else {
        baseType=getType(arrayType.baseType);
      }
    }
 else     if (isStruct(type)) {
      boolean byVal=getter != null ? isPassByValue(getter) : isPassByValue(setter,0);
      if (!byVal) {
        baseType=I8_PTR;
      }
 else {
        try {
          baseType=getStructType(dataLayout,type);
        }
 catch (        StackOverflowError e) {
          throw new IllegalArgumentException("Struct type " + type + " refers to itself");
        }
      }
    }
 else     if (type instanceof RefType) {
      SootClass c=((RefType)type).getSootClass();
      if (isInstanceOfClass(c,"java.nio.ByteBuffer")) {
        baseType=I8;
      }
 else       if (isInstanceOfClass(c,"java.nio.ShortBuffer")) {
        baseType=I16;
      }
 else       if (isInstanceOfClass(c,"java.nio.CharBuffer")) {
        baseType=I16;
      }
 else       if (isInstanceOfClass(c,"java.nio.IntBuffer")) {
        baseType=I32;
      }
 else       if (isInstanceOfClass(c,"java.nio.LongBuffer")) {
        baseType=I64;
      }
 else       if (isInstanceOfClass(c,"java.nio.FloatBuffer")) {
        baseType=FLOAT;
      }
 else       if (isInstanceOfClass(c,"java.nio.DoubleBuffer")) {
        baseType=DOUBLE;
      }
 else {
        String marshalerClassName=getter != null ? getMarshalerClassName(getter) : getMarshalerClassName(setter,0);
        baseType=getMarshalType(marshalerClassName,type,true);
      }
    }
    if (baseType == null) {
      throw new IllegalArgumentException("Arrays of " + type + " is not supported");
    }
    long total=dimensions[0];
    for (int i=1; i < dimensions.length; i++) {
      total*=dimensions[i];
    }
    memberType=new ArrayType(total,baseType);
  }
 else   if (isStruct(type)) {
    boolean byVal=getter != null ? isPassByValue(getter) : isPassByValue(setter,0);
    if (!byVal) {
      memberType=I8_PTR;
    }
 else {
      try {
        memberType=getStructType(dataLayout,type);
      }
 catch (      StackOverflowError e) {
        throw new IllegalArgumentException("Struct type " + type + " refers to itself");
      }
    }
  }
 else   if (isNativeObject(type)) {
    memberType=I8_PTR;
  }
 else {
    String marshalerClassName=getter != null ? getMarshalerClassName(getter) : getMarshalerClassName(setter,0);
    memberType=getMarshalType(marshalerClassName,type,false);
  }
  return memberType;
}
