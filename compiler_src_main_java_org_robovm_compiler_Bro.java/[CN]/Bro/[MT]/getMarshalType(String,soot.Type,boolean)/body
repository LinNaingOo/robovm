{
  SootClass marshalerClass=SootResolver.v().resolveClass(marshalerClassName.replace('/','.'),SootClass.SIGNATURES);
  boolean isenum=isEnum(type);
  Type defType=isenum ? I32 : isarray ? I8 : I8_PTR;
  if (marshalerClass.isPhantom()) {
    return defType;
  }
  try {
    List<?> paramTypes=isarray ? Arrays.asList(RefType.v("java.lang.Object"),LongType.v(),LongType.v(),IntType.v()) : Arrays.asList(RefType.v(isenum ? "java.lang.Enum" : "java.lang.Object"),LongType.v());
    SootMethod toNative=marshalerClass.getMethod("toNative",paramTypes);
    if (isarray) {
      soot.Type baseType=getArrayBaseType(toNative);
      if (baseType != null) {
        if (hasPointerAnnotation(toNative) && baseType == LongType.v()) {
          return I8_PTR;
        }
        return getType(baseType);
      }
    }
 else {
      soot.Type returnType=toNative.getReturnType();
      if (returnType instanceof PrimType) {
        if (!isenum && hasPointerAnnotation(toNative) && returnType == LongType.v()) {
          return I8_PTR;
        }
        return getType(returnType);
      }
    }
  }
 catch (  RuntimeException e) {
  }
  return defType;
}
