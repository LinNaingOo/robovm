{
  StringTokenizer st=new StringTokenizer("This is a test String");
  assertEquals("nextToken(String) returned incorrect value with normal token String","This",st.nextToken(" "));
  assertEquals("nextToken(String) returned incorrect value with custom token String"," is a ",st.nextToken("tr"));
  assertEquals("calling nextToken() did not use the new default delimiter list","es",st.nextToken());
  st=new StringTokenizer("This:is:a:test:String"," ");
  assertTrue(st.nextToken(":").equals("This"));
  assertTrue(st.nextToken(":").equals("is"));
  assertTrue(st.nextToken(":").equals("a"));
  assertTrue(st.nextToken(":").equals("test"));
  assertTrue(st.nextToken(":").equals("String"));
  try {
    st.nextToken(":");
    fail("NoSuchElementException expected");
  }
 catch (  NoSuchElementException e) {
  }
  try {
    st.nextToken(null);
    fail("NullPointerException expected");
  }
 catch (  NullPointerException e) {
  }
}
