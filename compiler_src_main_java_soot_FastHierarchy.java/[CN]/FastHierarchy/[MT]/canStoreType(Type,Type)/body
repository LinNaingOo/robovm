{
  if (child.equals(parent))   return true;
  if (parent instanceof NullType) {
    return false;
  }
  if (child instanceof NullType) {
    return parent instanceof RefLikeType;
  }
  if (child instanceof RefType) {
    if (parent instanceof RefType) {
      return canStoreClass(((RefType)child).getSootClass(),((RefType)parent).getSootClass());
    }
 else {
      return false;
    }
  }
 else   if (child instanceof AnySubType) {
    if (!(parent instanceof RefLikeType)) {
      throw new RuntimeException("Unhandled type " + parent);
    }
 else     if (parent instanceof ArrayType) {
      Type base=((AnySubType)child).getBase();
      return base.equals(RefType.v("java.lang.Object")) || base.equals(RefType.v("java.io.Serializable")) || base.equals(RefType.v("java.lang.Cloneable"));
    }
 else {
      SootClass base=((AnySubType)child).getBase().getSootClass();
      SootClass parentClass=((RefType)parent).getSootClass();
      LinkedList worklist=new LinkedList();
      if (base.isInterface())       worklist.addAll(getAllImplementersOfInterface(base));
 else       worklist.add(base);
      Set<SootClass> workset=new HashSet<SootClass>();
      while (!worklist.isEmpty()) {
        SootClass cl=(SootClass)worklist.removeFirst();
        if (!workset.add(cl))         continue;
        if (cl.isConcrete() && canStoreClass(cl,parentClass))         return true;
        worklist.addAll(getSubclassesOf(cl));
      }
      return false;
    }
  }
 else {
    ArrayType achild=(ArrayType)child;
    if (parent instanceof RefType) {
      return parent.equals(RefType.v("java.lang.Object")) || parent.equals(RefType.v("java.io.Serializable")) || parent.equals(RefType.v("java.lang.Cloneable"));
    }
    ArrayType aparent=(ArrayType)parent;
    if (achild.numDimensions == aparent.numDimensions) {
      if (achild.baseType.equals(aparent.baseType))       return true;
      if (!(achild.baseType instanceof RefType))       return false;
      if (!(aparent.baseType instanceof RefType))       return false;
      return canStoreType(achild.baseType,aparent.baseType);
    }
 else     if (achild.numDimensions > aparent.numDimensions) {
      if (aparent.baseType.equals(RefType.v("java.lang.Object")))       return true;
      if (aparent.baseType.equals(RefType.v("java.io.Serializable")))       return true;
      if (aparent.baseType.equals(RefType.v("java.lang.Cloneable")))       return true;
      return false;
    }
 else     return false;
  }
}
