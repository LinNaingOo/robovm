{
  concreteType.checkLevel(SootClass.HIERARCHY);
  if (concreteType.isInterface()) {
    throw new RuntimeException("A concrete type cannot be an interface: " + concreteType);
  }
  String methodSig=m.getSubSignature();
  while (true) {
    if (concreteType.declaresMethod(methodSig)) {
      if (isVisible(concreteType,m)) {
        SootMethod method=concreteType.getMethod(methodSig);
        if (method.isAbstract()) {
          throw new RuntimeException("Error: Method call resolves to abstract method!");
        }
        return method;
      }
    }
    if (!concreteType.hasSuperclass())     break;
    concreteType=concreteType.getSuperclass();
  }
  throw new RuntimeException("could not resolve concrete dispatch!\nType: " + concreteType + "\nMethod: "+ m);
}
