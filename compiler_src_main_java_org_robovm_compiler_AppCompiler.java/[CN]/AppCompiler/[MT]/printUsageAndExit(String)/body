{
  if (errorMessage != null) {
    System.err.format("robovm: %s\n",errorMessage);
  }
  System.err.println("Usage: robovm [-options] class [run-args]");
  System.err.println("   or  robovm [-options] -jar jarfile [run-args]");
  System.err.println("   or  robovm [-options] -skiplink");
  System.err.println("Options:");
  System.err.println("  -bootclasspath <list> ");
  System.err.println("  -bootcp <list>        ");
  System.err.println("  -bcp <list>           : separated list of directories, JAR archives, and ZIP \n" + "                        archives to search for class files. Used to locate the \n" + "                        java.* and javax.* classes. Default is \n"+ "                        <robovm-home>/lib/robovm-rt.jar.");
  System.err.println("  -cp <list>            ");
  System.err.println("  -classpath <list>     : separated list of directories, JAR archives, and ZIP \n" + "                        archives to search for class files.");
  System.err.println("  -cache <dir>          Directory where cached compiled class files will be placed.\n" + "                        Default is ~/.robovm/cache");
  System.err.println("  -clean                Compile class files even if a compiled version already \n" + "                        exists in the cache.");
  System.err.println("  -d <dir>              Install the generated executable and other files in <dir>.\n" + "                        Default is <wd>/<class>");
  System.err.println("  -cc <path>            Path to the c compiler binary. gcc and clang are supported.");
  System.err.println("  -home <dir>           Directory where RoboVM runtime has been installed.\n" + "                        Default is $ROBOVM_HOME. If not set the following paths\n" + "                        will be searched: ~/Applications/robovm/, ~/.robovm/home/,\n"+ "                        /usr/local/lib/robovm/, /opt/robovm/, /usr/lib/robovm/.");
  System.err.println("  -tmp <dir>            Directory where temporary files will be placed during\n" + "                        compilation. By default a new dir will be created under\n" + "                        ${java.io.tmpdir}.");
  System.err.println("  -jar <path>           Use main class as specified by the manifest in this JAR \n" + "                        archive.");
  System.err.println("  -llvm-home <path>     Path where LLVM has been installed");
  System.err.println("  -o <name>             The name of the target executable or library");
  System.err.println("  -os <name>            The name of the OS to build for. Allowed values are \n" + "                        'auto', 'linux', 'macosx' and 'ios'. Default is 'auto' which\n" + "                        means autodetect.");
  System.err.println("  -arch <name>          The name of the LLVM arch to compile for. Allowed values\n" + "                        are 'auto', 'x86', 'armv6', 'armv7', 'thumbv6',\n" + "                        'thumbv7' Default is 'auto' which means autodetect.");
  System.err.println("  -cpu <name>           The name of the LLVM cpu to compile for. The LLVM default\n" + "                        is used by default. Use llc to determine allowed values.");
  System.err.println("  -roots <list>         : separated list of class patterns matching\n" + "                        classes that must be included when determinig the required\n" + "                        classes. If a main class is specified it will automatically\n"+ "                        become a root. If no main class is specified and no roots\n"+ "                        all classes will be included. A pattern is an ANT style\n"+ "                        path pattern, e.g. com.foo.**.bar.*.Main.");
  System.err.println("  -debug                Generates debug information");
  System.err.println("  -skiprt               Do not add default robovm-rt.jar to bootclasspath");
  System.err.println("  -skiplink             Do not link the final executable");
  System.err.println("  -verbose              Output messages about what the compiler is doing");
  System.err.println("  -help, -?             Display this information");
  System.exit(errorMessage != null ? 1 : 0);
}
