{
  if (errorMessage != null) {
    System.err.format("robovm: %s\n",errorMessage);
  }
  System.err.println("Usage: robovm [-options] class [run-args]");
  System.err.println("   or  robovm [-options] -jar jarfile [run-args]");
  System.err.println("Options:");
  System.err.println("  -bootclasspath <list> ");
  System.err.println("  -bootcp <list>        ");
  System.err.println("  -bcp <list>           : separated list of directories, JAR archives, and ZIP \n" + "                        archives to search for class files. Used to locate the \n" + "                        java.* and javax.* classes. Default is \n"+ "                        <robovm-home>/lib/robovm-rt.jar.");
  System.err.println("  -cp <list>            ");
  System.err.println("  -classpath <list>     : separated list of directories, JAR archives, and ZIP \n" + "                        archives to search for class files.");
  System.err.println("  -cache <dir>          Directory where cached compiled class files will be placed.\n" + "                        Default is ~/.robovm/cache");
  System.err.println("  -clean                Compile class files even if a compiled version already \n" + "                        exists in the cache.");
  System.err.println("  -d <dir>              Install the generated executable and other files in <dir>.\n" + "                        Default is <wd>/<class>. Ignored if -run is specified.");
  System.err.println("  -cc <path>            Path to the c compiler binary. gcc and clang are supported.");
  System.err.println("  -home <dir>           Directory where RoboVM runtime has been installed.\n" + "                        Default is $ROBOVM_HOME. If not set the following paths\n" + "                        will be searched: ~/Applications/robovm/, ~/.robovm/home/,\n"+ "                        /usr/local/lib/robovm/, /opt/robovm/, /usr/lib/robovm/.");
  System.err.println("  -tmp <dir>            Directory where temporary files will be placed during\n" + "                        compilation. By default a new dir will be created under\n" + "                        ${java.io.tmpdir}.");
  System.err.println("  -jar <path>           Use main class as specified by the manifest in this JAR \n" + "                        archive.");
  System.err.println("  -llvm-home <path>     Path where LLVM has been installed. If not set the LLVM\n" + "                        tools will be searched for in the paths in your $PATH\n" + "                        environment variable. If not found in $PATH /opt/llvm and\n"+ "                        /usr/local/llvm will be searched.");
  System.err.println("  -o <name>             The name of the target executable");
  System.err.println("  -os <name>            The name of the OS to build for. Allowed values are \n" + "                        'auto', 'linux', 'macosx' and 'ios'. Default is 'auto' which\n" + "                        means use the LLVM deafult.");
  System.err.println("  -arch <name>          The name of the LLVM arch to compile for. Allowed values\n" + "                        are 'auto', 'x86', 'thumbv7'. Default is 'auto' which means\n" + "                        use the LLVM default.");
  System.err.println("  -cpu <name>           The name of the LLVM cpu to compile for. The LLVM default\n" + "                        is used if not specified. Use llc to determine allowed values.");
  System.err.println("  -target <name>        The target to build for. Either 'auto', 'console' or 'ios'.\n" + "                        The default is 'auto' which means use -os to decide.");
  System.err.println("  -roots <list>         : separated list of class patterns matching\n" + "                        classes that must be included when determinig the required\n" + "                        classes. If a main class is specified it will automatically\n"+ "                        become a root. If no main class is specified and no roots\n"+ "                        all classes will be included. A pattern is an ANT style\n"+ "                        path pattern, e.g. com.foo.**.bar.*.Main. Alternative\n"+ "                        syntax using # is also supported, e.g. com.##.#.Main.");
  System.err.println("  -run                  Run the executable directly without installing it (-d is\n" + "                        ignored). The executable will be executed from the\n" + "                        temporary dir specified with -tmp.");
  System.err.println("  -debug                Generates debug information");
  System.err.println("  -use-debug-libs       Links against debug versions of the RoboVM VM libraries");
  System.err.println("  -dynamic-jni          Use dynamic JNI. Native methods will be dynamically\n" + "                        linked at runtime. Native methods in classes in the boot\n" + "                        classpath will always use static JNI. On iOS only static\n"+ "                        JNI is supported and this option is ignored.");
  System.err.println("  -libs <list>          : separated list of static library files (.a), object\n" + "                        files (.o) and system libraries that should be included\n" + "                        when linking the final executable.");
  System.err.println("  -frameworks <list>    : separated list of frameworks that should be included\n" + "                        when linking the final executable.");
  System.err.println("  -resources <list>     : separated list of files and directories that should be\n" + "                        copied to the install dir.");
  System.err.println("  -cacerts <value>      Use the specified cacerts file. Allowed value are 'none',\n" + "                        'full'. Default is 'full' but no cacerts will be included\n" + "                        unless the code actually needs them.");
  System.err.println("  -skiprt               Do not add default robovm-rt.jar to bootclasspath");
  System.err.println("  -config <file>        Reads the specified configuration XML file. Values set in\n" + "                        the file will override values set earlier in the command\n" + "                        line. Later options will override values set in the XML file.\n"+ "                        Can be specified multiple times to read multiple config files.");
  System.err.println("  -dumpconfig <file>    Dumps a configuration XML file to the specified file. Specify\n" + "                        '-' to dump the config to stdout.");
  System.err.println("  -properties <file>    Reads a Java properties file which will be used when resolving\n" + "                        variables (enclosed in ${...}) in config XML files and\n" + "                        Info.plist files. Can be specified multiple times.");
  System.err.println("  -Pname=value          Sets a property value. See the -properties option.");
  System.err.println("  -verbose              Output messages about what the compiler is doing");
  System.err.println("  -version              Print the version of the compiler and exit");
  System.err.println("  -help, -?             Display this information");
  System.err.println("Target specific options:");
  System.err.println("  -plist <file>         (iOS) Info.plist file to be used by the app. If not specified\n" + "                        a simple Info.plist will be generated with a CFBundleIdentifier\n" + "                        based on the main class name or executable file name.");
  System.err.println("  -entitlements <file>  (iOS) Property list (.plist) file containing entitlements\n" + "                        passed to codesign when signing the app.");
  System.err.println("  -resourcerules <file> (iOS) Property list (.plist) file containing resource rules\n" + "                        passed to codesign when signing the app.");
  System.err.println("  -signidentity <id>    (iOS) Sign using this identity. Default is 'iPhone Developer'.");
  System.err.println("  -sdk <version>        (iOS) Version number of the iOS SDK to build against. If not\n" + "                        specified the latest SDK that can be found will be used.");
  System.err.println("iOS simulator launch options:");
  System.err.println("  -ios-sim-family <fam> The device type that should be simulated. Valid values are\n" + "                        'iphone' (default) and 'ipad'.");
  System.err.println("  -ios-sim-sdk <sdk>    The iOS SDK version to run the application on (defaults to\n" + "                        the latest).");
  System.exit(errorMessage != null ? 1 : 0);
}
