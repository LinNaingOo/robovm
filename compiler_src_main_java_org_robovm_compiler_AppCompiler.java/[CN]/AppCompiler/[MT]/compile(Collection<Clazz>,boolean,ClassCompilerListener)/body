{
  config.getLogger().debug("Compiling classes using %d threads",config.getThreads());
  final Executor executor=(config.getThreads() <= 1) ? SAME_THREAD_EXECUTOR : new ThreadPoolExecutor(config.getThreads() - 1,config.getThreads() - 1,0L,TimeUnit.MILLISECONDS,new ArrayBlockingQueue<Runnable>((config.getThreads() - 1) * 20));
class HandleFailureListener implements ClassCompilerListener {
    volatile Throwable t;
    @Override public void success(    Clazz clazz){
      if (listener != null) {
        listener.success(clazz);
      }
    }
    @Override public void failure(    Clazz clazz,    Throwable t){
      this.t=t;
      if (executor instanceof ExecutorService) {
        ((ExecutorService)executor).shutdown();
      }
      if (listener != null) {
        listener.failure(clazz,t);
      }
    }
  }
  ;
  HandleFailureListener listenerWrapper=new HandleFailureListener();
  TreeSet<Clazz> compileQueue=new TreeSet<>(rootClasses);
  long start=System.currentTimeMillis();
  Set<Clazz> linkClasses=new HashSet<Clazz>();
  int compiledCount=0;
  while (!compileQueue.isEmpty() && !Thread.currentThread().isInterrupted()) {
    Clazz clazz=compileQueue.pollFirst();
    if (!linkClasses.contains(clazz)) {
      if (compile(executor,listenerWrapper,clazz,compileQueue,linkClasses,compileDependencies)) {
        compiledCount++;
        if (listenerWrapper.t != null) {
          break;
        }
      }
      linkClasses.add(clazz);
    }
  }
  if (executor instanceof ExecutorService) {
    ExecutorService executorService=(ExecutorService)executor;
    executorService.shutdown();
    try {
      executorService.awaitTermination(Long.MAX_VALUE,TimeUnit.DAYS);
    }
 catch (    InterruptedException e) {
    }
  }
  if (listenerWrapper.t != null) {
    if (listenerWrapper.t instanceof IOException) {
      throw (IOException)listenerWrapper.t;
    }
    if (listenerWrapper.t instanceof RuntimeException) {
      throw (RuntimeException)listenerWrapper.t;
    }
    if (listenerWrapper.t instanceof Error) {
      throw (Error)listenerWrapper.t;
    }
    throw new CompilerException(listenerWrapper.t);
  }
  long duration=System.currentTimeMillis() - start;
  config.getLogger().debug("Compiled %d classes in %.2f seconds",compiledCount,duration / 1000.0);
  return linkClasses;
}
