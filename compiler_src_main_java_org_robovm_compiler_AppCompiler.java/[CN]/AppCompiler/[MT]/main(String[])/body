{
  AppCompiler compiler=null;
  boolean verbose=false;
  boolean run=false;
  List<String> runArgs=new ArrayList<String>();
  try {
    Config.Builder builder=new Config.Builder();
    OS os=null;
    Arch arch=null;
    int i=0;
    List<String> targetArgs=new ArrayList<String>();
    while (i < args.length) {
      if ("-cp".equals(args[i]) || "-classpath".equals(args[i])) {
        for (        String p : args[++i].split(File.pathSeparator)) {
          builder.addClasspathEntry(new File(p));
        }
      }
 else       if ("-bcp".equals(args[i]) || "-bootcp".equals(args[i]) || "-bootclasspath".equals(args[i])) {
        for (        String p : args[++i].split(File.pathSeparator)) {
          builder.addBootClasspathEntry(new File(p));
        }
      }
 else       if ("-jar".equals(args[i])) {
        builder.mainJar(new File(args[++i]));
      }
 else       if ("-o".equals(args[i])) {
        builder.executable(args[++i]);
      }
 else       if ("-d".equals(args[i])) {
        builder.installDir(new File(args[++i]));
      }
 else       if ("-cache".equals(args[i])) {
        builder.cacheDir(new File(args[++i]));
      }
 else       if ("-home".equals(args[i])) {
        builder.home(new Config.Home(new File(args[++i])));
      }
 else       if ("-tmp".equals(args[i])) {
        builder.tmpDir(new File(args[++i]));
      }
 else       if ("-run".equals(args[i])) {
        run=true;
      }
 else       if ("-verbose".equals(args[i])) {
        verbose=true;
      }
 else       if ("-debug".equals(args[i])) {
        builder.debug(true);
      }
 else       if ("-use-debug-libs".equals(args[i])) {
        builder.useDebugLibs(true);
      }
 else       if ("-dynamic-jni".equals(args[i])) {
        builder.dynamicJNI(true);
      }
 else       if ("-skiprt".equals(args[i])) {
        builder.skipRuntimeLib(true);
      }
 else       if ("-clean".equals(args[i])) {
        builder.clean(true);
      }
 else       if ("-help".equals(args[i]) || "-?".equals(args[i])) {
        printUsageAndExit(null);
      }
 else       if ("-version".equals(args[i])) {
        printVersionAndExit();
      }
 else       if ("-cc".equals(args[i])) {
        builder.ccBinPath(new File(args[++i]));
      }
 else       if ("-llvm-home".equals(args[i])) {
        builder.llvmHomeDir(new File(args[++i]));
      }
 else       if ("-os".equals(args[i])) {
        String s=args[++i];
        if (!"auto".equals(s)) {
          os=OS.valueOf(s);
          builder.os(os);
        }
      }
 else       if ("-arch".equals(args[i])) {
        String s=args[++i];
        if (!"auto".equals(s)) {
          arch=Arch.valueOf(s);
          builder.arch(arch);
        }
      }
 else       if ("-cpu".equals(args[i])) {
        builder.cpu(args[++i]);
      }
 else       if ("-roots".equals(args[i])) {
        for (        String p : args[++i].split(":")) {
          p=p.replace('#','*');
          builder.addRoot(p);
        }
      }
 else       if ("-libs".equals(args[i])) {
        for (        String p : args[++i].split(":")) {
          builder.addLib(p);
        }
      }
 else       if ("-frameworks".equals(args[i])) {
        for (        String p : args[++i].split(":")) {
          builder.addFramework(p);
        }
      }
 else       if ("-resources".equals(args[i])) {
        for (        String p : args[++i].split(":")) {
          builder.addResource(p);
        }
      }
 else       if ("-cacerts".equals(args[i])) {
        String name=args[++i];
        Config.Cacerts cacerts=null;
        if (!"none".equals(name)) {
          try {
            cacerts=Config.Cacerts.valueOf(name);
          }
 catch (          IllegalArgumentException e) {
            throw new IllegalArgumentException("Illegal -cacerts value: " + name);
          }
        }
        builder.cacerts(cacerts);
      }
 else       if ("-plist".equals(args[i])) {
        targetArgs.add(args[i++]);
        targetArgs.add(args[i]);
      }
 else       if ("-entitlements".equals(args[i])) {
        targetArgs.add(args[i++]);
        targetArgs.add(args[i]);
      }
 else       if ("-resourcerules".equals(args[i])) {
        targetArgs.add(args[i++]);
        targetArgs.add(args[i]);
      }
 else       if ("-signidentity".equals(args[i])) {
        targetArgs.add(args[i++]);
        targetArgs.add(args[i]);
      }
 else       if ("-sdk".equals(args[i])) {
        targetArgs.add(args[i++]);
        targetArgs.add(args[i]);
      }
 else       if (args[i].startsWith("-D")) {
      }
 else       if (args[i].startsWith("-X")) {
      }
 else       if (args[i].startsWith("-rvm:")) {
        runArgs.add(args[i]);
      }
 else       if (args[i].startsWith("-")) {
        throw new IllegalArgumentException("Unrecognized option: " + args[i]);
      }
 else {
        builder.mainClass(args[i++]);
        break;
      }
      i++;
    }
    while (i < args.length) {
      runArgs.add(args[i++]);
    }
    if (verbose) {
      builder.logger(new Logger(){
        public void info(        String format,        Object... args){
          System.out.format(format,args);
          System.out.println();
        }
        public void error(        String format,        Object... args){
          System.err.format(format,args);
          System.err.println();
        }
        public void warn(        String format,        Object... args){
          System.out.format(format,args);
          System.out.println();
        }
        public void debug(        String format,        Object... args){
          System.out.format(format,args);
          System.out.println();
        }
      }
);
    }
    builder.skipInstall(run);
    Target.Builder targetBuilder=null;
    if (os == OS.ios) {
      if (arch != null && arch.isArm()) {
        targetBuilder=new IOSDeviceTarget.Builder();
      }
 else {
        targetBuilder=new IOSSimulatorTarget.Builder();
      }
    }
    i=0;
    while (i < targetArgs.size()) {
      String arg=targetArgs.get(i++);
      if (arg.equals("-plist")) {
        if (targetBuilder instanceof AbstractIOSTarget.Builder) {
          ((AbstractIOSTarget.Builder)targetBuilder).infoPList(new File(targetArgs.get(i++)));
          continue;
        }
      }
      if (arg.equals("-entitlements")) {
        if (targetBuilder instanceof IOSDeviceTarget.Builder) {
          ((IOSDeviceTarget.Builder)targetBuilder).entitlementsPList(new File(targetArgs.get(i++)));
          continue;
        }
      }
      if (arg.equals("-resourcerules")) {
        if (targetBuilder instanceof IOSDeviceTarget.Builder) {
          ((IOSDeviceTarget.Builder)targetBuilder).resourceRulesPList(new File(targetArgs.get(i++)));
          continue;
        }
      }
      if (arg.equals("-signidentity")) {
        if (targetBuilder instanceof IOSDeviceTarget.Builder) {
          ((IOSDeviceTarget.Builder)targetBuilder).signingIdentity(targetArgs.get(i++));
          continue;
        }
      }
      if (arg.equals("-sdk")) {
        if (targetBuilder instanceof AbstractIOSTarget.Builder) {
          String value=targetArgs.get(i++);
          SDK matchSdk=null;
          if (value.matches("\\d+\\.\\d+(\\.\\d+)?")) {
            List<SDK> sdks=null;
            if (targetBuilder instanceof IOSDeviceTarget.Builder) {
              sdks=IOSDeviceTarget.listSDKs();
            }
 else {
              sdks=IOSSimulatorTarget.listSDKs();
            }
            for (            SDK sdk : sdks) {
              if (sdk.getVersion().equals(value)) {
                matchSdk=sdk;
                break;
              }
            }
            if (matchSdk == null) {
              throw new IllegalArgumentException("No SDK found matching version string " + value);
            }
          }
 else {
            matchSdk=SDK.create(new File(value));
          }
          ((AbstractIOSTarget.Builder)targetBuilder).sdk(matchSdk);
          continue;
        }
      }
      throw new IllegalArgumentException("Unsupported argument for the specified target: " + arg);
    }
    builder.targetBuilder(targetBuilder);
    compiler=new AppCompiler(builder.build());
  }
 catch (  Throwable t) {
    String message=t.getMessage();
    if (t instanceof ArrayIndexOutOfBoundsException) {
      message="Missing argument";
    }
    if (t instanceof IndexOutOfBoundsException) {
      message="Missing argument";
    }
    if (verbose && !(t instanceof StringIndexOutOfBoundsException) && !(t instanceof IllegalArgumentException)) {
      t.printStackTrace();
    }
    printUsageAndExit(message);
  }
  try {
    compiler.compile();
    if (run) {
      LaunchParameters launchParameters=new LaunchParameters();
      launchParameters.setArguments(runArgs);
      Process process=compiler.config.getTarget().launch(launchParameters);
      process.waitFor();
    }
 else {
      compiler.config.getTarget().install();
    }
  }
 catch (  Throwable t) {
    String message=t.getMessage();
    if (verbose && !(t instanceof ExecuteException)) {
      t.printStackTrace();
    }
    printUsageAndExit(message);
  }
}
