{
  AppCompiler compiler=null;
  boolean verbose=false;
  boolean run=false;
  boolean createIpa=false;
  String dumpConfigFile=null;
  List<String> runArgs=new ArrayList<String>();
  List<String> launchArgs=new ArrayList<String>();
  try {
    Config.Builder builder=new Config.Builder();
    int i=0;
    while (i < args.length) {
      if ("-cp".equals(args[i]) || "-classpath".equals(args[i])) {
        for (        String p : args[++i].split(File.pathSeparator)) {
          builder.addClasspathEntry(new File(p));
        }
      }
 else       if ("-bcp".equals(args[i]) || "-bootcp".equals(args[i]) || "-bootclasspath".equals(args[i])) {
        for (        String p : args[++i].split(File.pathSeparator)) {
          builder.addBootClasspathEntry(new File(p));
        }
      }
 else       if ("-jar".equals(args[i])) {
        builder.mainJar(new File(args[++i]));
      }
 else       if ("-o".equals(args[i])) {
        builder.executableName(args[++i]);
      }
 else       if ("-d".equals(args[i])) {
        builder.installDir(new File(args[++i]));
      }
 else       if ("-cache".equals(args[i])) {
        builder.cacheDir(new File(args[++i]));
      }
 else       if ("-home".equals(args[i])) {
        builder.home(new Config.Home(new File(args[++i])));
      }
 else       if ("-tmp".equals(args[i])) {
        builder.tmpDir(new File(args[++i]));
      }
 else       if ("-run".equals(args[i])) {
        run=true;
      }
 else       if ("-verbose".equals(args[i])) {
        verbose=true;
      }
 else       if ("-config".equals(args[i])) {
        builder.read(new File(args[++i]));
      }
 else       if ("-dumpconfig".equals(args[i])) {
        dumpConfigFile=args[++i];
      }
 else       if ("-properties".equals(args[i])) {
        builder.addProperties(new File(args[++i]));
      }
 else       if (args[i].startsWith("-P")) {
        int index=args[i].indexOf('=');
        if (index <= 0) {
          throw new IllegalArgumentException("Malformed property: " + args[i]);
        }
        String name=args[i].substring(2,index);
        String value=args[i].substring(index + 1);
        builder.addProperty(name,value);
      }
 else       if ("-debug".equals(args[i])) {
        builder.debug(true);
      }
 else       if ("-use-debug-libs".equals(args[i])) {
        builder.useDebugLibs(true);
      }
 else       if ("-dynamic-jni".equals(args[i])) {
        builder.useDynamicJni(true);
      }
 else       if ("-skiprt".equals(args[i])) {
        builder.skipRuntimeLib(true);
      }
 else       if ("-skipsign".equals(args[i])) {
        builder.skipSigning(true);
      }
 else       if ("-clean".equals(args[i])) {
        builder.clean(true);
      }
 else       if ("-help".equals(args[i]) || "-?".equals(args[i])) {
        printUsageAndExit(null);
      }
 else       if ("-version".equals(args[i])) {
        printVersionAndExit();
      }
 else       if ("-cc".equals(args[i])) {
        builder.ccBinPath(new File(args[++i]));
      }
 else       if ("-os".equals(args[i])) {
        String s=args[++i];
        builder.os("auto".equals(s) ? null : OS.valueOf(s));
      }
 else       if ("-arch".equals(args[i])) {
        String s=args[++i];
        builder.arch("auto".equals(s) ? null : Arch.valueOf(s));
      }
 else       if ("-target".equals(args[i])) {
        String s=args[++i];
        builder.targetType("auto".equals(s) ? null : TargetType.valueOf(s));
      }
 else       if ("-forcelinkclasses".equals(args[i])) {
        for (        String p : args[++i].split(":")) {
          p=p.replace('#','*');
          builder.addForceLinkClass(p);
        }
      }
 else       if ("-libs".equals(args[i])) {
        for (        String p : args[++i].split(":")) {
          builder.addLib(new Config.Lib(p,true));
        }
      }
 else       if ("-exportedsymbols".equals(args[i])) {
        for (        String p : args[++i].split(":")) {
          builder.addExportedSymbol(p);
        }
      }
 else       if ("-frameworks".equals(args[i])) {
        for (        String p : args[++i].split(":")) {
          builder.addFramework(p);
        }
      }
 else       if ("-weakframeworks".equals(args[i])) {
        for (        String p : args[++i].split(":")) {
          builder.addWeakFramework(p);
        }
      }
 else       if ("-resources".equals(args[i])) {
        for (        String p : args[++i].split(":")) {
          if (AntPathMatcher.isPattern(p)) {
            File dir=new File(AntPathMatcher.rtrimWildcardTokens(p));
            String pattern=AntPathMatcher.extractPattern(p);
            builder.addResource(new Resource(dir,null).include(pattern));
          }
 else {
            builder.addResource(new Resource(new File(p)));
          }
        }
      }
 else       if ("-cacerts".equals(args[i])) {
        String name=args[++i];
        Config.Cacerts cacerts=null;
        if (!"none".equals(name)) {
          try {
            cacerts=Config.Cacerts.valueOf(name);
          }
 catch (          IllegalArgumentException e) {
            throw new IllegalArgumentException("Illegal -cacerts value: " + name);
          }
        }
        builder.cacerts(cacerts);
      }
 else       if ("-plist".equals(args[i])) {
        builder.iosInfoPList(new File(args[++i]));
      }
 else       if ("-entitlements".equals(args[i])) {
        builder.iosEntitlementsPList(new File(args[++i]));
      }
 else       if ("-resourcerules".equals(args[i])) {
        builder.iosResourceRulesPList(new File(args[++i]));
      }
 else       if ("-signidentity".equals(args[i])) {
        builder.iosSignIdentity(SigningIdentity.find(SigningIdentity.list(),args[++i]));
      }
 else       if ("-provisioningprofile".equals(args[i])) {
        builder.iosProvisioningProfile(ProvisioningProfile.find(ProvisioningProfile.list(),args[++i]));
      }
 else       if ("-sdk".equals(args[i])) {
        builder.iosSdkVersion(args[++i]);
      }
 else       if ("-ios-sim-family".equals(args[i])) {
        launchArgs.add(args[i++]);
        launchArgs.add(args[i]);
      }
 else       if ("-ios-sim-sdk".equals(args[i])) {
        launchArgs.add(args[i++]);
        launchArgs.add(args[i]);
      }
 else       if ("-createipa".equals(args[i])) {
        createIpa=true;
      }
 else       if (args[i].startsWith("-D")) {
      }
 else       if (args[i].startsWith("-X")) {
      }
 else       if (args[i].startsWith("-rvm:")) {
        runArgs.add(args[i]);
      }
 else       if (args[i].startsWith("-")) {
        throw new IllegalArgumentException("Unrecognized option: " + args[i]);
      }
 else {
        builder.mainClass(args[i++]);
        break;
      }
      i++;
    }
    while (i < args.length) {
      runArgs.add(args[i++]);
    }
    if (createIpa && run) {
      throw new IllegalArgumentException("Specify either -run or -createipa, not both");
    }
    builder.logger(new ConsoleLogger(verbose));
    builder.skipInstall(run);
    if (dumpConfigFile != null) {
      if (dumpConfigFile.equals("-")) {
        builder.write(new OutputStreamWriter(System.out),new File("."));
      }
 else {
        File file=new File(dumpConfigFile);
        if (file.exists()) {
          throw new IllegalArgumentException("Cannot dump config to " + file.getAbsolutePath() + ". The file already exists.");
        }
        builder.write(file);
      }
      return;
    }
    compiler=new AppCompiler(builder.build());
    if (createIpa && (!(compiler.config.getTarget() instanceof IOSTarget) || compiler.config.getArch() != Arch.thumbv7 || compiler.config.getOs() != OS.ios)) {
      throw new IllegalArgumentException("Must build for iOS thumbv7 when creating IPA");
    }
  }
 catch (  Throwable t) {
    String message=t.getMessage();
    if (t instanceof ArrayIndexOutOfBoundsException) {
      message="Missing argument";
    }
    if (t instanceof IndexOutOfBoundsException) {
      message="Missing argument";
    }
    if (verbose && !(t instanceof StringIndexOutOfBoundsException) && !(t instanceof IllegalArgumentException)) {
      t.printStackTrace();
    }
    printUsageAndExit(message);
  }
  try {
    compiler.compile();
    if (run) {
      LaunchParameters launchParameters=compiler.config.getTarget().createLaunchParameters();
      for (int i=0; i < launchArgs.size(); i++) {
        String arg=launchArgs.get(i++);
        if (arg.equals("-ios-sim-family")) {
          if (launchParameters instanceof IOSSimulatorLaunchParameters) {
            String name=launchArgs.get(i++);
            try {
              ((IOSSimulatorLaunchParameters)launchParameters).setFamily(Family.valueOf(name));
            }
 catch (            IllegalArgumentException e) {
              throw new IllegalArgumentException("Illegal -ios-sim-family value: " + name);
            }
            continue;
          }
        }
        if (arg.equals("-ios-sim-sdk")) {
          if (launchParameters instanceof IOSSimulatorLaunchParameters) {
            String value=launchArgs.get(i++);
            if (!value.matches("\\d+\\.\\d+(\\.\\d+)")) {
              throw new IllegalArgumentException("Illegal -ios-sim-sdk value: " + value);
            }
            ((IOSSimulatorLaunchParameters)launchParameters).setSdk(value);
            continue;
          }
        }
        throw new IllegalArgumentException("Unsupported launch argument for the specified target: " + arg);
      }
      launchParameters.setArguments(runArgs);
      Process process=compiler.config.getTarget().launch(launchParameters);
      process.waitFor();
    }
 else     if (createIpa) {
      ((IOSTarget)compiler.config.getTarget()).createIpa();
    }
 else {
      compiler.config.getTarget().install();
    }
  }
 catch (  Throwable t) {
    String message=t.getMessage();
    if (verbose && !(t instanceof ExecuteException)) {
      t.printStackTrace();
    }
    printUsageAndExit(message);
  }
}
