{
  entry=getEntry(entry.getName());
  if (entry == null) {
    return null;
  }
  RandomAccessFile localRaf=raf;
synchronized (localRaf) {
    RAFStream rafStream=new RAFStream(localRaf,entry.localHeaderRelOffset);
    DataInputStream is=new DataInputStream(rafStream);
    final int localMagic=Integer.reverseBytes(is.readInt());
    if (localMagic != LOCSIG) {
      throwZipException("Local File Header",localMagic);
    }
    is.skipBytes(2);
    int gpbf=Short.reverseBytes(is.readShort()) & 0xffff;
    if ((gpbf & ZipFile.GPBF_UNSUPPORTED_MASK) != 0) {
      throw new ZipException("Invalid General Purpose Bit Flag: " + gpbf);
    }
    is.skipBytes(18);
    int fileNameLength=Short.reverseBytes(is.readShort()) & 0xffff;
    int extraFieldLength=Short.reverseBytes(is.readShort()) & 0xffff;
    is.close();
    rafStream.skip(fileNameLength + extraFieldLength);
    if (entry.compressionMethod == ZipEntry.STORED) {
      rafStream.endOffset=rafStream.offset + entry.size;
      return rafStream;
    }
 else {
      rafStream.endOffset=rafStream.offset + entry.compressedSize;
      int bufSize=Math.max(1024,(int)Math.min(entry.getSize(),65535L));
      return new ZipInflaterInputStream(rafStream,new Inflater(true),bufSize,entry);
    }
  }
}
