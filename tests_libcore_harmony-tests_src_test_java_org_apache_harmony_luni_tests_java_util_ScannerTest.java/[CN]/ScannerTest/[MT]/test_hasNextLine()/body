{
  s=new Scanner("");
  s.close();
  try {
    s.hasNextLine();
    fail();
  }
 catch (  IllegalStateException expected) {
  }
  s=new Scanner("test\r\ntest");
  boolean result=s.hasNextLine();
  assertTrue(result);
  MatchResult matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(6,matchResult.end());
  s=new Scanner("\u0085");
  result=s.hasNextLine();
  assertTrue(result);
  matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(1,matchResult.end());
  s=new Scanner("\u2028");
  result=s.hasNextLine();
  assertTrue(result);
  matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(1,matchResult.end());
  s=new Scanner("\u2029");
  result=s.hasNextLine();
  assertTrue(result);
  matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(1,matchResult.end());
  s=new Scanner("test\n");
  assertTrue(s.hasNextLine());
  matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(5,matchResult.end());
  char[] chars=new char[2048];
  Arrays.fill(chars,'a');
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(chars);
  s=new Scanner(stringBuilder.toString());
  result=s.hasNextLine();
  assertTrue(result);
  matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(2048,matchResult.end());
  s=new Scanner("\n\n\n");
  assertTrue(s.hasNextLine());
  matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(1,matchResult.end());
  assertTrue(s.hasNextLine());
  matchResult=s.match();
  assertEquals(0,matchResult.start());
  assertEquals(1,matchResult.end());
}
