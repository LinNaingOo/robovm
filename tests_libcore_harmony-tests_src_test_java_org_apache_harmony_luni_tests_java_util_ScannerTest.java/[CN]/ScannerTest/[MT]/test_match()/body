{
  MatchResult result;
  s=new Scanner("1 2 ");
  try {
    s.match();
    fail();
  }
 catch (  IllegalStateException expected) {
  }
  assertEquals("1",s.next());
  assertEquals("2",s.next());
  result=s.match();
  assertEquals(2,result.start());
  assertEquals(3,result.end());
  assertEquals(2,result.start(0));
  assertEquals(3,result.end(0));
  assertEquals("2",result.group());
  assertEquals("2",result.group(0));
  assertEquals(0,result.groupCount());
  try {
    result.start(1);
    fail();
  }
 catch (  IndexOutOfBoundsException expected) {
  }
  try {
    s.next();
    fail();
  }
 catch (  NoSuchElementException expected) {
  }
  try {
    s.match();
    fail();
  }
 catch (  IllegalStateException expected) {
  }
  s=new Scanner("True faLse");
  try {
    s.match();
    fail();
  }
 catch (  IllegalStateException expected) {
  }
  assertTrue(s.nextBoolean());
  result=s.match();
  assertEquals(0,result.start());
  assertEquals(4,result.end());
  assertEquals(0,result.start(0));
  assertEquals(4,result.end(0));
  assertEquals("True",result.group());
  assertEquals(0,result.groupCount());
  assertFalse(s.nextBoolean());
  try {
    s.nextBoolean();
    fail();
  }
 catch (  NoSuchElementException expected) {
  }
  try {
    s.match();
    fail();
  }
 catch (  IllegalStateException expected) {
  }
  s=new Scanner("True faLse");
  assertTrue(s.nextBoolean());
  result=s.match();
  assertEquals(0,result.start());
  assertEquals(4,result.end());
  assertEquals(0,result.start(0));
  assertEquals(4,result.end(0));
  assertEquals("True",result.group());
  assertEquals(0,result.groupCount());
  s.close();
  try {
    s.nextBoolean();
    fail();
  }
 catch (  IllegalStateException expected) {
  }
  result=s.match();
  assertEquals(0,result.start());
  assertEquals(4,result.end());
  assertEquals(0,result.start(0));
  assertEquals(4,result.end(0));
  assertEquals("True",result.group());
  assertEquals(0,result.groupCount());
  s=new Scanner("True fase");
  assertTrue(s.nextBoolean());
  assertEquals(0,result.groupCount());
  try {
    s.nextBoolean();
    fail();
  }
 catch (  InputMismatchException expected) {
  }
  try {
    s.match();
    fail();
  }
 catch (  IllegalStateException expected) {
  }
  s=new Scanner("True fase");
  assertTrue(s.nextBoolean());
  try {
    s.next((Pattern)null);
    fail();
  }
 catch (  NullPointerException expected) {
  }
  result=s.match();
  assertEquals(0,result.start());
  assertEquals(4,result.end());
  assertEquals(0,result.start(0));
  assertEquals(4,result.end(0));
  assertEquals("True",result.group());
  assertEquals(0,result.groupCount());
}
