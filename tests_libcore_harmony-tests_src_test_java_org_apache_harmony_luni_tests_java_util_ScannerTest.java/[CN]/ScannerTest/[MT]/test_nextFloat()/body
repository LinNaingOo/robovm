{
  s=new Scanner("123 45\u0666. 123.4 .123 ");
  s.useLocale(Locale.ENGLISH);
  assertEquals((float)123.0,s.nextFloat());
  assertEquals((float)456.0,s.nextFloat());
  assertEquals((float)123.4,s.nextFloat());
  assertEquals((float)0.123,s.nextFloat());
  try {
    s.nextFloat();
    fail();
  }
 catch (  NoSuchElementException expected) {
  }
  s=new Scanner("+123.4 -456.7 123,456.789 0.1\u06623,4");
  s.useLocale(Locale.ENGLISH);
  assertEquals((float)123.4,s.nextFloat());
  assertEquals((float)-456.7,s.nextFloat());
  assertEquals((float)123456.789,s.nextFloat());
  try {
    s.nextFloat();
    fail();
  }
 catch (  InputMismatchException expected) {
  }
  s=new Scanner("+123.4E10 -456.7e+12 123,456.789E-10");
  s.useLocale(Locale.ENGLISH);
  assertEquals((float)1.234E12,s.nextFloat());
  assertEquals((float)-4.567E14,s.nextFloat());
  assertEquals((float)1.23456789E-5,s.nextFloat());
  s=new Scanner("NaN Infinity -Infinity");
  assertEquals(Float.NaN,s.nextFloat());
  assertEquals(Float.POSITIVE_INFINITY,s.nextFloat());
  assertEquals(Float.NEGATIVE_INFINITY,s.nextFloat());
  String str=String.valueOf(Float.MAX_VALUE * 2);
  s=new Scanner(str);
  assertEquals(Float.POSITIVE_INFINITY,s.nextFloat());
  s=new Scanner("23,456 23,456");
  s.useLocale(Locale.ENGLISH);
  assertEquals((float)23456.0,s.nextFloat());
  s.useLocale(Locale.GERMANY);
  assertEquals((float)23.456,s.nextFloat());
  s=new Scanner("23.456 23.456");
  s.useLocale(Locale.ENGLISH);
  assertEquals((float)23.456,s.nextFloat());
  s.useLocale(Locale.GERMANY);
  assertEquals((float)23456.0,s.nextFloat());
  s=new Scanner("23,456.7 23.456,7");
  s.useLocale(Locale.ENGLISH);
  assertEquals((float)23456.7,s.nextFloat());
  s.useLocale(Locale.GERMANY);
  assertEquals((float)23456.7,s.nextFloat());
  s=new Scanner("-123.4 123.4- -123.4-");
  s.useLocale(new Locale("ar","AE"));
  try {
    s.nextFloat();
    fail();
  }
 catch (  InputMismatchException expected) {
  }
  s=new Scanner("123- -123");
  s.useLocale(new Locale("mk","MK"));
  try {
    s.nextFloat();
    fail();
  }
 catch (  InputMismatchException expected) {
  }
  assertEquals("123-",s.next());
  assertEquals((float)-123.0,s.nextFloat());
}
