{
  provider.addAlgorithm("KeyAgreement.ECDH",PREFIX + "KeyAgreementSpi$DH");
  registerOid(provider,X9ObjectIdentifiers.id_ecPublicKey,"EC",new KeyFactorySpi.EC());
  registerOid(provider,X9ObjectIdentifiers.dhSinglePass_stdDH_sha1kdf_scheme,"EC",new KeyFactorySpi.EC());
  provider.addAlgorithm("KeyFactory.EC",PREFIX + "KeyFactorySpi$EC");
  provider.addAlgorithm("KeyPairGenerator.EC",PREFIX + "KeyPairGeneratorSpi$EC");
  provider.addAlgorithm("Signature.ECDSA",PREFIX + "SignatureSpi$ecDSA");
  provider.addAlgorithm("Signature.NONEwithECDSA",PREFIX + "SignatureSpi$ecDSAnone");
  provider.addAlgorithm("Alg.Alias.Signature.SHA1withECDSA","ECDSA");
  provider.addAlgorithm("Alg.Alias.Signature.ECDSAwithSHA1","ECDSA");
  provider.addAlgorithm("Alg.Alias.Signature.SHA1WITHECDSA","ECDSA");
  provider.addAlgorithm("Alg.Alias.Signature.ECDSAWITHSHA1","ECDSA");
  provider.addAlgorithm("Alg.Alias.Signature.SHA1WithECDSA","ECDSA");
  provider.addAlgorithm("Alg.Alias.Signature.ECDSAWithSHA1","ECDSA");
  provider.addAlgorithm("Alg.Alias.Signature.1.2.840.10045.4.1","ECDSA");
  addSignatureAlgorithm(provider,"SHA256","ECDSA",PREFIX + "SignatureSpi$ecDSA256",X9ObjectIdentifiers.ecdsa_with_SHA256);
  addSignatureAlgorithm(provider,"SHA384","ECDSA",PREFIX + "SignatureSpi$ecDSA384",X9ObjectIdentifiers.ecdsa_with_SHA384);
  addSignatureAlgorithm(provider,"SHA512","ECDSA",PREFIX + "SignatureSpi$ecDSA512",X9ObjectIdentifiers.ecdsa_with_SHA512);
}
