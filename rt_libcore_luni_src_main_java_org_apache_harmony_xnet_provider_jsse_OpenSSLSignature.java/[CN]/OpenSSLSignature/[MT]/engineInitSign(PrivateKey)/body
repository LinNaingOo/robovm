{
  destroyContextIfExists();
  if (privateKey instanceof OpenSSLDSAPrivateKey) {
    if (engineType != EngineType.DSA) {
      throw new InvalidKeyException("Signature not initialized as DSA");
    }
    OpenSSLDSAPrivateKey dsaPrivateKey=(OpenSSLDSAPrivateKey)privateKey;
    key=dsaPrivateKey.getOpenSSLKey();
  }
 else   if (privateKey instanceof DSAPrivateKey) {
    if (engineType != EngineType.DSA) {
      throw new InvalidKeyException("Signature not initialized as DSA");
    }
    DSAPrivateKey dsaPrivateKey=(DSAPrivateKey)privateKey;
    key=OpenSSLDSAPrivateKey.getInstance(dsaPrivateKey);
  }
 else   if (privateKey instanceof OpenSSLRSAPrivateKey) {
    if (engineType != EngineType.RSA) {
      throw new InvalidKeyException("Signature not initialized as RSA");
    }
    OpenSSLRSAPrivateKey rsaPrivateKey=(OpenSSLRSAPrivateKey)privateKey;
    key=rsaPrivateKey.getOpenSSLKey();
  }
 else   if (privateKey instanceof RSAPrivateCrtKey) {
    if (engineType != EngineType.RSA) {
      throw new InvalidKeyException("Signature not initialized as RSA");
    }
    RSAPrivateCrtKey rsaPrivateKey=(RSAPrivateCrtKey)privateKey;
    key=OpenSSLRSAPrivateCrtKey.getInstance(rsaPrivateKey);
  }
 else   if (privateKey instanceof RSAPrivateKey) {
    if (engineType != EngineType.RSA) {
      throw new InvalidKeyException("Signature not initialized as RSA");
    }
    RSAPrivateKey rsaPrivateKey=(RSAPrivateKey)privateKey;
    key=OpenSSLRSAPrivateKey.getInstance(rsaPrivateKey);
  }
 else {
    throw new InvalidKeyException("Need DSA or RSA private key");
  }
}
