{
  if (targetClass.getSuperclass() == Struct.class) {
    return Struct.Marshaler.MARSHALER_CALLBACK;
  }
  MarshalerCallback<T> callback=null;
synchronized (callbacks) {
    callback=(MarshalerCallback<T>)callbacks.get(targetClass);
  }
  if (callback != null) {
    return callback;
  }
  Class<?> cls=targetClass;
  while (cls.getSuperclass() != null && cls.getAnnotation(org.robovm.rt.bro.annotation.Marshaler.class) == null) {
    cls=cls.getSuperclass();
  }
  org.robovm.rt.bro.annotation.Marshaler marshalerAnno=(org.robovm.rt.bro.annotation.Marshaler)cls.getAnnotation(org.robovm.rt.bro.annotation.Marshaler.class);
  if (marshalerAnno != null) {
    Class<?> marshaler=marshalerAnno.value();
    try {
      Field f=marshaler.getField("MARSHALLER_CALLBACK");
      callback=(MarshalerCallback<T>)f.get(null);
synchronized (callbacks) {
        callbacks.put(targetClass,(MarshalerCallback<NativeObject>)callback);
      }
      return callback;
    }
 catch (    NoSuchFieldException e) {
    }
catch (    IllegalArgumentException e) {
    }
catch (    IllegalAccessException e) {
    }
  }
  throw new RuntimeException("No MarshalerCallback found for class " + targetClass.getName());
}
