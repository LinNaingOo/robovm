{
  node.setVisited(true);
  PDGRegion region=null;
  if (!node2Region.containsKey(node)) {
    region=new PDGRegion(node);
    node2Region.put(node,region);
  }
 else   region=node2Region.get(node);
  List<PDGNode> dependents=node.getDependets();
  if (!dependents.isEmpty())   for (Iterator<PDGNode> itr=dependents.iterator(); itr.hasNext(); ) {
    PDGNode curNode=(PDGNode)itr.next();
    if (curNode.getVisited())     continue;
    region.addPDGNode(curNode);
    if (curNode instanceof LoopedPDGNode) {
      PDGNode body=((LoopedPDGNode)curNode).getBody();
      PDGRegion kid=pdgpostorder(body,list);
      kid.setParent(region);
      region.addChildRegion(kid);
      body.setNode(kid);
    }
 else     if (curNode instanceof ConditionalPDGNode) {
      List<PDGNode> childs=curNode.getDependets();
      Iterator<PDGNode> condItr=childs.iterator();
      while (condItr.hasNext()) {
        PDGNode child=(PDGNode)condItr.next();
        PDGRegion kid=pdgpostorder(child,list);
        kid.setParent(region);
        region.addChildRegion(kid);
        child.setNode(kid);
      }
    }
  }
  list.add(region);
  return region;
}
