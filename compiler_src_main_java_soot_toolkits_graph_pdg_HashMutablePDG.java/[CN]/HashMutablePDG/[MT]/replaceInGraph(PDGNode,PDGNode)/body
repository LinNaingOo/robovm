{
  this.addNode(newnode);
  HashMutableEdgeLabelledDirectedGraph graph=(HashMutableEdgeLabelledDirectedGraph)this.clone();
  List succs=graph.getSuccsOf(oldnode);
  List preds=graph.getPredsOf(oldnode);
  Iterator<Object> itr=succs.iterator();
  while (itr.hasNext()) {
    PDGNode succ=(PDGNode)itr.next();
    List<Object> labels=graph.getLabelsForEdges(oldnode,succ);
    for (Iterator<Object> labelItr=labels.iterator(); labelItr.hasNext(); ) {
      Object label=labelItr.next();
      this.addEdge(newnode,succ,new String(label.toString()));
    }
  }
  itr=preds.iterator();
  while (itr.hasNext()) {
    PDGNode pred=(PDGNode)itr.next();
    List<Object> labels=graph.getLabelsForEdges(pred,oldnode);
    for (Iterator<Object> labelItr=labels.iterator(); labelItr.hasNext(); ) {
      Object label=labelItr.next();
      this.addEdge(pred,newnode,new String(label.toString()));
    }
  }
  this.removeNode(oldnode);
}
