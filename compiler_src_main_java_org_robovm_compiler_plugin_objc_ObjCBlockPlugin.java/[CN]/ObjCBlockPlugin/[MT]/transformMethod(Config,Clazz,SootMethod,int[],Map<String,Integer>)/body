{
  SootMethodType blockMethodType=new SootMethodType(blockMethod);
  if (blockParamIndexes != null) {
    Type[] genericParameterTypes=blockMethodType.getGenericParameterTypes();
    for (int i=0; i < blockParamIndexes.length; i++) {
      int idx=blockParamIndexes[i];
      if (idx == -1) {
        break;
      }
      SootMethod targetMethod=getBlockTargetMethod(blockMethod,idx);
      Type[] actualGenericTypes=resolveTargetMethodSignature(blockMethod,targetMethod,genericParameterTypes[idx]);
      soot.Type[] actualRawTypes=toRawTypes(actualGenericTypes);
      soot.Type[] unboxedTypes=unboxTypes(actualRawTypes);
      String[][] targetMethodAnnotations=parseTargetMethodAnnotations(targetMethod,readStringElem(getParameterAnnotation(blockMethod,idx,BLOCK),"value",""));
      String marshaler=createBlockMarshaler(config,clazz,targetMethod,actualGenericTypes,actualRawTypes,unboxedTypes,blockTypeIds,targetMethodAnnotations);
      addMarshalerAnnotation(blockMethod,idx,marshaler);
    }
  }
  if (hasAnnotation(blockMethod,BLOCK)) {
    SootMethod targetMethod=getBlockTargetMethod(blockMethod);
    Type[] actualGenericTypes=resolveTargetMethodSignature(blockMethod,targetMethod,blockMethodType.getGenericReturnType());
    soot.Type[] actualRawTypes=toRawTypes(actualGenericTypes);
    soot.Type[] unboxedTypes=unboxTypes(actualRawTypes);
    String[][] targetMethodAnnotations=parseTargetMethodAnnotations(targetMethod,readStringElem(getAnnotation(blockMethod,BLOCK),"value",""));
    String marshaler=createBlockMarshaler(config,clazz,targetMethod,actualGenericTypes,actualRawTypes,unboxedTypes,blockTypeIds,targetMethodAnnotations);
    addMarshalerAnnotation(blockMethod,marshaler);
  }
}
