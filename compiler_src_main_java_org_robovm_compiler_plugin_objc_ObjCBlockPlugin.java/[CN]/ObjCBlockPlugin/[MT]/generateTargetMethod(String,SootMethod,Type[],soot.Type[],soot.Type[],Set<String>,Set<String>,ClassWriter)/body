{
  String name=targetMethod.getName();
  String signature=getGenericSignature(Arrays.asList(actualGenericTypes).subList(1,actualGenericTypes.length),actualGenericTypes[0]);
  String desc=getDescriptor(targetMethod);
  MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,name,desc,signature,null);
  mv.visitCode();
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,owner,"objCBlock","L" + getInternalName(org_robovm_objc_ObjCBlock) + ";");
  mv.visitMethodInsn(INVOKEVIRTUAL,getInternalName(org_robovm_objc_ObjCBlock),"invoke","()J");
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,owner,"objCBlock","L" + getInternalName(org_robovm_objc_ObjCBlock) + ";");
  for (int i=1, var=1; i < actualRawTypes.length; i++, var++) {
    soot.Type from=actualRawTypes[i];
    if (from == LongType.v()) {
      mv.visitVarInsn(LLOAD,var);
      var++;
    }
 else     if (from == FloatType.v()) {
      mv.visitVarInsn(FLOAD,var);
    }
 else     if (from == DoubleType.v()) {
      mv.visitVarInsn(DLOAD,var);
      var++;
    }
 else     if (from instanceof PrimType) {
      mv.visitVarInsn(ILOAD,var);
    }
 else {
      mv.visitVarInsn(ALOAD,var);
    }
    soot.Type to=unboxedTypes[i];
    if (from != to) {
      mv.visitTypeInsn(CHECKCAST,getInternalName(from));
      String unboxDesc=getDescriptor(Collections.singletonList(from),to);
      usedUnboxMethods.add(unboxDesc);
      mv.visitMethodInsn(INVOKESTATIC,owner,"unbox",unboxDesc);
    }
  }
  List<soot.Type> paramTypes=new ArrayList<>();
  paramTypes.add(LongType.v());
  paramTypes.add(org_robovm_objc_ObjCBlock.getType());
  paramTypes.addAll(Arrays.asList(unboxedTypes).subList(1,unboxedTypes.length));
  mv.visitMethodInsn(INVOKESTATIC,owner,"invoke",getDescriptor(paramTypes,unboxedTypes[0]));
  if (unboxedTypes[0] != actualRawTypes[0]) {
    String boxDesc=getDescriptor(Collections.singletonList(unboxedTypes[0]),actualRawTypes[0]);
    usedBoxMethods.add(boxDesc);
    mv.visitMethodInsn(INVOKESTATIC,owner,"box",boxDesc);
  }
  if (actualRawTypes[0] == VoidType.v()) {
    mv.visitInsn(RETURN);
  }
 else   if (actualRawTypes[0] == LongType.v()) {
    mv.visitInsn(LRETURN);
  }
 else   if (actualRawTypes[0] == FloatType.v()) {
    mv.visitInsn(FRETURN);
  }
 else   if (actualRawTypes[0] == DoubleType.v()) {
    mv.visitInsn(DRETURN);
  }
 else   if (actualRawTypes[0] instanceof PrimType) {
    mv.visitInsn(IRETURN);
  }
 else {
    mv.visitInsn(ARETURN);
  }
  mv.visitMaxs(0,0);
  mv.visitEnd();
}
