{
  Object branches[];
  Code_attribute ca=method.locate_code_attribute();
{
    h2bb=new Hashtable<Instruction,BasicBlock>(100,25);
    t2bb=new Hashtable<Instruction,BasicBlock>(100,25);
    Instruction insn=this.sentinel.next;
    BasicBlock blast=null;
    if (insn != null) {
      Instruction tail=buildBasicBlock(insn);
      cfg=new BasicBlock(insn,tail);
      h2bb.put(insn,cfg);
      t2bb.put(tail,cfg);
      insn=tail.next;
      blast=cfg;
    }
    while (insn != null) {
      Instruction tail=buildBasicBlock(insn);
      BasicBlock block=new BasicBlock(insn,tail);
      blast.next=block;
      blast=block;
      h2bb.put(insn,block);
      t2bb.put(tail,block);
      insn=tail.next;
    }
  }
  BasicBlock block=cfg;
  while (block != null) {
    Instruction insn=block.tail;
    if (insn.branches) {
      if (insn instanceof Instruction_Athrow) {
        HashSet<Instruction> ethandlers=new HashSet<Instruction>();
        for (int i=0; i < ca.exception_table_length; i++) {
          exception_table_entry etentry=ca.exception_table[i];
          if (insn.label >= etentry.start_inst.label && (etentry.end_inst == null || insn.label < etentry.end_inst.label)) {
            ethandlers.add(etentry.handler_inst);
          }
        }
        branches=ethandlers.toArray();
      }
 else {
        branches=insn.branchpoints(insn.next);
      }
      if (branches != null) {
        block.succ.ensureCapacity(block.succ.size() + branches.length);
        for (        Object element : branches) {
          if (element != null) {
            BasicBlock bb=h2bb.get(element);
            if (bb == null) {
              G.v().out.println("Warning: " + "target of a branch is null");
              G.v().out.println(insn);
            }
 else {
              block.succ.addElement(bb);
              bb.pred.addElement(block);
            }
          }
        }
      }
    }
 else     if (block.next != null) {
      block.succ.addElement(block.next);
      block.next.pred.addElement(block);
    }
    block=block.next;
  }
  for (int i=0; i < ca.exception_table_length; i++) {
    BasicBlock bb=h2bb.get(ca.exception_table[i].handler_inst);
    if (bb == null) {
      G.v().out.println("Warning: No basic block found for" + " start of exception handler code.");
    }
 else {
      bb.beginException=true;
      ca.exception_table[i].b=bb;
    }
  }
}
