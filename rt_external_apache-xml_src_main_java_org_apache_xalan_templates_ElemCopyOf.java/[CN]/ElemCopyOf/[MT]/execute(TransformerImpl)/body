{
  try {
    XPathContext xctxt=transformer.getXPathContext();
    int sourceNode=xctxt.getCurrentNode();
    XObject value=m_selectExpression.execute(xctxt,sourceNode,this);
    SerializationHandler handler=transformer.getSerializationHandler();
    if (null != value) {
      int type=value.getType();
      String s;
switch (type) {
case XObject.CLASS_BOOLEAN:
case XObject.CLASS_NUMBER:
case XObject.CLASS_STRING:
        s=value.str();
      handler.characters(s.toCharArray(),0,s.length());
    break;
case XObject.CLASS_NODESET:
  DTMIterator nl=value.iter();
DTMTreeWalker tw=new TreeWalker2Result(transformer,handler);
int pos;
while (DTM.NULL != (pos=nl.nextNode())) {
DTM dtm=xctxt.getDTMManager().getDTM(pos);
short t=dtm.getNodeType(pos);
if (t == DTM.DOCUMENT_NODE) {
for (int child=dtm.getFirstChild(pos); child != DTM.NULL; child=dtm.getNextSibling(child)) {
  tw.traverse(child);
}
}
 else if (t == DTM.ATTRIBUTE_NODE) {
SerializerUtils.addAttribute(handler,pos);
}
 else {
tw.traverse(pos);
}
}
break;
case XObject.CLASS_RTREEFRAG:
SerializerUtils.outputResultTreeFragment(handler,value,transformer.getXPathContext());
break;
default :
s=value.str();
handler.characters(s.toCharArray(),0,s.length());
break;
}
}
}
 catch (org.xml.sax.SAXException se) {
throw new TransformerException(se);
}
}
