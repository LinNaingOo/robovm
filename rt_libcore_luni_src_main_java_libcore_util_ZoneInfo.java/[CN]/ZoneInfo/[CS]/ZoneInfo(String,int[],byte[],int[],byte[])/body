{
  mTransitions=transitions;
  mTypes=types;
  mIsDsts=isDsts;
  setID(name);
  int lastStd=0;
  boolean haveStd=false;
  int lastDst=0;
  boolean haveDst=false;
  for (int i=mTransitions.length - 1; (!haveStd || !haveDst) && i >= 0; --i) {
    int type=mTypes[i] & 0xff;
    if (!haveStd && mIsDsts[type] == 0) {
      haveStd=true;
      lastStd=i;
    }
    if (!haveDst && mIsDsts[type] != 0) {
      haveDst=true;
      lastDst=i;
    }
  }
  if (lastStd >= mTypes.length) {
    mRawOffset=gmtOffsets[0];
  }
 else {
    mRawOffset=gmtOffsets[mTypes[lastStd] & 0xff];
  }
  if (lastDst >= mTypes.length) {
    mDstSavings=0;
  }
 else {
    mDstSavings=Math.abs(gmtOffsets[mTypes[lastStd] & 0xff] - gmtOffsets[mTypes[lastDst] & 0xff]) * 1000;
  }
  int firstStd=-1;
  for (int i=0; i < mTransitions.length; ++i) {
    if (mIsDsts[mTypes[i] & 0xff] == 0) {
      firstStd=i;
      break;
    }
  }
  int earliestRawOffset=(firstStd != -1) ? gmtOffsets[mTypes[firstStd] & 0xff] : mRawOffset;
  mOffsets=gmtOffsets;
  for (int i=0; i < mOffsets.length; i++) {
    mOffsets[i]-=mRawOffset;
  }
  boolean usesDst=false;
  long currentUnixTime=System.currentTimeMillis() / 1000;
  if (mTransitions.length > 0) {
    long latestScheduleTime=((long)mTransitions[mTransitions.length - 1]) & 0xffffffff;
    if (currentUnixTime < latestScheduleTime) {
      usesDst=true;
    }
  }
  mUseDst=usesDst;
  mRawOffset*=1000;
  mEarliestRawOffset=earliestRawOffset * 1000;
}
