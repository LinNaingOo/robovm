{
  float[] reversedArray=new float[arraySize];
  for (int counter=0; counter < arraySize; counter++)   reversedArray[counter]=(float)(arraySize - counter - 1);
  Arrays.sort(reversedArray);
  for (int counter=0; counter < arraySize; counter++)   assertTrue("Resulting array not sorted",reversedArray[counter] == (float)counter);
  float[] specials1=new float[]{Float.NaN,Float.MAX_VALUE,Float.MIN_VALUE,0f,-0f,Float.POSITIVE_INFINITY,Float.NEGATIVE_INFINITY};
  float[] specials2=new float[]{0f,Float.POSITIVE_INFINITY,-0f,Float.NEGATIVE_INFINITY,Float.MIN_VALUE,Float.NaN,Float.MAX_VALUE};
  float[] answer=new float[]{Float.NEGATIVE_INFINITY,-0f,0f,Float.MIN_VALUE,Float.MAX_VALUE,Float.POSITIVE_INFINITY,Float.NaN};
  Arrays.sort(specials1);
  Object[] print1=new Object[specials1.length];
  for (int i=0; i < specials1.length; i++)   print1[i]=new Float(specials1[i]);
  assertTrue("specials sort incorrectly 1: " + Arrays.asList(print1),Arrays.equals(specials1,answer));
  Arrays.sort(specials2);
  Object[] print2=new Object[specials2.length];
  for (int i=0; i < specials2.length; i++)   print2[i]=new Float(specials2[i]);
  assertTrue("specials sort incorrectly 2: " + Arrays.asList(print2),Arrays.equals(specials2,answer));
}
