{
  if (errorMessage != null) {
    System.err.format("nullvm: %s\n",errorMessage);
  }
  System.err.println("Usage: nullvm [-options] class [run-args]");
  System.err.println("   or  nullvm [-options] -jar jarfile [run-args]");
  System.err.println("   or  nullvm [-options] -nolink");
  System.err.println("Options:");
  System.err.println("  -bootclasspath <list> ");
  System.err.println("  -bootcp <list>        ");
  System.err.println("  -bcp <list>           : separated list of directories, JAR archives, and ZIP \n" + "                        archives to search for class files. Used to locate the \n" + "                        java.* and javax.* classes. Default is \n"+ "                        ~/nullvm/lib/nullvm-rt.jar.");
  System.err.println("  -cp <list>            ");
  System.err.println("  -classpath <list>     : separated list of directories, JAR archives, and ZIP \n" + "                        archives to search for class files.");
  System.err.println("  -cache <dir>          Directory where cached compiled class files will be placed.\n" + "                        Default is ~/.nullvm/cache");
  System.err.println("  -clean                Compile class files even if a compiled version already \n" + "                        exists in the cache.");
  System.err.println("  -d <dir>              Place the generated executable and other files in <dir>.");
  System.err.println("  -gcc-bin <path>       Path to the gcc binary");
  System.err.println("  -gcc-opt <opt>        Extra option to pass to gcc");
  System.err.println("  -ar-bin <path>        Path to the ar binary");
  System.err.println("  -home <dir>           Directory where NullVM runtime has been installed and \n" + "                        where compiled class files will be cached. Default is \n" + "                        ~/.nullvm");
  System.err.println("  -jar <path>           Use main class as specified by the manifest in this JAR \n" + "                        archive.");
  System.err.println("  -llc-opt <opt         Extra option to pass to llc");
  System.err.println("  -llvm-bin-dir <path>  Path where the LLVM binaries can be found");
  System.err.println("  -o <name>             The name of the target executable or library");
  System.err.println("  -opt-opt <opt>        Extra option to pass to opt");
  System.err.println("  -os <name>            The name of the OS to build for. Allowed values are \n" + "                        'auto', 'linux' and 'darwin'. Default is 'auto' which\n" + "                        means autodetect.");
  System.err.println("  -arch <name>          The name of the LLVM arch to compile for. Allowed values\n" + "                        are 'auto', 'i386' and 'x86_64' Default is 'auto' which \n" + "                        means autodetect.");
  System.err.println("  -cpu <name>           The name of the LLVM cpu to compile for. The LLVM default\n" + "                        is used by default. Use llc to determine allowed values.");
  System.err.println("  -debug                Generates debug information");
  System.err.println("  -nort                 Do not add default nullvm-rt.jar to bootclasspath");
  System.err.println("  -nolink               Do not link the final executable");
  System.err.println("  -verbose              Output messages about what the compiler is doing");
  System.err.println("  -help, -?             Display this information");
  System.exit(errorMessage != null ? 1 : 0);
}
