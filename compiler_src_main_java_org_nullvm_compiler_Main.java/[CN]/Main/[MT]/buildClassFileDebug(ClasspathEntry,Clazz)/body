{
  String className=clazz.getInternalName();
  File outFile=new File(entry.getObjectCacheDir(),className.replace('/',File.separatorChar) + ".class.o");
  File llFile=new File(entry.getLlvmCacheDir(),className.replace('/',File.separatorChar) + ".class.ll");
  if (!clean && outFile.exists() && outFile.lastModified() >= clazz.lastModified()) {
    if (verbose) {
      stdout.println("Skipping unchanged class file: " + clazz.getFileName());
    }
    return outFile;
  }
  llFile.getParentFile().mkdirs();
  outFile.getParentFile().mkdirs();
  if (verbose) {
    stdout.format("Compiling class file '%s' to object file '%s'\n",clazz.getFileName(),outFile);
  }
  classToIr(clazz,llFile);
  File tmpBcFile=changeExt(llFile,"tmp.bc");
  llvmAs(llFile,tmpBcFile);
  File bcFile=changeExt(llFile,"bc");
  opt(tmpBcFile,bcFile,"-mem2reg","-always-inline");
  File sFile=changeExt(outFile,"s");
  llc(bcFile,sFile);
  gcc(sFile,outFile);
  return outFile;
}
