{
  compile();
  if (!config.isSkipLinking()) {
    if (config.isRun()) {
      List<String> bootclasspathContents=new ArrayList<String>();
      List<String> classpathContents=new ArrayList<String>();
      for (      Path path : config.getClazzes().getPaths()) {
        if (path.isInBootClasspath()) {
          bootclasspathContents.add(path.getFile().getAbsolutePath());
        }
 else {
          classpathContents.add(path.getFile().getAbsolutePath());
        }
      }
      FileUtils.writeStringToFile(new File(config.getTargetDir(),"bootclasspath"),join(bootclasspathContents,"\r\n"),"UTF-8");
      FileUtils.writeStringToFile(new File(config.getTargetDir(),"classpath"),join(classpathContents,"\r\n"),"UTF-8");
      runTarget();
    }
 else {
      for (      File f : config.getOsArchDepLibDir().listFiles()) {
        if (f.getName().matches(".*\\.(so|dylib)(\\.1)?")) {
          FileUtils.copyFileToDirectory(f,config.getTargetDir());
        }
      }
      File libBoot=new File(new File(config.getTargetDir(),"lib"),"boot");
      libBoot.mkdirs();
      File libMain=new File(new File(config.getTargetDir(),"lib"),"main");
      libMain.mkdirs();
      List<String> bootclasspathContents=new ArrayList<String>();
      List<String> classpathContents=new ArrayList<String>();
      for (      Path path : config.getClazzes().getPaths()) {
        File dest=null;
        if (path.isInBootClasspath()) {
          dest=new File(libBoot,config.getArchiveName(path));
          bootclasspathContents.add("lib/boot/" + dest.getName());
        }
 else {
          dest=new File(libMain,config.getArchiveName(path));
          classpathContents.add("lib/main/" + dest.getName());
        }
        stripArchive(config.getArchivePath(path),dest);
      }
      FileUtils.writeStringToFile(new File(config.getTargetDir(),"bootclasspath"),join(bootclasspathContents,"\r\n"),"UTF-8");
      FileUtils.writeStringToFile(new File(config.getTargetDir(),"classpath"),join(classpathContents,"\r\n"),"UTF-8");
    }
  }
}
