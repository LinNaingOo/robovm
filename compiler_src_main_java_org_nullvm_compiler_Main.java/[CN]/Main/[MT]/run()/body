{
  if (jarFile != null) {
    classpath.add(jarFile);
  }
  if (!nolink && output == null) {
    throw new IllegalArgumentException("No output dir specified");
  }
  if (classpath.isEmpty()) {
    throw new IllegalArgumentException("No classpath specified");
  }
  if (!nolink && target == null && mainClass == null) {
    throw new IllegalArgumentException("No target and no main class specified");
  }
  if (os == null) {
    os=detectOS();
    if (verbose) {
      System.out.println("Autodetected OS: " + os);
    }
  }
  if (arch == null) {
    arch=detectArch();
    if (verbose) {
      System.out.println("Autodetected arch: " + arch);
    }
  }
  if (verbose) {
    if (mainClass != null) {
      stdout.println("Using main class: " + mainClass);
    }
    stdout.println("Run arguments: " + runArgs);
  }
  homeLib=new File(home,"lib");
  homeLibOsArch=new File(new File(homeLib,os.toString()),arch.toString());
  cache.mkdirs();
  llvmCache=new File(cache,"llvm");
  llvmCache.mkdirs();
  objectCache=new File(cache,"object");
  objectCache.mkdirs();
  if (target == null) {
    target=mainClass;
  }
  if (!nort) {
    bootclasspath.add(0,new File(homeLib,"nullvm-rt.jar"));
  }
  tmpFile=File.createTempFile("nullvm",".tmp");
  tmpFile.delete();
  tmpFile.mkdirs();
  Clazzes clazzes=new Clazzes(bootclasspath,classpath);
  List<ClasspathEntry> classpathEntries=new ArrayList<ClasspathEntry>();
  for (  Path path : clazzes.getBootclasspathPaths()) {
    classpathEntries.add(createClasspathEntry(path,true));
  }
  for (  Path path : clazzes.getClasspathPaths()) {
    classpathEntries.add(createClasspathEntry(path,false));
  }
  SootClassCompiler.init(clazzes,getChangedClasses(classpathEntries));
  output.mkdirs();
  build(classpathEntries);
  if (!nolink) {
    if (run) {
      List<String> bootclasspathContents=new ArrayList<String>();
      List<String> classpathContents=new ArrayList<String>();
      for (      ClasspathEntry entry : classpathEntries) {
        if (entry.isInBootClasspath()) {
          bootclasspathContents.add(entry.getPath().getFile().getAbsolutePath());
        }
 else {
          classpathContents.add(entry.getPath().getFile().getAbsolutePath());
        }
      }
      FileUtils.writeStringToFile(new File(output,"bootclasspath"),join(bootclasspathContents,"\r\n"),"UTF-8");
      FileUtils.writeStringToFile(new File(output,"classpath"),join(classpathContents,"\r\n"),"UTF-8");
      runTarget();
    }
 else {
      for (      File f : homeLibOsArch.listFiles()) {
        if (f.getName().matches(".*\\.(so|dylib)(\\.1)?")) {
          FileUtils.copyFileToDirectory(f,output);
        }
      }
      File libBoot=new File(new File(output,"lib"),"boot");
      libBoot.mkdirs();
      File libMain=new File(new File(output,"lib"),"main");
      libMain.mkdirs();
      List<String> bootclasspathContents=new ArrayList<String>();
      List<String> classpathContents=new ArrayList<String>();
      for (      ClasspathEntry entry : classpathEntries) {
        File dest=null;
        if (entry.isInBootClasspath()) {
          dest=new File(libBoot,entry.getArchive().getName());
          bootclasspathContents.add("lib/boot/" + entry.getArchive().getName());
        }
 else {
          dest=new File(libMain,entry.getArchive().getName());
          classpathContents.add("lib/main/" + entry.getArchive().getName());
        }
        stripArchive(entry.getArchive(),dest);
      }
      FileUtils.writeStringToFile(new File(output,"bootclasspath"),join(bootclasspathContents,"\r\n"),"UTF-8");
      FileUtils.writeStringToFile(new File(output,"classpath"),join(classpathContents,"\r\n"),"UTF-8");
    }
  }
}
