{
  boolean err=false;
  Iterator it=edges.keySet().iterator();
  while (it.hasNext()) {
    PurityNode src=(PurityNode)it.next();
    Iterator itt=edges.get(src).iterator();
    while (itt.hasNext()) {
      PurityEdge e=(PurityEdge)itt.next();
      if (!src.equals(e.getSource())) {
        G.v().out.println("invalid edge source " + e + ", should be "+ src);
        err=true;
      }
      if (!nodes.contains(e.getSource())) {
        G.v().out.println("nodes does not contain edge source " + e);
        err=true;
      }
      if (!nodes.contains(e.getTarget())) {
        G.v().out.println("nodes does not contain edge target " + e);
        err=true;
      }
      if (!backEdges.get(e.getTarget()).contains(e)) {
        G.v().out.println("backEdges does not contain edge " + e);
        err=true;
      }
      if (!e.isInside() && !e.getTarget().isLoad()) {
        G.v().out.println("target of outside edge is not a load node " + e);
        err=true;
      }
    }
  }
  it=backEdges.keySet().iterator();
  while (it.hasNext()) {
    PurityNode dst=(PurityNode)it.next();
    Iterator itt=backEdges.get(dst).iterator();
    while (itt.hasNext()) {
      PurityEdge e=(PurityEdge)itt.next();
      if (!dst.equals(e.getTarget())) {
        G.v().out.println("invalid backEdge dest " + e + ", should be "+ dst);
        err=true;
      }
      if (!edges.get(e.getSource()).contains(e)) {
        G.v().out.println("backEdge not in edges " + e);
        err=true;
      }
    }
  }
  it=nodes.iterator();
  while (it.hasNext()) {
    PurityNode n=(PurityNode)it.next();
    if (n.isParam() && !paramNodes.contains(n)) {
      G.v().out.println("paramNode not in paramNodes " + n);
      err=true;
    }
  }
  it=paramNodes.iterator();
  while (it.hasNext()) {
    PurityNode n=(PurityNode)it.next();
    if (!n.isParam()) {
      G.v().out.println("paramNode contains a non-param node " + n);
      err=true;
    }
    if (!nodes.contains(n)) {
      G.v().out.println("paramNode not in nodes " + n);
      err=true;
    }
  }
  it=globEscape.iterator();
  while (it.hasNext()) {
    PurityNode n=(PurityNode)it.next();
    if (!nodes.contains(n)) {
      G.v().out.println("globEscape not in nodes " + n);
      err=true;
    }
  }
  it=locals.keySet().iterator();
  while (it.hasNext()) {
    Local l=(Local)it.next();
    Iterator itt=locals.get(l).iterator();
    while (itt.hasNext()) {
      PurityNode n=(PurityNode)itt.next();
      if (!nodes.contains(n)) {
        G.v().out.println("target of local node in nodes " + l + " / "+ n);
        err=true;
      }
      if (!backLocals.get(n).contains(l)) {
        G.v().out.println("backLocals does contain local " + l + " / "+ n);
        err=true;
      }
    }
  }
  it=backLocals.keySet().iterator();
  while (it.hasNext()) {
    PurityNode n=(PurityNode)it.next();
    Iterator itt=backLocals.get(n).iterator();
    while (itt.hasNext()) {
      Local l=(Local)itt.next();
      if (!nodes.contains(n)) {
        G.v().out.println("backLocal node not in in nodes " + l + " / "+ n);
        err=true;
      }
      if (!locals.get(l).contains(n)) {
        G.v().out.println("locals does contain backLocal " + l + " / "+ n);
        err=true;
      }
    }
  }
  it=ret.iterator();
  while (it.hasNext()) {
    PurityNode n=(PurityNode)it.next();
    if (!nodes.contains(n)) {
      G.v().out.println("target of ret not in nodes " + n);
      err=true;
    }
  }
  it=mutated.keySet().iterator();
  while (it.hasNext()) {
    PurityNode n=(PurityNode)it.next();
    if (!nodes.contains(n)) {
      G.v().out.println("mutated node not in nodes " + n);
      err=true;
    }
  }
  if (err) {
    dump();
    DotGraph dot=new DotGraph("sanityCheckFailure");
    fillDotGraph("chk",dot);
    dot.plot("sanityCheckFailure.dot");
    throw new Error("PurityGraph sanity check failed!!!");
  }
}
