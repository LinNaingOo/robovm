{
  analysis=new BranchedRefVarsAnalysis(graph);
  unitToVarsBefore=new HashMap<Unit,List<RefIntPair>>(graph.size() * 2 + 1,0.7f);
  unitToVarsAfterFall=new HashMap<Unit,List<RefIntPair>>(graph.size() * 2 + 1,0.7f);
  unitToListsOfVarsAfterBranches=new HashMap<Unit,List<List<RefIntPair>>>(graph.size() * 2 + 1,0.7f);
  unitToVarsNeedCheck=new HashMap<Unit,List<Object>>(graph.size() * 2 + 1,0.7f);
  unitToVarsDontNeedCheck=new HashMap<Unit,List<RefIntPair>>(graph.size() * 2 + 1,0.7f);
  Iterator unitIt=graph.iterator();
  while (unitIt.hasNext()) {
    FlowSet set;
    Unit s=(Unit)unitIt.next();
    set=(FlowSet)analysis.getFallFlowAfter(s);
    unitToVarsAfterFall.put(s,Collections.unmodifiableList(buildList(set)));
{
      List branchesFlowsets=analysis.getBranchFlowAfter(s);
      List<List<RefIntPair>> lst=new ArrayList<List<RefIntPair>>(branchesFlowsets.size());
      Iterator it=branchesFlowsets.iterator();
      while (it.hasNext()) {
        set=(FlowSet)it.next();
        lst.add(Collections.unmodifiableList(buildList(set)));
      }
      unitToListsOfVarsAfterBranches.put(s,lst);
    }
    set=(FlowSet)analysis.getFlowBefore(s);
    unitToVarsBefore.put(s,Collections.unmodifiableList(buildList(set)));
    if (computeChecks) {
      ArrayList<RefIntPair> dontNeedCheckVars=new ArrayList<RefIntPair>();
      ArrayList<Object> needCheckVars=new ArrayList<Object>();
      HashSet allChecksSet=new HashSet(5,0.7f);
      allChecksSet.addAll(analysis.unitToArrayRefChecksSet.get(s));
      allChecksSet.addAll(analysis.unitToInstanceFieldRefChecksSet.get(s));
      allChecksSet.addAll(analysis.unitToInstanceInvokeExprChecksSet.get(s));
      allChecksSet.addAll(analysis.unitToLengthExprChecksSet.get(s));
      Iterator it=allChecksSet.iterator();
      while (it.hasNext()) {
        Value v=(Value)it.next();
        int vInfo=analysis.anyRefInfo(v,set);
        if (vInfo == BranchedRefVarsAnalysis.kTop) {
          needCheckVars.add(v);
        }
 else         if (vInfo == BranchedRefVarsAnalysis.kBottom) {
          needCheckVars.add(analysis.getKRefIntPair(new EquivalentValue(v),vInfo));
        }
 else {
          dontNeedCheckVars.add(analysis.getKRefIntPair(new EquivalentValue(v),vInfo));
        }
      }
      unitToVarsNeedCheck.put(s,Collections.unmodifiableList(needCheckVars));
      unitToVarsDontNeedCheck.put(s,Collections.unmodifiableList(dontNeedCheckVars));
    }
  }
}
