{
  if (executor != null) {
    throw new IllegalStateException("play() already called");
  }
  executor=Executors.newCachedThreadPool();
  serverSocket=new ServerSocket(port);
  serverSocket.setReuseAddress(true);
  this.port=serverSocket.getLocalPort();
  executor.execute(namedRunnable("MockWebServer-accept-" + port,new Runnable(){
    public void run(){
      try {
        acceptConnections();
      }
 catch (      Throwable e) {
        logger.log(Level.WARNING,"MockWebServer connection failed",e);
      }
      try {
        serverSocket.close();
      }
 catch (      Throwable e) {
        logger.log(Level.WARNING,"MockWebServer server socket close failed",e);
      }
      for (Iterator<Socket> s=openClientSockets.keySet().iterator(); s.hasNext(); ) {
        try {
          s.next().close();
          s.remove();
        }
 catch (        Throwable e) {
          logger.log(Level.WARNING,"MockWebServer socket close failed",e);
        }
      }
      try {
        executor.shutdown();
      }
 catch (      Throwable e) {
        logger.log(Level.WARNING,"MockWebServer executor shutdown failed",e);
      }
    }
    private void acceptConnections() throws Exception {
      while (true) {
        Socket socket;
        try {
          socket=serverSocket.accept();
        }
 catch (        SocketException e) {
          return;
        }
        final SocketPolicy socketPolicy=dispatcher.peekSocketPolicy();
        if (socketPolicy == DISCONNECT_AT_START) {
          dispatchBookkeepingRequest(0,socket);
          socket.close();
        }
 else {
          openClientSockets.put(socket,true);
          serveConnection(socket);
        }
      }
    }
  }
));
}
