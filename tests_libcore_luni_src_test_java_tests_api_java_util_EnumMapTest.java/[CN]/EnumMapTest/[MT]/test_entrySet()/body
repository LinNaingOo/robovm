{
  EnumMap enumSizeMap=new EnumMap(Size.class);
  enumSizeMap.put(Size.Middle,1);
  enumSizeMap.put(Size.Big,null);
  MockEntry mockEntry=new MockEntry(Size.Middle,1);
  Set set=enumSizeMap.entrySet();
  Set set1=enumSizeMap.entrySet();
  assertSame("Should be same",set1,set);
  try {
    set.add(mockEntry);
    fail("Should throw UnsupportedOperationException");
  }
 catch (  UnsupportedOperationException e) {
  }
  assertTrue("Returned false for contained object",set.contains(mockEntry));
  mockEntry=new MockEntry(Size.Middle,null);
  assertFalse("Returned true for uncontained object",set.contains(mockEntry));
  assertFalse("Returned true for uncontained object",set.contains(Size.Small));
  mockEntry=new MockEntry(new Integer(1),1);
  assertFalse("Returned true for uncontained object",set.contains(mockEntry));
  assertFalse("Returned true for uncontained object",set.contains(new Integer(1)));
  mockEntry=new MockEntry(Size.Big,null);
  assertTrue("Returned false for contained object",set.contains(mockEntry));
  assertTrue("Returned false when the object can be removed",set.remove(mockEntry));
  assertFalse("Returned true for uncontained object",set.contains(mockEntry));
  assertFalse("Returned true when the object can not be removed",set.remove(mockEntry));
  mockEntry=new MockEntry(new Integer(1),1);
  assertFalse("Returned true when the object can not be removed",set.remove(mockEntry));
  assertFalse("Returned true when the object can not be removed",set.remove(new Integer(1)));
  enumSizeMap.put(Size.Big,3);
  mockEntry=new MockEntry(Size.Big,3);
  assertTrue("Returned false for contained object",set.contains(mockEntry));
  enumSizeMap.remove(Size.Big);
  assertFalse("Returned true for uncontained object",set.contains(mockEntry));
  assertEquals("Wrong size",1,set.size());
  set.clear();
  assertEquals("Wrong size",0,set.size());
  enumSizeMap=new EnumMap(Size.class);
  enumSizeMap.put(Size.Middle,1);
  enumSizeMap.put(Size.Big,null);
  set=enumSizeMap.entrySet();
  Collection c=new ArrayList();
  c.add(new MockEntry(Size.Middle,1));
  assertTrue("Return wrong value",set.containsAll(c));
  assertTrue("Remove does not success",set.removeAll(c));
  enumSizeMap.put(Size.Middle,1);
  c.add(new MockEntry(Size.Big,3));
  assertTrue("Remove does not success",set.removeAll(c));
  assertFalse("Should return false",set.removeAll(c));
  assertEquals("Wrong size",1,set.size());
  enumSizeMap=new EnumMap(Size.class);
  enumSizeMap.put(Size.Middle,1);
  enumSizeMap.put(Size.Big,null);
  set=enumSizeMap.entrySet();
  c=new ArrayList();
  c.add(new MockEntry(Size.Middle,1));
  c.add(new MockEntry(Size.Big,3));
  assertTrue("Retain does not success",set.retainAll(c));
  assertEquals("Wrong size",1,set.size());
  assertFalse("Should return false",set.retainAll(c));
  enumSizeMap=new EnumMap(Size.class);
  enumSizeMap.put(Size.Middle,1);
  enumSizeMap.put(Size.Big,null);
  set=enumSizeMap.entrySet();
  Object[] array=set.toArray();
  assertEquals("Wrong length",2,array.length);
  Map.Entry entry=(Map.Entry)array[0];
  assertEquals("Wrong key",Size.Middle,entry.getKey());
  assertEquals("Wrong value",1,entry.getValue());
  Object[] array1=new Object[10];
  array1=set.toArray();
  assertEquals("Wrong length",2,array1.length);
  entry=(Map.Entry)array[0];
  assertEquals("Wrong key",Size.Middle,entry.getKey());
  assertEquals("Wrong value",1,entry.getValue());
  array1=new Object[10];
  array1=set.toArray(array1);
  assertEquals("Wrong length",10,array1.length);
  entry=(Map.Entry)array[1];
  assertEquals("Wrong key",Size.Big,entry.getKey());
  assertNull("Should be null",array1[2]);
  set=enumSizeMap.entrySet();
  Integer integer=new Integer("1");
  assertFalse("Returned true when the object can not be removed",set.remove(integer));
  assertTrue("Returned false when the object can be removed",set.remove(entry));
  enumSizeMap=new EnumMap(Size.class);
  enumSizeMap.put(Size.Middle,1);
  enumSizeMap.put(Size.Big,null);
  set=enumSizeMap.entrySet();
  Iterator iter=set.iterator();
  entry=(Map.Entry)iter.next();
  assertTrue("Returned false for contained object",set.contains(entry));
  mockEntry=new MockEntry(Size.Middle,2);
  assertFalse("Returned true for uncontained object",set.contains(mockEntry));
  mockEntry=new MockEntry(new Integer(2),2);
  assertFalse("Returned true for uncontained object",set.contains(mockEntry));
  entry=(Map.Entry)iter.next();
  assertTrue("Returned false for contained object",set.contains(entry));
  enumSizeMap.put(Size.Middle,1);
  enumSizeMap.remove(Size.Big);
  mockEntry=new MockEntry(Size.Big,null);
  assertEquals("Wrong size",1,set.size());
  assertFalse("Returned true for uncontained object",set.contains(mockEntry));
  enumSizeMap.put(Size.Big,2);
  mockEntry=new MockEntry(Size.Big,2);
  assertTrue("Returned false for contained object",set.contains(mockEntry));
  iter.remove();
  try {
    iter.remove();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  try {
    entry.setValue(2);
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  try {
    set.contains(entry);
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  enumSizeMap=new EnumMap(Size.class);
  enumSizeMap.put(Size.Middle,1);
  enumSizeMap.put(Size.Big,null);
  set=enumSizeMap.entrySet();
  iter=set.iterator();
  entry=(Map.Entry)iter.next();
  assertEquals("Wrong key",Size.Middle,entry.getKey());
  assertTrue("Returned false for contained object",set.contains(entry));
  enumSizeMap.put(Size.Middle,3);
  assertTrue("Returned false for contained object",set.contains(entry));
  entry.setValue(2);
  assertTrue("Returned false for contained object",set.contains(entry));
  assertFalse("Returned true for uncontained object",set.remove(new Integer(1)));
  iter.next();
  assertEquals("Wrong key",Size.Middle,entry.getKey());
  set.clear();
  assertEquals("Wrong size",0,set.size());
  enumSizeMap=new EnumMap(Size.class);
  enumSizeMap.put(Size.Middle,1);
  enumSizeMap.put(Size.Big,null);
  set=enumSizeMap.entrySet();
  iter=set.iterator();
  mockEntry=new MockEntry(Size.Middle,1);
  assertFalse("Wrong result",entry.equals(mockEntry));
  try {
    iter.remove();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  entry=(Map.Entry)iter.next();
  assertEquals("Wrong key",Size.Middle,entry.getKey());
  assertTrue("Should return true",entry.equals(mockEntry));
  assertEquals("Should be equal",mockEntry.hashCode(),entry.hashCode());
  mockEntry=new MockEntry(Size.Big,1);
  assertFalse("Wrong result",entry.equals(mockEntry));
  entry=(Map.Entry)iter.next();
  assertFalse("Wrong result",entry.equals(mockEntry));
  assertEquals("Wrong key",Size.Big,entry.getKey());
  iter.remove();
  assertFalse("Wrong result",entry.equals(mockEntry));
  assertEquals("Wrong size",1,set.size());
  try {
    iter.remove();
    fail("Should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  try {
    iter.next();
    fail("Should throw NoSuchElementException");
  }
 catch (  NoSuchElementException e) {
  }
}
