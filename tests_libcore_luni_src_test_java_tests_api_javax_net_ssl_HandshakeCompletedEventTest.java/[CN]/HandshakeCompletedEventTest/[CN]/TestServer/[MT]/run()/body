{
  try {
    KeyManager[] keyManagers=provideKeys ? getKeyManagers(keys) : null;
    TrustManager[] trustManagers=new TrustManager[]{trustManager};
    SSLContext sslContext=SSLContext.getInstance("TLS");
    sslContext.init(keyManagers,trustManagers,null);
    SSLServerSocket serverSocket=(SSLServerSocket)sslContext.getServerSocketFactory().createServerSocket();
    if (clientAuth == CLIENT_AUTH_WANTED) {
      serverSocket.setWantClientAuth(true);
    }
 else     if (clientAuth == CLIENT_AUTH_NEEDED) {
      serverSocket.setNeedClientAuth(true);
    }
 else {
      serverSocket.setWantClientAuth(false);
    }
    serverSocket.bind(new InetSocketAddress(port));
    SSLSocket clientSocket=(SSLSocket)serverSocket.accept();
    InputStream istream=clientSocket.getInputStream();
    for (int i=0; i < 256; i++) {
      int j=istream.read();
      assertEquals(i,j);
    }
    istream.close();
    OutputStream ostream=clientSocket.getOutputStream();
    for (int i=0; i < 256; i++) {
      ostream.write(i);
    }
    ostream.flush();
    ostream.close();
    clientSocket.close();
    serverSocket.close();
  }
 catch (  Exception ex) {
    exception=ex;
  }
}
