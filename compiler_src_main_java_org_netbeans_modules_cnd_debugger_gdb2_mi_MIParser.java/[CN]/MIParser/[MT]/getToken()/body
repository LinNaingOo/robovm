{
  if (ungotToken != null) {
    Token t=ungotToken;
    ungotToken=null;
    return t;
  }
  while (true) {
    char c=str[x++];
switch (c) {
case 0:
      return new Token(TokenType.EOL);
case ' ':
case '\n':
case '\r':
case '\t':
    continue;
case '{':
  return new Token(TokenType.LC);
case '}':
return new Token(TokenType.RC);
case '[':
return new Token(TokenType.LB);
case ']':
return new Token(TokenType.RB);
case ',':
return new Token(TokenType.COMMA);
case '=':
return new Token(TokenType.EQ);
case '^':
return new Token(TokenType.CARET);
case '+':
return new Token(TokenType.PLUS);
case '*':
return new Token(TokenType.STAR);
case '~':
return new Token(TokenType.TILDE);
case '@':
return new Token(TokenType.AT);
case '&':
return new Token(TokenType.AMP);
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
x--;
bx=x;
while (charIs(str[x],CHAR_DIGIT)) {
x++;
}
return new Token(TokenType.NUM,new String(str,bx,x - bx));
case '"':
{
StringBuilder string=new StringBuilder();
boolean escape=false;
while (str[x] != 0) {
if (str[x] == '\\') {
escape=!escape;
}
 else {
if (str[x] == '"' && !escape) {
x++;
return new Token(TokenType.STR,string.toString());
}
escape=false;
}
string.append(str[x++]);
}
}
break;
default :
{
x--;
bx=x;
while (!charIs(str[x],CHAR_TERM)) {
x++;
}
return new Token(TokenType.SYM,new String(str,bx,x - bx));
}
}
}
}
