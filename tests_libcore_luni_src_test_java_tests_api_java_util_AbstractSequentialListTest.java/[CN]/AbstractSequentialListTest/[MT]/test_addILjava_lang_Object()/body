{
  AbstractSequentialList asl=new AbstractSequentialList(){
    @Override public int size(){
      return 0;
    }
    @Override public ListIterator listIterator(    int index){
      return new Mock_unsupportedListIterator();
    }
  }
;
  try {
    asl.add(0,1);
    fail("UnsupportedOperationException expected");
  }
 catch (  UnsupportedOperationException e) {
  }
  asl=new AbstractSequentialList(){
    @Override public int size(){
      return 0;
    }
    @Override public ListIterator listIterator(    int index){
      return new Mock_ListIterator();
    }
  }
;
  try {
    asl.add(0,"String");
    fail("IllegalArgumentException expected");
  }
 catch (  IllegalArgumentException ee) {
  }
  try {
    asl.add(0,null);
    fail("NullPointerException expected");
  }
 catch (  NullPointerException ee) {
  }
  asl.add(0,1);
  asl=new LinkedList();
  try {
    asl.add(-1,1);
    fail("IndexOutOfBoundsException expected");
  }
 catch (  IndexOutOfBoundsException ee) {
  }
  asl.add(0,1);
  try {
    asl.add(2,1);
    fail("IndexOutOfBoundsException expected");
  }
 catch (  IndexOutOfBoundsException ee) {
  }
}
