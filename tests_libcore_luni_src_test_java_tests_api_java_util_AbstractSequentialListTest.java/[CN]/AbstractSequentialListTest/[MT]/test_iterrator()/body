{
  AbstractSequentialList asl=new AbstractSequentialList(){
    @Override public int size(){
      return 0;
    }
    @Override public ListIterator listIterator(    int index){
      return new Mock_unsupportedListIterator();
    }
  }
;
  assertTrue(asl.iterator().getClass().toString().contains("Mock_unsupportedListIterator"));
  asl=new AbstractSequentialList(){
    @Override public int size(){
      return 0;
    }
    @Override public ListIterator listIterator(    int index){
      return new Mock_ListIterator();
    }
  }
;
  assertTrue(asl.iterator().getClass().toString().contains("Mock_ListIterator"));
  asl=new AbstractSequentialList(){
    @Override public int size(){
      return 0;
    }
    @Override public ListIterator listIterator(    int index){
      return null;
    }
  }
;
  assertNull(asl.iterator());
}
