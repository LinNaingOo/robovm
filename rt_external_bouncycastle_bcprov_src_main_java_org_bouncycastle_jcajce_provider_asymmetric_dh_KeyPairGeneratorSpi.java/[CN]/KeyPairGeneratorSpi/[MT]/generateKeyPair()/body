{
  if (!initialised) {
    Integer paramStrength=Integers.valueOf(strength);
    if (params.containsKey(paramStrength)) {
      param=(DHKeyGenerationParameters)params.get(paramStrength);
    }
 else {
      DHParameterSpec dhParams=BouncyCastleProvider.CONFIGURATION.getDHDefaultParameters(strength);
      if (dhParams != null) {
        param=new DHKeyGenerationParameters(random,new DHParameters(dhParams.getP(),dhParams.getG(),null,dhParams.getL()));
      }
 else {
synchronized (lock) {
          if (params.containsKey(paramStrength)) {
            param=(DHKeyGenerationParameters)params.get(paramStrength);
          }
 else {
            DHParametersGenerator pGen=new DHParametersGenerator();
            pGen.init(strength,certainty,random);
            param=new DHKeyGenerationParameters(random,pGen.generateParameters());
            params.put(paramStrength,param);
          }
        }
      }
    }
    engine.init(param);
    initialised=true;
  }
  AsymmetricCipherKeyPair pair=engine.generateKeyPair();
  DHPublicKeyParameters pub=(DHPublicKeyParameters)pair.getPublic();
  DHPrivateKeyParameters priv=(DHPrivateKeyParameters)pair.getPrivate();
  return new KeyPair(new BCDHPublicKey(pub),new BCDHPrivateKey(priv));
}
