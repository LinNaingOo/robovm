{
  test_KeyPair(kpg,kpg.genKeyPair());
  test_KeyPair(kpg,kpg.generateKeyPair());
  String algorithm=kpg.getAlgorithm();
  List<Integer> keySizes=getKeySizes(algorithm);
  for (  int keySize : keySizes) {
    kpg.initialize(keySize);
    test_KeyPair(kpg,kpg.genKeyPair());
    test_KeyPair(kpg,kpg.generateKeyPair());
    kpg.initialize(keySize,(SecureRandom)null);
    test_KeyPair(kpg,kpg.genKeyPair());
    test_KeyPair(kpg,kpg.generateKeyPair());
    kpg.initialize(keySize,new SecureRandom());
    test_KeyPair(kpg,kpg.genKeyPair());
    test_KeyPair(kpg,kpg.generateKeyPair());
  }
  if (("EC".equals(algorithm)) || ("ECDH".equals(algorithm)) || ("ECDSA".equals(algorithm))) {
    for (    String curveName : EC_NAMED_CURVES) {
      kpg.initialize(new ECGenParameterSpec(curveName));
      test_KeyPair(kpg,kpg.genKeyPair());
      test_KeyPair(kpg,kpg.generateKeyPair());
      kpg.initialize(new ECGenParameterSpec(curveName),(SecureRandom)null);
      test_KeyPair(kpg,kpg.genKeyPair());
      test_KeyPair(kpg,kpg.generateKeyPair());
      kpg.initialize(new ECGenParameterSpec(curveName),new SecureRandom());
      test_KeyPair(kpg,kpg.genKeyPair());
      test_KeyPair(kpg,kpg.generateKeyPair());
    }
  }
}
