{
  int argc=args.length;
  BytePtr.BytePtrPtr argv=null;
  if (argc > 0) {
    argv=Struct.allocate(BytePtr.BytePtrPtr.class,argc);
    for (int i=0; i < argc; i++) {
      BytePtr arg=BytePtr.toBytePtrAsciiZ(args[i]);
      argv.next(i).set(arg);
    }
  }
  String principalClassName=null;
  if (principalClass != null) {
    principalClassName=ObjCClass.getByType(principalClass).getName();
  }
  String delegateClassName=null;
  if (delegateClass != null) {
    delegateClassName=ObjCClass.getByType(delegateClass).getName();
  }
  NSObject inCompilerEnv=NSProcessInfo.getSharedProcessInfo().getEnvironment().get("robovmcompilerenv");
  if (inCompilerEnv == null || !inCompilerEnv.toString().equals("true")) {
    System.setErr(new FoundationLogPrintStream());
    System.err.println("SET System.err to FoundationLogPrintStream");
    System.setOut(new FoundationLogPrintStream());
    System.out.println("SET System.out to FoundationLogPrintStream");
  }
  NSNotificationCenter.getDefaultCenter().addObserver(UIWindow.DidBecomeKeyNotification(),null,NSOperationQueue.getMainQueue(),new VoidBlock1<NSNotification>(){
    @Override public void invoke(    NSNotification a){
      KEY_WINDOW=(UIWindow)a.getObject();
    }
  }
);
  NSNotificationCenter.getDefaultCenter().addObserver(UIWindow.DidResignKeyNotification(),null,NSOperationQueue.getMainQueue(),new VoidBlock1<NSNotification>(){
    @Override public void invoke(    NSNotification a){
      if (a.getObject() == KEY_WINDOW)       KEY_WINDOW=null;
    }
  }
);
  main(argc,argv,principalClassName,delegateClassName);
}
