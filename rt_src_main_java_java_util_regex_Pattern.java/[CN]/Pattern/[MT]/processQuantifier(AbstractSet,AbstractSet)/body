{
  int quant=lexemes.peek();
  if (term != null && !(term instanceof LeafSet)) {
switch (quant) {
case Lexer.QUANT_STAR:
case Lexer.QUANT_PLUS:
{
        QuantifierSet q;
        lexemes.next();
        if (term.getType() == AbstractSet.TYPE_DOTSET) {
          if (!hasFlag(Pattern.DOTALL)) {
            q=new DotQuantifierSet(term,last,quant,AbstractLineTerminator.getInstance(flags));
          }
 else {
            q=new DotAllQuantifierSet(term,last,quant);
          }
        }
 else {
          q=new GroupQuantifierSet(term,last,quant);
        }
        term.setNext(q);
        return q;
      }
case Lexer.QUANT_STAR_R:
case Lexer.QUANT_PLUS_R:
{
      lexemes.next();
      GroupQuantifierSet q=new ReluctantGroupQuantifierSet(term,last,quant);
      term.setNext(q);
      return q;
    }
case Lexer.QUANT_PLUS_P:
{
    lexemes.next();
    return new PosPlusGroupQuantifierSet(term,last,Lexer.QUANT_STAR_P);
  }
case Lexer.QUANT_STAR_P:
{
  lexemes.next();
  return new PossessiveGroupQuantifierSet(term,last,quant);
}
case Lexer.QUANT_ALT:
{
lexemes.next();
AltGroupQuantifierSet q=new AltGroupQuantifierSet(term,last,Lexer.QUANT_ALT);
term.setNext(last);
return q;
}
case Lexer.QUANT_ALT_P:
{
lexemes.next();
return new PosAltGroupQuantifierSet(term,last,Lexer.QUANT_ALT);
}
case Lexer.QUANT_ALT_R:
{
lexemes.next();
RelAltGroupQuantifierSet q=new RelAltGroupQuantifierSet(term,last,Lexer.QUANT_ALT);
term.setNext(last);
return q;
}
case Lexer.QUANT_COMP:
{
CompositeGroupQuantifierSet q=new CompositeGroupQuantifierSet((Quantifier)lexemes.nextSpecial(),term,last,Lexer.QUANT_ALT,++compCount);
term.setNext(q);
return q;
}
case Lexer.QUANT_COMP_P:
{
return new PosCompositeGroupQuantifierSet((Quantifier)lexemes.nextSpecial(),term,last,Lexer.QUANT_ALT,++compCount);
}
case Lexer.QUANT_COMP_R:
{
RelCompositeGroupQuantifierSet q=new RelCompositeGroupQuantifierSet((Quantifier)lexemes.nextSpecial(),term,last,Lexer.QUANT_ALT,++compCount);
term.setNext(q);
return q;
}
default :
return term;
}
}
 else {
LeafSet leaf=null;
if (term != null) leaf=(LeafSet)term;
switch (quant) {
case Lexer.QUANT_STAR:
case Lexer.QUANT_PLUS:
{
lexemes.next();
LeafQuantifierSet q=new LeafQuantifierSet(leaf,last,quant);
leaf.setNext(q);
return q;
}
case Lexer.QUANT_STAR_R:
case Lexer.QUANT_PLUS_R:
{
lexemes.next();
ReluctantQuantifierSet q=new ReluctantQuantifierSet(leaf,last,quant);
leaf.setNext(q);
return q;
}
case Lexer.QUANT_PLUS_P:
case Lexer.QUANT_STAR_P:
{
lexemes.next();
PossessiveQuantifierSet q=new PossessiveQuantifierSet(leaf,last,quant);
leaf.setNext(q);
return q;
}
case Lexer.QUANT_ALT:
{
lexemes.next();
return new AltQuantifierSet(leaf,last,Lexer.QUANT_ALT);
}
case Lexer.QUANT_ALT_P:
{
lexemes.next();
return new PossessiveAltQuantifierSet(leaf,last,Lexer.QUANT_ALT_P);
}
case Lexer.QUANT_ALT_R:
{
lexemes.next();
return new ReluctantAltQuantifierSet(leaf,last,Lexer.QUANT_ALT_R);
}
case Lexer.QUANT_COMP:
{
return new CompositeQuantifierSet((Quantifier)lexemes.nextSpecial(),leaf,last,Lexer.QUANT_COMP);
}
case Lexer.QUANT_COMP_P:
{
return new PossessiveCompositeQuantifierSet((Quantifier)lexemes.nextSpecial(),leaf,last,Lexer.QUANT_COMP_P);
}
case Lexer.QUANT_COMP_R:
{
return new ReluctantCompositeQuantifierSet((Quantifier)lexemes.nextSpecial(),leaf,last,Lexer.QUANT_COMP_R);
}
default :
return term;
}
}
}
