{
  CharClass res=new CharClass(alt,hasFlag(Pattern.CASE_INSENSITIVE),hasFlag(Pattern.UNICODE_CASE));
  int buffer=-1;
  boolean intersection=false;
  boolean notClosed=false;
  boolean firstInClass=true;
  while (!lexemes.isEmpty() && (notClosed=(lexemes.peek()) != Lexer.CHAR_RIGHT_SQUARE_BRACKET || firstInClass)) {
switch (lexemes.peek()) {
case Lexer.CHAR_RIGHT_SQUARE_BRACKET:
{
        if (buffer >= 0)         res.add(buffer);
        buffer=']';
        lexemes.next();
        break;
      }
case Lexer.CHAR_LEFT_SQUARE_BRACKET:
{
      if (buffer >= 0) {
        res.add(buffer);
        buffer=-1;
      }
      lexemes.next();
      boolean negative=false;
      if (lexemes.peek() == Lexer.CHAR_CARET) {
        lexemes.next();
        negative=true;
      }
      if (intersection)       res.intersection(processRangeExpression(negative));
 else       res.union(processRangeExpression(negative));
      intersection=false;
      lexemes.next();
      break;
    }
case Lexer.CHAR_AMPERSAND:
{
    if (buffer >= 0)     res.add(buffer);
    buffer=lexemes.next();
    if (lexemes.peek() == Lexer.CHAR_AMPERSAND) {
      if (lexemes.lookAhead() == Lexer.CHAR_LEFT_SQUARE_BRACKET) {
        lexemes.next();
        intersection=true;
        buffer=-1;
      }
 else {
        lexemes.next();
        if (firstInClass) {
          res=processRangeExpression(false);
        }
 else {
          if (!(lexemes.peek() == Lexer.CHAR_RIGHT_SQUARE_BRACKET)) {
            res.intersection(processRangeExpression(false));
          }
        }
      }
    }
 else {
      buffer='&';
    }
    break;
  }
case Lexer.CHAR_HYPHEN:
{
  if (firstInClass || lexemes.lookAhead() == Lexer.CHAR_RIGHT_SQUARE_BRACKET || lexemes.lookAhead() == Lexer.CHAR_LEFT_SQUARE_BRACKET || buffer < 0) {
    if (buffer >= 0)     res.add(buffer);
    buffer='-';
    lexemes.next();
  }
 else {
    lexemes.next();
    int cur=lexemes.peek();
    if (!lexemes.isSpecial() && (cur >= 0 || lexemes.lookAhead() == Lexer.CHAR_RIGHT_SQUARE_BRACKET || lexemes.lookAhead() == Lexer.CHAR_LEFT_SQUARE_BRACKET || buffer < 0)) {
      try {
        if (!Lexer.isLetter(cur)) {
          cur=cur & 0xFFFF;
        }
        res.add(buffer,cur);
      }
 catch (      Exception e) {
        throw new PatternSyntaxException(Messages.getString("regex.0E"),pattern(),lexemes.getIndex());
      }
      lexemes.next();
      buffer=-1;
    }
 else {
      throw new PatternSyntaxException(Messages.getString("regex.0E"),pattern(),lexemes.getIndex());
    }
  }
  break;
}
case Lexer.CHAR_CARET:
{
if (buffer >= 0) res.add(buffer);
buffer='^';
lexemes.next();
break;
}
case 0:
{
if (buffer >= 0) res.add(buffer);
AbstractCharClass cs=(AbstractCharClass)lexemes.peekSpecial();
if (cs != null) {
res.add(cs);
buffer=-1;
}
 else {
buffer=0;
}
lexemes.next();
break;
}
default :
{
if (buffer >= 0) res.add(buffer);
buffer=lexemes.next();
break;
}
}
firstInClass=false;
}
if (notClosed) {
throw new PatternSyntaxException(Messages.getString("regex.0F"),pattern(),lexemes.getIndex() - 1);
}
if (buffer >= 0) res.add(buffer);
return res;
}
