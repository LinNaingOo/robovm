{
  assertEquals(int.class.isAssignableFrom(int.class),SClass.intClass.isAssignableFrom(SClass.intClass));
  assertEquals(int.class.isAssignableFrom(long.class),SClass.intClass.isAssignableFrom(SClass.longClass));
  assertEquals(int[].class.isAssignableFrom(int[].class),SClass.lookup("[I").isAssignableFrom(SClass.lookup("[I")));
  assertEquals(Serializable.class.isAssignableFrom(int[].class),SClass.SerializableClass.isAssignableFrom(SClass.lookup("[I")));
  assertEquals(Cloneable.class.isAssignableFrom(int[].class),SClass.CloneableClass.isAssignableFrom(SClass.lookup("[I")));
  assertEquals(Object.class.isAssignableFrom(String.class),SClass.ObjectClass.isAssignableFrom(SClass.lookup("Ljava/lang/String;")));
  assertEquals(Object[].class.isAssignableFrom(String[].class),SClass.lookup("[Ljava/lang/Object;").isAssignableFrom(SClass.lookup("[Ljava/lang/String;")));
  assertEquals(Object[].class.isAssignableFrom(String[][].class),SClass.lookup("[Ljava/lang/Object;").isAssignableFrom(SClass.lookup("[[Ljava/lang/String;")));
  assertEquals(Serializable[].class.isAssignableFrom(String[].class),SClass.lookup("[Ljava/io/Serializable;").isAssignableFrom(SClass.lookup("[Ljava/lang/String;")));
  assertEquals(CharSequence.class.isAssignableFrom(String.class),SClass.lookup("Ljava/lang/CharSequence;").isAssignableFrom(SClass.lookup("Ljava/lang/String;")));
  assertEquals(Serializable.class.isAssignableFrom(Integer.class),SClass.SerializableClass.isAssignableFrom(SClass.IntegerClass));
}
