{
  ListIterator<Integer> li=list.listIterator(1);
  assertTrue("listIterator(1)",li.next() == list.get(1));
  int orgSize=list.size();
  li=list.listIterator();
  for (int i=0; i <= orgSize; i++) {
    if (i == 0) {
      assertTrue("list iterator hasPrevious(): " + i,!li.hasPrevious());
    }
 else {
      assertTrue("list iterator hasPrevious(): " + i,li.hasPrevious());
    }
    if (i == list.size()) {
      assertTrue("list iterator hasNext(): " + i,!li.hasNext());
    }
 else {
      assertTrue("list iterator hasNext(): " + i,li.hasNext());
    }
    assertTrue("list iterator nextIndex(): " + i,li.nextIndex() == i);
    assertTrue("list iterator previousIndex(): " + i,li.previousIndex() == i - 1);
    boolean exception=false;
    try {
      assertTrue("list iterator next(): " + i,li.next() == list.get(i));
    }
 catch (    NoSuchElementException e) {
      exception=true;
    }
    if (i == list.size()) {
      assertTrue("list iterator next() exception: " + i,exception);
    }
 else {
      assertTrue("list iterator next() exception: " + i,!exception);
    }
  }
  for (int i=orgSize - 1; i >= 0; i--) {
    assertTrue("list iterator previous(): " + i,li.previous() == list.get(i));
    assertTrue("list iterator nextIndex()2: " + i,li.nextIndex() == i);
    assertTrue("list iterator previousIndex()2: " + i,li.previousIndex() == i - 1);
    if (i == 0) {
      assertTrue("list iterator hasPrevious()2: " + i,!li.hasPrevious());
    }
 else {
      assertTrue("list iterator hasPrevious()2: " + i,li.hasPrevious());
    }
    assertTrue("list iterator hasNext()2: " + i,li.hasNext());
  }
  boolean exception=false;
  try {
    li.previous();
  }
 catch (  NoSuchElementException e) {
    exception=true;
  }
  assertTrue("list iterator previous() exception",exception);
  Integer add1=new Integer(600);
  Integer add2=new Integer(601);
  li.add(add1);
  assertTrue("list iterator add(), size()",list.size() == (orgSize + 1));
  assertEquals("list iterator add(), nextIndex()",1,li.nextIndex());
  assertEquals("list iterator add(), previousIndex()",0,li.previousIndex());
  Object next=li.next();
  assertTrue("list iterator add(), next(): " + next,next == list.get(1));
  li.add(add2);
  Object previous=li.previous();
  assertTrue("list iterator add(), previous(): " + previous,previous == add2);
  assertEquals("list iterator add(), nextIndex()2",2,li.nextIndex());
  assertEquals("list iterator add(), previousIndex()2",1,li.previousIndex());
  li.remove();
  assertTrue("list iterator remove(), size()",list.size() == (orgSize + 1));
  assertEquals("list iterator remove(), nextIndex()",2,li.nextIndex());
  assertEquals("list iterator remove(), previousIndex()",1,li.previousIndex());
  assertTrue("list iterator previous()2",li.previous() == list.get(1));
  assertTrue("list iterator previous()3",li.previous() == list.get(0));
  assertTrue("list iterator next()2",li.next() == list.get(0));
  li.remove();
  assertTrue("list iterator hasPrevious()3",!li.hasPrevious());
  assertTrue("list iterator hasNext()3",li.hasNext());
  assertTrue("list iterator size()",list.size() == orgSize);
  assertEquals("list iterator nextIndex()3",0,li.nextIndex());
  assertEquals("list iterator previousIndex()3",-1,li.previousIndex());
}
