{
  byte b=bc[index];
  boolean isWide=false;
  Instruction i;
  int x;
  x=(b) & 0xff;
switch (x) {
case BIPUSH:
    i=new Instruction_Bipush();
  break;
case SIPUSH:
i=new Instruction_Sipush();
break;
case LDC1:
i=new Instruction_Ldc1();
break;
case LDC2:
i=new Instruction_Ldc2();
break;
case LDC2W:
i=new Instruction_Ldc2w();
break;
case ACONST_NULL:
i=new Instruction_Aconst_null();
break;
case ICONST_M1:
i=new Instruction_Iconst_m1();
break;
case ICONST_0:
i=new Instruction_Iconst_0();
break;
case ICONST_1:
i=new Instruction_Iconst_1();
break;
case ICONST_2:
i=new Instruction_Iconst_2();
break;
case ICONST_3:
i=new Instruction_Iconst_3();
break;
case ICONST_4:
i=new Instruction_Iconst_4();
break;
case ICONST_5:
i=new Instruction_Iconst_5();
break;
case LCONST_0:
i=new Instruction_Lconst_0();
break;
case LCONST_1:
i=new Instruction_Lconst_1();
break;
case FCONST_0:
i=new Instruction_Fconst_0();
break;
case FCONST_1:
i=new Instruction_Fconst_1();
break;
case FCONST_2:
i=new Instruction_Fconst_2();
break;
case DCONST_0:
i=new Instruction_Dconst_0();
break;
case DCONST_1:
i=new Instruction_Dconst_1();
break;
case ILOAD:
i=new Instruction_Iload();
break;
case ILOAD_0:
i=new Instruction_Iload_0();
break;
case ILOAD_1:
i=new Instruction_Iload_1();
break;
case ILOAD_2:
i=new Instruction_Iload_2();
break;
case ILOAD_3:
i=new Instruction_Iload_3();
break;
case LLOAD:
i=new Instruction_Lload();
break;
case LLOAD_0:
i=new Instruction_Lload_0();
break;
case LLOAD_1:
i=new Instruction_Lload_1();
break;
case LLOAD_2:
i=new Instruction_Lload_2();
break;
case LLOAD_3:
i=new Instruction_Lload_3();
break;
case FLOAD:
i=new Instruction_Fload();
break;
case FLOAD_0:
i=new Instruction_Fload_0();
break;
case FLOAD_1:
i=new Instruction_Fload_1();
break;
case FLOAD_2:
i=new Instruction_Fload_2();
break;
case FLOAD_3:
i=new Instruction_Fload_3();
break;
case DLOAD:
i=new Instruction_Dload();
break;
case DLOAD_0:
i=new Instruction_Dload_0();
break;
case DLOAD_1:
i=new Instruction_Dload_1();
break;
case DLOAD_2:
i=new Instruction_Dload_2();
break;
case DLOAD_3:
i=new Instruction_Dload_3();
break;
case ALOAD:
i=new Instruction_Aload();
break;
case ALOAD_0:
i=new Instruction_Aload_0();
break;
case ALOAD_1:
i=new Instruction_Aload_1();
break;
case ALOAD_2:
i=new Instruction_Aload_2();
break;
case ALOAD_3:
i=new Instruction_Aload_3();
break;
case ISTORE:
i=new Instruction_Istore();
break;
case ISTORE_0:
i=new Instruction_Istore_0();
break;
case ISTORE_1:
i=new Instruction_Istore_1();
break;
case ISTORE_2:
i=new Instruction_Istore_2();
break;
case ISTORE_3:
i=new Instruction_Istore_3();
break;
case LSTORE:
i=new Instruction_Lstore();
break;
case LSTORE_0:
i=new Instruction_Lstore_0();
break;
case LSTORE_1:
i=new Instruction_Lstore_1();
break;
case LSTORE_2:
i=new Instruction_Lstore_2();
break;
case LSTORE_3:
i=new Instruction_Lstore_3();
break;
case FSTORE:
i=new Instruction_Fstore();
break;
case FSTORE_0:
i=new Instruction_Fstore_0();
break;
case FSTORE_1:
i=new Instruction_Fstore_1();
break;
case FSTORE_2:
i=new Instruction_Fstore_2();
break;
case FSTORE_3:
i=new Instruction_Fstore_3();
break;
case DSTORE:
i=new Instruction_Dstore();
break;
case DSTORE_0:
i=new Instruction_Dstore_0();
break;
case DSTORE_1:
i=new Instruction_Dstore_1();
break;
case DSTORE_2:
i=new Instruction_Dstore_2();
break;
case DSTORE_3:
i=new Instruction_Dstore_3();
break;
case ASTORE:
i=new Instruction_Astore();
break;
case ASTORE_0:
i=new Instruction_Astore_0();
break;
case ASTORE_1:
i=new Instruction_Astore_1();
break;
case ASTORE_2:
i=new Instruction_Astore_2();
break;
case ASTORE_3:
i=new Instruction_Astore_3();
break;
case IINC:
i=new Instruction_Iinc();
break;
case WIDE:
{
int nextIndex=(bc[index + 1]) & 0xff;
switch (nextIndex) {
case ILOAD:
i=new Instruction_Iload();
break;
case FLOAD:
i=new Instruction_Fload();
break;
case ALOAD:
i=new Instruction_Aload();
break;
case LLOAD:
i=new Instruction_Lload();
break;
case DLOAD:
i=new Instruction_Dload();
break;
case ISTORE:
i=new Instruction_Istore();
break;
case FSTORE:
i=new Instruction_Fstore();
break;
case ASTORE:
i=new Instruction_Astore();
break;
case LSTORE:
i=new Instruction_Lstore();
break;
case DSTORE:
i=new Instruction_Dstore();
break;
case RET:
i=new Instruction_Ret();
break;
case IINC:
i=new Instruction_Iinc();
break;
default :
throw new RuntimeException("invalid wide instruction: " + nextIndex);
}
((Instruction_bytevar)i).isWide=true;
isWide=true;
}
break;
case NEWARRAY:
i=new Instruction_Newarray();
break;
case ANEWARRAY:
i=new Instruction_Anewarray();
break;
case MULTIANEWARRAY:
i=new Instruction_Multianewarray();
break;
case ARRAYLENGTH:
i=new Instruction_Arraylength();
break;
case IALOAD:
i=new Instruction_Iaload();
break;
case LALOAD:
i=new Instruction_Laload();
break;
case FALOAD:
i=new Instruction_Faload();
break;
case DALOAD:
i=new Instruction_Daload();
break;
case AALOAD:
i=new Instruction_Aaload();
break;
case BALOAD:
i=new Instruction_Baload();
break;
case CALOAD:
i=new Instruction_Caload();
break;
case SALOAD:
i=new Instruction_Saload();
break;
case IASTORE:
i=new Instruction_Iastore();
break;
case LASTORE:
i=new Instruction_Lastore();
break;
case FASTORE:
i=new Instruction_Fastore();
break;
case DASTORE:
i=new Instruction_Dastore();
break;
case AASTORE:
i=new Instruction_Aastore();
break;
case BASTORE:
i=new Instruction_Bastore();
break;
case CASTORE:
i=new Instruction_Castore();
break;
case SASTORE:
i=new Instruction_Sastore();
break;
case NOP:
i=new Instruction_Nop();
break;
case POP:
i=new Instruction_Pop();
break;
case POP2:
i=new Instruction_Pop2();
break;
case DUP:
i=new Instruction_Dup();
break;
case DUP2:
i=new Instruction_Dup2();
break;
case DUP_X1:
i=new Instruction_Dup_x1();
break;
case DUP_X2:
i=new Instruction_Dup_x2();
break;
case DUP2_X1:
i=new Instruction_Dup2_x1();
break;
case DUP2_X2:
i=new Instruction_Dup2_x2();
break;
case SWAP:
i=new Instruction_Swap();
break;
case IADD:
i=new Instruction_Iadd();
break;
case LADD:
i=new Instruction_Ladd();
break;
case FADD:
i=new Instruction_Fadd();
break;
case DADD:
i=new Instruction_Dadd();
break;
case ISUB:
i=new Instruction_Isub();
break;
case LSUB:
i=new Instruction_Lsub();
break;
case FSUB:
i=new Instruction_Fsub();
break;
case DSUB:
i=new Instruction_Dsub();
break;
case IMUL:
i=new Instruction_Imul();
break;
case LMUL:
i=new Instruction_Lmul();
break;
case FMUL:
i=new Instruction_Fmul();
break;
case DMUL:
i=new Instruction_Dmul();
break;
case IDIV:
i=new Instruction_Idiv();
break;
case LDIV:
i=new Instruction_Ldiv();
break;
case FDIV:
i=new Instruction_Fdiv();
break;
case DDIV:
i=new Instruction_Ddiv();
break;
case IREM:
i=new Instruction_Irem();
break;
case LREM:
i=new Instruction_Lrem();
break;
case FREM:
i=new Instruction_Frem();
break;
case DREM:
i=new Instruction_Drem();
break;
case INEG:
i=new Instruction_Ineg();
break;
case LNEG:
i=new Instruction_Lneg();
break;
case FNEG:
i=new Instruction_Fneg();
break;
case DNEG:
i=new Instruction_Dneg();
break;
case ISHL:
i=new Instruction_Ishl();
break;
case ISHR:
i=new Instruction_Ishr();
break;
case IUSHR:
i=new Instruction_Iushr();
break;
case LSHL:
i=new Instruction_Lshl();
break;
case LSHR:
i=new Instruction_Lshr();
break;
case LUSHR:
i=new Instruction_Lushr();
break;
case IAND:
i=new Instruction_Iand();
break;
case LAND:
i=new Instruction_Land();
break;
case IOR:
i=new Instruction_Ior();
break;
case LOR:
i=new Instruction_Lor();
break;
case IXOR:
i=new Instruction_Ixor();
break;
case LXOR:
i=new Instruction_Lxor();
break;
case I2L:
i=new Instruction_I2l();
break;
case I2F:
i=new Instruction_I2f();
break;
case I2D:
i=new Instruction_I2d();
break;
case L2I:
i=new Instruction_L2i();
break;
case L2F:
i=new Instruction_L2f();
break;
case L2D:
i=new Instruction_L2d();
break;
case F2I:
i=new Instruction_F2i();
break;
case F2L:
i=new Instruction_F2l();
break;
case F2D:
i=new Instruction_F2d();
break;
case D2I:
i=new Instruction_D2i();
break;
case D2L:
i=new Instruction_D2l();
break;
case D2F:
i=new Instruction_D2f();
break;
case INT2BYTE:
i=new Instruction_Int2byte();
break;
case INT2CHAR:
i=new Instruction_Int2char();
break;
case INT2SHORT:
i=new Instruction_Int2short();
break;
case IFEQ:
i=new Instruction_Ifeq();
break;
case IFNULL:
i=new Instruction_Ifnull();
break;
case IFLT:
i=new Instruction_Iflt();
break;
case IFLE:
i=new Instruction_Ifle();
break;
case IFNE:
i=new Instruction_Ifne();
break;
case IFNONNULL:
i=new Instruction_Ifnonnull();
break;
case IFGT:
i=new Instruction_Ifgt();
break;
case IFGE:
i=new Instruction_Ifge();
break;
case IF_ICMPEQ:
i=new Instruction_If_icmpeq();
break;
case IF_ICMPLT:
i=new Instruction_If_icmplt();
break;
case IF_ICMPLE:
i=new Instruction_If_icmple();
break;
case IF_ICMPNE:
i=new Instruction_If_icmpne();
break;
case IF_ICMPGT:
i=new Instruction_If_icmpgt();
break;
case IF_ICMPGE:
i=new Instruction_If_icmpge();
break;
case LCMP:
i=new Instruction_Lcmp();
break;
case FCMPL:
i=new Instruction_Fcmpl();
break;
case FCMPG:
i=new Instruction_Fcmpg();
break;
case DCMPL:
i=new Instruction_Dcmpl();
break;
case DCMPG:
i=new Instruction_Dcmpg();
break;
case IF_ACMPEQ:
i=new Instruction_If_acmpeq();
break;
case IF_ACMPNE:
i=new Instruction_If_acmpne();
break;
case GOTO:
i=new Instruction_Goto();
break;
case GOTO_W:
i=new Instruction_Goto_w();
break;
case JSR:
i=new Instruction_Jsr();
break;
case JSR_W:
i=new Instruction_Jsr_w();
break;
case RET:
i=new Instruction_Ret();
break;
case RET_W:
i=new Instruction_Ret_w();
break;
case RETURN:
i=new Instruction_Return();
break;
case IRETURN:
i=new Instruction_Ireturn();
break;
case LRETURN:
i=new Instruction_Lreturn();
break;
case FRETURN:
i=new Instruction_Freturn();
break;
case DRETURN:
i=new Instruction_Dreturn();
break;
case ARETURN:
i=new Instruction_Areturn();
break;
case BREAKPOINT:
i=new Instruction_Breakpoint();
break;
case TABLESWITCH:
i=(Instruction)new Instruction_Tableswitch();
break;
case LOOKUPSWITCH:
i=(Instruction)new Instruction_Lookupswitch();
break;
case PUTFIELD:
i=(Instruction)new Instruction_Putfield();
break;
case GETFIELD:
i=(Instruction)new Instruction_Getfield();
break;
case PUTSTATIC:
i=(Instruction)new Instruction_Putstatic();
break;
case GETSTATIC:
i=(Instruction)new Instruction_Getstatic();
break;
case INVOKEVIRTUAL:
i=(Instruction)new Instruction_Invokevirtual();
break;
case INVOKENONVIRTUAL:
i=(Instruction)new Instruction_Invokenonvirtual();
break;
case INVOKESTATIC:
i=(Instruction)new Instruction_Invokestatic();
break;
case INVOKEINTERFACE:
i=(Instruction)new Instruction_Invokeinterface();
break;
case ATHROW:
i=(Instruction)new Instruction_Athrow();
break;
case NEW:
i=(Instruction)new Instruction_New();
break;
case CHECKCAST:
i=(Instruction)new Instruction_Checkcast();
break;
case INSTANCEOF:
i=(Instruction)new Instruction_Instanceof();
break;
case MONITORENTER:
i=(Instruction)new Instruction_Monitorenter();
break;
case MONITOREXIT:
i=(Instruction)new Instruction_Monitorexit();
break;
default :
i=(Instruction)new Instruction_Unknown(b);
break;
}
i.label=index;
if (isWide) i.parse(bc,index + 2);
 else i.parse(bc,index + 1);
return i;
}
