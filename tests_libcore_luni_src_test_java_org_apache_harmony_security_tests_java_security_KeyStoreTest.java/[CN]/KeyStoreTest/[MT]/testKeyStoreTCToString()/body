{
class TestX509Certificate extends X509Certificate {
    private static final long serialVersionUID=1L;
    public void checkValidity() throws CertificateExpiredException, CertificateNotYetValidException {
    }
    public void checkValidity(    Date p) throws CertificateExpiredException, CertificateNotYetValidException {
    }
    public int getVersion(){
      return 0;
    }
    public BigInteger getSerialNumber(){
      return null;
    }
    public Principal getIssuerDN(){
      return null;
    }
    public Principal getSubjectDN(){
      return null;
    }
    public Date getNotBefore(){
      return null;
    }
    public Date getNotAfter(){
      return null;
    }
    public byte[] getTBSCertificate() throws CertificateEncodingException {
      return null;
    }
    public byte[] getSignature(){
      return null;
    }
    public String getSigAlgName(){
      return null;
    }
    public String getSigAlgOID(){
      return null;
    }
    public byte[] getSigAlgParams(){
      return null;
    }
    public boolean[] getIssuerUniqueID(){
      return null;
    }
    public boolean[] getSubjectUniqueID(){
      return null;
    }
    public boolean[] getKeyUsage(){
      return null;
    }
    public int getBasicConstraints(){
      return 0;
    }
    public byte[] getEncoded() throws CertificateEncodingException {
      return null;
    }
    public void verify(    PublicKey p) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {
    }
    public void verify(    PublicKey p0,    String p1) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {
    }
    public String toString(){
      return null;
    }
    public PublicKey getPublicKey(){
      return null;
    }
    public boolean hasUnsupportedCriticalExtension(){
      return false;
    }
    public Set getCriticalExtensionOIDs(){
      return null;
    }
    public Set getNonCriticalExtensionOIDs(){
      return null;
    }
    public byte[] getExtensionValue(    String p){
      return null;
    }
  }
  assertNotNull(new KeyStore.TrustedCertificateEntry(new TestX509Certificate()).toString());
}
