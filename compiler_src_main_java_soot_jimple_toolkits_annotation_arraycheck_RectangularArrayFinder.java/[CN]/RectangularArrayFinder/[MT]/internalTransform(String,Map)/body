{
  Scene sc=Scene.v();
  cg=sc.getCallGraph();
  Date start=new Date();
  if (Options.v().verbose())   G.v().out.println("[ra] Finding rectangular arrays, start on " + start);
  Chain appClasses=sc.getApplicationClasses();
  Iterator classIt=appClasses.iterator();
  while (classIt.hasNext()) {
    SootClass c=(SootClass)classIt.next();
    Iterator methodIt=c.methodIterator();
    while (methodIt.hasNext()) {
      SootMethod method=(SootMethod)methodIt.next();
      if (!method.isConcrete())       continue;
      if (!sc.getReachableMethods().contains(method))       continue;
      recoverRectArray(method);
      addInfoFromMethod(method);
    }
  }
  if (agraph.containsNode(BoolValue.v(false))) {
    List changedNodeList=new ArrayList();
    List startNodes=agraph.getSuccsOf(BoolValue.v(false));
    falseSet.addAll(startNodes);
    changedNodeList.addAll(startNodes);
    while (!changedNodeList.isEmpty()) {
      Object node=changedNodeList.remove(0);
      List succs=agraph.getSuccsOf(node);
      Iterator succsIt=succs.iterator();
      while (succsIt.hasNext()) {
        Object succ=succsIt.next();
        if (!falseSet.contains(succ)) {
          falseSet.add(succ);
          changedNodeList.add(succ);
        }
      }
    }
  }
  if (agraph.containsNode(BoolValue.v(true))) {
    List<Object> changedNodeList=new ArrayList<Object>();
    List startNodes=agraph.getSuccsOf(BoolValue.v(true));
    Iterator nodesIt=startNodes.iterator();
    while (nodesIt.hasNext()) {
      Object node=nodesIt.next();
      if (falseSet.contains(node))       continue;
      changedNodeList.add(node);
      trueSet.add(node);
    }
    while (!changedNodeList.isEmpty()) {
      Object node=changedNodeList.remove(0);
      List succs=agraph.getSuccsOf(node);
      Iterator succsIt=succs.iterator();
      while (succsIt.hasNext()) {
        Object succ=succsIt.next();
        if (falseSet.contains(succ))         continue;
        if (trueSet.contains(succ))         continue;
        trueSet.add(succ);
        changedNodeList.add(succ);
      }
    }
  }
  if (Options.v().debug()) {
    G.v().out.println("Rectangular Array :");
{
      Iterator<Object> nodeIt=trueSet.iterator();
      while (nodeIt.hasNext()) {
        Object node=nodeIt.next();
        G.v().out.println(node);
      }
    }
    G.v().out.println("\nNon-rectangular Array :");
{
      Iterator nodeIt=falseSet.iterator();
      while (nodeIt.hasNext()) {
        Object node=nodeIt.next();
        G.v().out.println(node);
      }
    }
  }
  Date finish=new Date();
  if (Options.v().verbose()) {
    long runtime=finish.getTime() - start.getTime();
    long mins=runtime / 60000;
    long secs=(runtime % 60000) / 1000;
    G.v().out.println("[ra] Rectangular array finder finishes." + " It took " + mins + " mins and "+ secs+ " secs.");
  }
}
