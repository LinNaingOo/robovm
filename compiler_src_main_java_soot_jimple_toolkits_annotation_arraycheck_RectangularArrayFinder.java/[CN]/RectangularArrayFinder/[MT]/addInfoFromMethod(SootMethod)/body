{
  if (Options.v().verbose())   G.v().out.println("[ra] Operating " + method.getSignature());
  boolean needTransfer=true;
  Body body=method.getActiveBody();
  Set<Object> tmpNode=new HashSet<Object>();
  boolean trackReturn=false;
  Type rtnType=method.getReturnType();
  if (rtnType instanceof ArrayType) {
    if (((ArrayType)rtnType).numDimensions > 1) {
      trackReturn=true;
      needTransfer=true;
    }
  }
  Set<Local> arrayLocal=new HashSet<Local>();
  Chain locals=body.getLocals();
  Iterator localIt=locals.iterator();
  while (localIt.hasNext()) {
    Local local=(Local)localIt.next();
    Type type=local.getType();
    if (type instanceof ArrayType) {
      if (((ArrayType)type).numDimensions > 1) {
        arrayLocal.add(local);
      }
 else       tmpNode.add(new MethodLocal(method,local));
    }
  }
  ExtendedHashMutableDirectedGraph ehmdg=new ExtendedHashMutableDirectedGraph();
  Iterator unitIt=body.getUnits().snapshotIterator();
  while (unitIt.hasNext()) {
    Stmt s=(Stmt)unitIt.next();
    if (s.containsInvokeExpr()) {
      InvokeExpr iexpr=s.getInvokeExpr();
      int argnum=iexpr.getArgCount();
      for (int i=0; i < argnum; i++) {
        Value arg=iexpr.getArg(i);
        if (!arrayLocal.contains(arg))         continue;
        needTransfer=true;
        MethodLocal ml=new MethodLocal(method,(Local)arg);
        Iterator targetIt=new Targets(cg.edgesOutOf(s));
        while (targetIt.hasNext()) {
          SootMethod target=(SootMethod)targetIt.next();
          MethodParameter mp=new MethodParameter(target,i);
          ehmdg.addMutualEdge(ml,mp);
        }
      }
    }
    if (trackReturn && (s instanceof ReturnStmt)) {
      Value op=((ReturnStmt)s).getOp();
      if (op instanceof Local) {
        ehmdg.addMutualEdge(new MethodLocal(method,(Local)op),new MethodReturn(method));
      }
    }
    if (s instanceof DefinitionStmt) {
      Value leftOp=((DefinitionStmt)s).getLeftOp();
      Value rightOp=((DefinitionStmt)s).getRightOp();
      if (!(leftOp.getType() instanceof ArrayType) && !(rightOp.getType() instanceof ArrayType))       continue;
      Object from=null;
      Object to=null;
      if ((leftOp instanceof Local) && (rightOp instanceof Local)) {
        if (arrayLocal.contains(leftOp) && arrayLocal.contains(rightOp)) {
          int leftDims=((ArrayType)((Local)leftOp).getType()).numDimensions;
          int rightDims=((ArrayType)((Local)rightOp).getType()).numDimensions;
          to=new MethodLocal(method,(Local)leftOp);
          from=new MethodLocal(method,(Local)rightOp);
          ehmdg.addMutualEdge(from,to);
          if (leftDims != rightDims)           ehmdg.addEdge(BoolValue.v(false),from);
        }
 else         if (!arrayLocal.contains(leftOp)) {
          ehmdg.addEdge(BoolValue.v(false),new MethodLocal(method,(Local)rightOp));
        }
      }
 else       if ((leftOp instanceof Local) && (rightOp instanceof ParameterRef)) {
        if (arrayLocal.contains(leftOp)) {
          to=new MethodLocal(method,(Local)leftOp);
          int index=((ParameterRef)rightOp).getIndex();
          from=new MethodParameter(method,index);
          ehmdg.addMutualEdge(from,to);
          needTransfer=true;
        }
      }
 else       if ((leftOp instanceof Local) && (rightOp instanceof ArrayRef)) {
        Local base=(Local)((ArrayRef)rightOp).getBase();
        if (arrayLocal.contains(base)) {
          to=new ArrayReferenceNode(method,base);
          from=new MethodLocal(method,base);
          ehmdg.addMutualEdge(from,to);
          tmpNode.add(to);
          from=to;
          to=new MethodLocal(method,(Local)leftOp);
          ehmdg.addMutualEdge(from,to);
        }
      }
 else       if ((leftOp instanceof ArrayRef) && (rightOp instanceof Local)) {
        Local base=(Local)((ArrayRef)leftOp).getBase();
        if (arrayLocal.contains(base)) {
          Object suspect=new MethodLocal(method,(Local)rightOp);
          Object arrRef=new ArrayReferenceNode(method,base);
          boolean doNothing=false;
          blocklabel: {
            if (!ehmdg.containsNode(suspect))             break blocklabel;
            List succs=ehmdg.getSuccsOf(suspect);
            List preds=ehmdg.getSuccsOf(suspect);
            Set neighbor=new HashSet();
            neighbor.addAll(succs);
            neighbor.addAll(preds);
            if (neighbor.size() != 1)             break blocklabel;
            Object neighborOne=(neighbor.toArray())[0];
            if (arrRef.equals(neighborOne))             doNothing=true;
          }
          if (!doNothing)           ehmdg.addEdge(BoolValue.v(false),new MethodLocal(method,base));
        }
      }
 else       if ((leftOp instanceof Local) && (rightOp instanceof InvokeExpr)) {
        if (arrayLocal.contains(leftOp)) {
          to=new MethodLocal(method,(Local)leftOp);
          Iterator targetIt=new Targets(cg.edgesOutOf(s));
          while (targetIt.hasNext()) {
            SootMethod target=(SootMethod)targetIt.next();
            ehmdg.addMutualEdge(new MethodReturn(target),to);
          }
        }
      }
 else       if ((leftOp instanceof FieldRef) && (rightOp instanceof Local)) {
        if (arrayLocal.contains(rightOp)) {
          Type ftype=((FieldRef)leftOp).getType();
          Type ltype=((Local)rightOp).getType();
          to=((FieldRef)leftOp).getField();
          from=new MethodLocal(method,(Local)rightOp);
          ehmdg.addMutualEdge(from,to);
          if (!ftype.equals(ltype)) {
            ehmdg.addEdge(BoolValue.v(false),to);
          }
          needTransfer=true;
        }
      }
 else       if ((leftOp instanceof Local) && (rightOp instanceof FieldRef)) {
        if (arrayLocal.contains(leftOp)) {
          Type ftype=((FieldRef)rightOp).getType();
          Type ltype=((Local)leftOp).getType();
          to=new MethodLocal(method,(Local)leftOp);
          from=((FieldRef)rightOp).getField();
          ehmdg.addMutualEdge(from,to);
          if (!ftype.equals(ltype)) {
            ehmdg.addEdge(BoolValue.v(false),to);
          }
          needTransfer=true;
        }
      }
 else       if ((leftOp instanceof Local) && ((rightOp instanceof NewArrayExpr) || (rightOp instanceof NewMultiArrayExpr))) {
        if (arrayLocal.contains(leftOp)) {
          ehmdg.addEdge(BoolValue.v(true),new MethodLocal(method,(Local)leftOp));
        }
      }
 else       if ((leftOp instanceof Local) && (rightOp instanceof CastExpr)) {
        Local rOp=(Local)((CastExpr)rightOp).getOp();
        to=new MethodLocal(method,(Local)leftOp);
        from=new MethodLocal(method,rOp);
        if (arrayLocal.contains(leftOp) && arrayLocal.contains(rOp)) {
          ArrayType lat=(ArrayType)leftOp.getType();
          ArrayType rat=(ArrayType)rOp.getType();
          if (lat.numDimensions == rat.numDimensions) {
            ehmdg.addMutualEdge(from,to);
          }
 else {
            ehmdg.addEdge(BoolValue.v(false),from);
            ehmdg.addEdge(BoolValue.v(false),to);
          }
        }
 else         if (arrayLocal.contains(leftOp)) {
          ehmdg.addEdge(BoolValue.v(false),to);
        }
 else         if (arrayLocal.contains(rOp)) {
          ehmdg.addEdge(BoolValue.v(false),from);
        }
      }
    }
  }
  if (needTransfer) {
    Iterator<Object> tmpNodeIt=tmpNode.iterator();
    while (tmpNodeIt.hasNext()) {
      ehmdg.skipNode(tmpNodeIt.next());
    }
    agraph.mergeWith(ehmdg);
  }
}
