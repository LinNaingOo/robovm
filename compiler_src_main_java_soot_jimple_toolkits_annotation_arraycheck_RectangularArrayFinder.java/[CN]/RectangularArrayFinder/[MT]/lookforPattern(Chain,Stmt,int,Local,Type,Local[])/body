{
  int seconddim=-1;
  int curdim=0;
  Object curtmp=local;
  Stmt curstmt=startpoint;
  int fault=99;
  int state=1;
  while (true) {
    curstmt=(Stmt)units.getSuccOf(curstmt);
    if (curstmt == null)     return -1;
    if (!(curstmt instanceof AssignStmt))     return -1;
    Value leftOp=((AssignStmt)curstmt).getLeftOp();
    Value rightOp=((AssignStmt)curstmt).getRightOp();
switch (state) {
case 0:
      break;
case 1:
{
      state=fault;
      if (!(rightOp instanceof NewArrayExpr))       break;
      NewArrayExpr naexpr=(NewArrayExpr)rightOp;
      Type type=naexpr.getBaseType();
      Value size=naexpr.getSize();
      if (!type.equals(basetype))       break;
      if (!(size instanceof IntConstant))       break;
      if (curdim == 0)       seconddim=((IntConstant)size).value;
 else {
        if (((IntConstant)size).value != seconddim)         break;
      }
      curtmp=leftOp;
      state=2;
    }
  break;
case 2:
{
  state=fault;
  if (!(leftOp instanceof ArrayRef))   break;
  Value base=((ArrayRef)leftOp).getBase();
  Value idx=((ArrayRef)leftOp).getIndex();
  if (base.equals(curtmp))   state=2;
 else   if (base.equals(local)) {
    if (!(idx instanceof IntConstant))     break;
    if (curdim != ((IntConstant)idx).value)     break;
    if (!rightOp.equals(curtmp))     break;
    tmplocals[curdim]=(Local)curtmp;
    curdim++;
    if (curdim >= firstdim)     state=3;
 else     state=1;
  }
}
break;
case 3:
return seconddim;
default :
return -1;
}
}
}
