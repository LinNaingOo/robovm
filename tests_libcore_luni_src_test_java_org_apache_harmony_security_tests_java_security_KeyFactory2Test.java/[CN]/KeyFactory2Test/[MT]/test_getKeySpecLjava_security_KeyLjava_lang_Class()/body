{
  for (int i=0; i < keyfactAlgs.length; i++) {
    KeyFactory fact=KeyFactory.getInstance(keyfactAlgs[i],providerName);
    KeyPairGenerator keyGen=KeyPairGenerator.getInstance(keyfactAlgs[i]);
    SecureRandom random=new SecureRandom();
    keyGen.initialize(StandardNames.getMinimumKeySize(keyfactAlgs[i]),random);
    KeepAlive keepalive=createKeepAlive(keyfactAlgs[i]);
    KeyPair keys=keyGen.generateKeyPair();
    if (keepalive != null) {
      keepalive.interrupt();
    }
    KeySpec privateKeySpec=fact.getKeySpec(keys.getPrivate(),StandardNames.getPrivateKeySpecClass(keyfactAlgs[i]));
    KeySpec publicKeySpec=fact.getKeySpec(keys.getPublic(),StandardNames.getPublicKeySpecClass(keyfactAlgs[i]));
    PrivateKey privateKey=fact.generatePrivate(privateKeySpec);
    PublicKey publicKey=fact.generatePublic(publicKeySpec);
    assertEquals("generatePrivate generated different key for algorithm " + keyfactAlgs[i] + " (provider="+ fact.getProvider().getName()+ ")",Arrays.toString(keys.getPrivate().getEncoded()),Arrays.toString(privateKey.getEncoded()));
    assertEquals("generatePublic generated different key for algorithm " + keyfactAlgs[i] + " (provider="+ fact.getProvider().getName()+ ")",Arrays.toString(keys.getPublic().getEncoded()),Arrays.toString(publicKey.getEncoded()));
    KeySpec encodedSpec=fact.getKeySpec(keys.getPublic(),X509EncodedKeySpec.class);
    assertTrue("improper key spec for encoded public key",encodedSpec.getClass().equals(X509EncodedKeySpec.class));
    encodedSpec=fact.getKeySpec(keys.getPrivate(),PKCS8EncodedKeySpec.class);
    assertTrue("improper key spec for encoded private key",encodedSpec.getClass().equals(PKCS8EncodedKeySpec.class));
  }
}
