{
  if ((flag & Pattern.UNIX_LINES) != 0) {
    if (unixLT != null)     return unixLT;
    unixLT=new AbstractLineTerminator(){
      public boolean isLineTerminator(      int ch){
        return ch == '\n';
      }
      public boolean isAfterLineTerminator(      int ch,      int ch2){
        return ch == '\n';
      }
    }
;
    return unixLT;
  }
 else {
    if (unicodeLT != null)     return unicodeLT;
    unicodeLT=new AbstractLineTerminator(){
      public boolean isLineTerminator(      int ch){
        return (ch == '\n' || ch == '\r' || ch == '\u0085' || (ch | 1) == '\u2029');
      }
      public boolean isAfterLineTerminator(      int ch,      int ch2){
        return (ch == '\n' || ch == '\u0085' || (ch | 1) == '\u2029') || (ch == '\r' && ch2 != '\n');
      }
    }
;
    return unicodeLT;
  }
}
