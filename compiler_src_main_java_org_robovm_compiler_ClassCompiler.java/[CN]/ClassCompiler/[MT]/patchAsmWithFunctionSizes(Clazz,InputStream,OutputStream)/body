{
  String labelPrefix=config.getOs().getFamily() == OS.Family.darwin ? "_" : "";
  String localLabelPrefix=config.getOs().getFamily() == OS.Family.darwin ? "L" : ".L";
  Set<String> functionNames=new HashSet<String>();
  for (  SootMethod method : clazz.getSootClass().getMethods()) {
    if (!method.isAbstract()) {
      String name=labelPrefix + Symbols.methodSymbol(method);
      functionNames.add(name);
    }
  }
  String infoStructLabel=labelPrefix + Symbols.infoStructSymbol(clazz.getInternalName());
  Pattern methodImplPattern=Pattern.compile("\\s*\\.(?:quad|long)\\s+\"?(" + Pattern.quote(labelPrefix + Symbols.methodSymbolPrefix(clazz.getInternalName())) + "[^\\s\"]+)\"?.*");
  BufferedReader in=null;
  BufferedWriter out=null;
  try {
    in=new BufferedReader(new InputStreamReader(inStream,"UTF-8"));
    out=new BufferedWriter(new OutputStreamWriter(outStream,"UTF-8"));
    String line=null;
    String currentFunction=null;
    while ((line=in.readLine()) != null) {
      if (currentFunction == null) {
        out.write(line);
        out.write('\n');
        int colon=line.indexOf(':');
        if (colon != -1) {
          String label=line.substring(0,colon);
          if (label.startsWith("\"") && label.endsWith("\"")) {
            label=label.substring(1,label.length() - 1);
          }
          if (functionNames.contains(label)) {
            currentFunction=label;
          }
 else           if (label.equals(infoStructLabel)) {
            break;
          }
        }
      }
 else       if (line.trim().equals(".cfi_endproc") || line.trim().startsWith(".section") || line.trim().startsWith(".globl")) {
        out.write("\"");
        out.write(localLabelPrefix);
        out.write(currentFunction);
        out.write("_end\":\n\n");
        currentFunction=null;
        out.write(line);
        out.write('\n');
      }
 else {
        out.write(line);
        out.write('\n');
      }
    }
    while ((line=in.readLine()) != null) {
      out.write(line);
      out.write('\n');
      Matcher matcher=methodImplPattern.matcher(line);
      if (matcher.matches()) {
        String functionName=matcher.group(1);
        if (functionNames.contains(functionName)) {
          line=in.readLine();
          if (line.contains(String.valueOf(DUMMY_METHOD_SIZE))) {
            out.write("\t.long\t");
            out.write("\"" + localLabelPrefix + functionName+ "_end\" - \""+ functionName+ "\"");
            out.write('\n');
          }
 else {
            out.write(line);
            out.write('\n');
          }
        }
      }
    }
  }
  finally {
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(out);
  }
}
