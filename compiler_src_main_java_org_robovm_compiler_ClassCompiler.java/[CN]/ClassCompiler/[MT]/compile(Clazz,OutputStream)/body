{
  sootClass=clazz.getSootClass();
  mb=new ModuleBuilder();
  trampolines=new HashSet<Trampoline>();
  catches=new HashSet<String>();
  classFields=getClassFields(sootClass);
  instanceFields=getInstanceFields(sootClass);
  classType=getClassType(sootClass);
  instanceType=getInstanceType(sootClass);
  attributesEncoder.encode(mb,sootClass);
  if (!sootClass.declaresMethodByName("<clinit>") && hasConstantValueTags(classFields)) {
    SootMethod clinit=new SootMethod("<clinit>",Collections.EMPTY_LIST,VoidType.v(),Modifier.STATIC);
    JimpleBody body=Jimple.v().newBody(clinit);
    clinit.setActiveBody(body);
    body.getUnits().add(new JReturnVoidStmt());
    this.sootClass.addMethod(clinit);
  }
  if (isStruct(sootClass)) {
    if (!Modifier.isFinal(sootClass.getModifiers())) {
      throw new IllegalArgumentException("Struct class must be final");
    }
    SootMethod _sizeOf=new SootMethod("_sizeOf",Collections.EMPTY_LIST,IntType.v(),Modifier.PROTECTED);
    sootClass.addMethod(_sizeOf);
    SootMethod sizeOf=new SootMethod("sizeOf",Collections.EMPTY_LIST,IntType.v(),Modifier.PUBLIC | Modifier.STATIC);
    sootClass.addMethod(sizeOf);
  }
  mb.addInclude(getClass().getClassLoader().getResource(String.format("header-%s-%s.ll",config.getOs().getFamily(),config.getArch())));
  mb.addInclude(getClass().getClassLoader().getResource("header.ll"));
  mb.addFunction(createInstanceof());
  mb.addFunction(createCheckcast());
  mb.addFunction(createLdcClass());
  mb.addFunction(createLdcClassWrapper());
  Function allocator=createAllocator();
  mb.addFunction(allocator);
  mb.addFunction(createClassInitWrapperFunction(allocator.ref()));
  for (  SootField f : sootClass.getFields()) {
    Function getter=createFieldGetter(f);
    Function setter=createFieldSetter(f);
    mb.addFunction(getter);
    mb.addFunction(setter);
    if (f.isStatic() && !f.isPrivate()) {
      mb.addFunction(createClassInitWrapperFunction(getter.ref()));
      if (!f.isFinal()) {
        mb.addFunction(createClassInitWrapperFunction(setter.ref()));
      }
    }
  }
  for (  SootMethod method : sootClass.getMethods()) {
    String name=method.getName();
    if (isBridge(method)) {
      bridgeMethod(method);
    }
 else     if (isStruct(sootClass) && ("_sizeOf".equals(name) || "sizeOf".equals(name) || isStructMember(method))) {
      structMember(method);
    }
 else     if (method.isNative()) {
      nativeMethod(method);
    }
 else     if (!method.isAbstract()) {
      method(method);
    }
    if (!name.equals("<clinit>") && !name.equals("<init>") && !method.isPrivate()&& !method.isStatic()&& !Modifier.isFinal(method.getModifiers())&& !Modifier.isFinal(sootClass.getModifiers())) {
      createLookupFunction(method);
    }
    if (method.isStatic()) {
      String fnName=mangleMethod(method);
      if (method.isSynchronized()) {
        fnName+="_synchronized";
      }
      FunctionRef fn=new FunctionRef(fnName,getFunctionType(method));
      mb.addFunction(createClassInitWrapperFunction(fn));
    }
  }
  for (  Trampoline trampoline : trampolines) {
    trampolineResolver.compile(mb,trampoline);
  }
  Global classInfoStruct=null;
  StructureConstant classInfoErrorStruct=createClassInfoErrorStruct();
  if (classInfoErrorStruct != null) {
    classInfoStruct=new Global(mangleClass(sootClass) + "_info_struct",classInfoErrorStruct);
  }
 else {
    classInfoStruct=new Global(mangleClass(sootClass) + "_info_struct",createClassInfoStruct());
  }
  mb.addGlobal(classInfoStruct);
  Function infoFn=FunctionBuilder.infoStruct(sootClass);
  infoFn.add(new Ret(new ConstantBitcast(classInfoStruct.ref(),I8_PTR_PTR)));
  mb.addFunction(infoFn);
  out.write(mb.build().toString().getBytes("UTF-8"));
  ClazzInfo clazzInfo=clazz.resetClazzInfo();
  clazzInfo.setModifiers(sootClass.getModifiers());
  clazzInfo.setName(clazz.getInternalName());
  if (sootClass.hasSuperclass() && !sootClass.isInterface()) {
    clazzInfo.setSuperclass(sootClass.getSuperclass().getName().replace('.','/'));
  }
 else {
    clazzInfo.setSuperclass(null);
  }
  List<String> interfaces=new ArrayList<String>();
  for (  SootClass iface : sootClass.getInterfaces()) {
    interfaces.add(iface.getName().replace('.','/'));
  }
  clazzInfo.setInterfaces(interfaces);
  List<FieldInfo> fieldInfos=new ArrayList<FieldInfo>();
  for (  SootField f : sootClass.getFields()) {
    fieldInfos.add(new FieldInfo(f.getModifiers(),f.getName(),getDescriptor(f)));
  }
  clazzInfo.setFields(fieldInfos);
  List<MethodInfo> methodInfos=new ArrayList<MethodInfo>();
  for (  SootMethod m : sootClass.getMethods()) {
    methodInfos.add(new MethodInfo(m.getModifiers(),m.getName(),getDescriptor(m)));
  }
  clazzInfo.setMethods(methodInfos);
  clazzInfo.setStruct(isStruct(this.sootClass));
  clazzInfo.setAttributeDependencies(attributesEncoder.getDependencies());
  clazzInfo.setTrampolines(trampolines);
  clazzInfo.setCatches(catches);
  clazz.commitClazzInfo();
}
