{
  javaMethodCompiler.reset(clazz);
  bridgeMethodCompiler.reset(clazz);
  callbackMethodCompiler.reset(clazz);
  nativeMethodCompiler.reset(clazz);
  structMemberMethodCompiler.reset(clazz);
  globalValueMethodCompiler.reset(clazz);
  ClazzInfo ci=clazz.resetClazzInfo();
  mb=new ModuleBuilder();
  for (  CompilerPlugin compilerPlugin : config.getCompilerPlugins()) {
    compilerPlugin.beforeClass(config,clazz,mb);
  }
  sootClass=clazz.getSootClass();
  trampolines=new HashMap<>();
  catches=new HashSet<String>();
  classFields=getClassFields(config.getOs(),config.getArch(),sootClass);
  instanceFields=getInstanceFields(config.getOs(),config.getArch(),sootClass);
  classType=getClassType(config.getOs(),config.getArch(),sootClass);
  instanceType=getInstanceType(config.getOs(),config.getArch(),sootClass);
  attributesEncoder.encode(mb,sootClass);
  if (!sootClass.declaresMethodByName("<clinit>") && hasConstantValueTags(classFields)) {
    SootMethod clinit=new SootMethod("<clinit>",Collections.EMPTY_LIST,VoidType.v(),Modifier.STATIC);
    JimpleBody body=Jimple.v().newBody(clinit);
    clinit.setActiveBody(body);
    body.getUnits().add(new JReturnVoidStmt());
    this.sootClass.addMethod(clinit);
  }
  if (isStruct(sootClass)) {
    SootMethod _sizeOf=new SootMethod("_sizeOf",Collections.EMPTY_LIST,IntType.v(),Modifier.PROTECTED | Modifier.NATIVE);
    sootClass.addMethod(_sizeOf);
    SootMethod sizeOf=new SootMethod("sizeOf",Collections.EMPTY_LIST,IntType.v(),Modifier.PUBLIC | Modifier.STATIC | Modifier.NATIVE);
    sootClass.addMethod(sizeOf);
  }
  mb.addInclude(getClass().getClassLoader().getResource(String.format("header-%s-%s.ll",config.getOs().getFamily(),config.getArch())));
  mb.addInclude(getClass().getClassLoader().getResource("header.ll"));
  mb.addFunction(createLdcClass());
  mb.addFunction(createLdcClassWrapper());
  Function allocator=createAllocator();
  mb.addFunction(allocator);
  mb.addFunction(createClassInitWrapperFunction(allocator.ref()));
  for (  SootField f : sootClass.getFields()) {
    Function getter=createFieldGetter(f,classFields,classType,instanceFields,instanceType);
    Function setter=createFieldSetter(f,classFields,classType,instanceFields,instanceType);
    mb.addFunction(getter);
    mb.addFunction(setter);
    if (f.isStatic() && !f.isPrivate()) {
      mb.addFunction(createClassInitWrapperFunction(getter.ref()));
      if (!f.isFinal()) {
        mb.addFunction(createClassInitWrapperFunction(setter.ref()));
      }
    }
  }
  ci.initClassInfo();
  Global classInfoStruct=null;
  try {
    if (!sootClass.isInterface()) {
      config.getVTableCache().get(sootClass);
    }
    classInfoStruct=new Global(Symbols.infoStructSymbol(clazz.getInternalName()),Linkage.weak,createClassInfoStruct());
  }
 catch (  IllegalArgumentException e) {
    classInfoStruct=new Global(Symbols.infoStructSymbol(clazz.getInternalName()),I8_PTR,true);
  }
  mb.addGlobal(classInfoStruct);
  Function infoFn=FunctionBuilder.infoStruct(sootClass);
  infoFn.add(new Ret(new ConstantBitcast(classInfoStruct.ref(),I8_PTR_PTR)));
  mb.addFunction(infoFn);
  for (  SootMethod method : sootClass.getMethods()) {
    for (    CompilerPlugin compilerPlugin : config.getCompilerPlugins()) {
      compilerPlugin.beforeMethod(config,clazz,method,mb);
    }
    String name=method.getName();
    Function function=null;
    if (hasBridgeAnnotation(method)) {
      function=bridgeMethod(method);
    }
 else     if (hasGlobalValueAnnotation(method)) {
      function=globalValueMethod(method);
    }
 else     if (isStruct(sootClass) && ("_sizeOf".equals(name) || "sizeOf".equals(name) || hasStructMemberAnnotation(method))) {
      function=structMember(method);
    }
 else     if (method.isNative()) {
      function=nativeMethod(method);
    }
 else     if (!method.isAbstract()) {
      function=method(method);
    }
    if (hasCallbackAnnotation(method)) {
      callbackMethod(method);
    }
    if (!name.equals("<clinit>") && !name.equals("<init>") && !method.isPrivate()&& !method.isStatic()&& !Modifier.isFinal(method.getModifiers())&& !Modifier.isFinal(sootClass.getModifiers())) {
      createLookupFunction(method);
    }
    if (method.isStatic() && !name.equals("<clinit>")) {
      String fnName=method.isSynchronized() ? Symbols.synchronizedWrapperSymbol(method) : Symbols.methodSymbol(method);
      FunctionRef fn=new FunctionRef(fnName,getFunctionType(method));
      mb.addFunction(createClassInitWrapperFunction(fn));
    }
    for (    CompilerPlugin compilerPlugin : config.getCompilerPlugins()) {
      if (function != null) {
        compilerPlugin.afterMethod(config,clazz,method,mb,function);
      }
    }
  }
  for (  Trampoline trampoline : trampolines.keySet()) {
    Set<String> deps=new HashSet<String>();
    Set<Triple<String,String,String>> mDeps=new HashSet<>();
    trampolineResolver.compile(mb,clazz,trampoline,deps,mDeps);
    for (    SootMethod m : trampolines.get(trampoline)) {
      MethodInfo mi=ci.getMethod(m.getName(),getDescriptor(m));
      mi.addClassDependencies(deps,false);
      mi.addInvokeMethodDependencies(mDeps,false);
    }
  }
  Map<SootMethod,Set<SootMethod>> overriddenMethods=getOverriddenMethods(this.sootClass);
  for (  SootMethod from : overriddenMethods.keySet()) {
    MethodInfo mi=ci.getMethod(from.getName(),getDescriptor(from));
    for (    SootMethod to : overriddenMethods.get(from)) {
      mi.addSuperMethodDependency(getInternalName(to.getDeclaringClass()),to.getName(),getDescriptor(to),false);
    }
  }
  if (sootClass.hasSuperclass()) {
    for (    SootClass interfaze : getImmediateInterfaces(sootClass)) {
      for (      SootMethod m : interfaze.getMethods()) {
        if (!m.isStatic()) {
          try {
            this.sootClass.getMethod(m.getName(),m.getParameterTypes());
          }
 catch (          RuntimeException e) {
            SootMethod superMethod=null;
            for (SootClass sc=sootClass.getSuperclass(); sc.hasSuperclass(); sc=sc.getSuperclass()) {
              try {
                SootMethod candidate=sc.getMethod(m.getName(),m.getParameterTypes());
                if (!candidate.isStatic()) {
                  superMethod=candidate;
                  break;
                }
              }
 catch (              RuntimeException e2) {
              }
            }
            if (superMethod != null) {
              ci.addSuperMethodDependency(getInternalName(superMethod.getDeclaringClass()),superMethod.getName(),getDescriptor(superMethod),false);
            }
          }
        }
      }
    }
  }
  for (  CompilerPlugin compilerPlugin : config.getCompilerPlugins()) {
    compilerPlugin.afterClass(config,clazz,mb);
  }
  OutputStreamWriter writer=new OutputStreamWriter(out,"UTF-8");
  mb.build().write(writer);
  writer.flush();
  ci.setCatchNames(catches);
  ci.addClassDependency("java/lang/Object",false);
  if (sootClass.hasSuperclass() && !sootClass.isInterface()) {
    ci.addClassDependency(getInternalName(sootClass.getSuperclass()),false);
  }
  for (  SootClass iface : sootClass.getInterfaces()) {
    ci.addClassDependency(getInternalName(iface),false);
  }
  for (  SootField f : sootClass.getFields()) {
    addClassDependencyIfNeeded(clazz,f.getType(),false);
  }
  for (  SootMethod m : sootClass.getMethods()) {
    MethodInfo mi=ci.getMethod(m.getName(),getDescriptor(m));
    addClassDependencyIfNeeded(clazz,mi,m.getReturnType(),true);
    @SuppressWarnings("unchecked") List<soot.Type> paramTypes=(List<soot.Type>)m.getParameterTypes();
    for (    soot.Type type : paramTypes) {
      addClassDependencyIfNeeded(clazz,mi,type,!m.getName().equals("<init>"));
    }
  }
  ci.addClassDependencies(attributesEncoder.getDependencies(),false);
  ci.addClassDependencies(catches,false);
  for (  Trampoline t : trampolines.keySet()) {
    if (t instanceof Checkcast) {
      ci.addCheckcast(t.getTarget());
    }
 else     if (t instanceof Instanceof) {
      ci.addInstanceof(t.getTarget());
    }
 else     if (t instanceof Invokevirtual || t instanceof Invokeinterface) {
      ci.addInvoke(t.getTarget() + "." + ((Invoke)t).getMethodName()+ ((Invoke)t).getMethodDesc());
    }
  }
  clazz.saveClazzInfo();
}
