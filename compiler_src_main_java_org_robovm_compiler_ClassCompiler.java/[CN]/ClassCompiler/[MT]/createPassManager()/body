{
  PassManager passManager=new PassManager();
  passManager.addAlwaysInlinerPass();
  passManager.addPromoteMemoryToRegisterPass();
  passManager.addTypeBasedAliasAnalysisPass();
  passManager.addBasicAliasAnalysisPass();
  passManager.addGlobalOptimizerPass();
  passManager.addIPSCCPPass();
  passManager.addDeadArgEliminationPass();
  passManager.addInstructionCombiningPass();
  passManager.addCFGSimplificationPass();
  passManager.addPruneEHPass();
  passManager.addFunctionInliningPass();
  passManager.addFunctionAttrsPass();
  passManager.addScalarReplAggregatesPass();
  passManager.addEarlyCSEPass();
  passManager.addSimplifyLibCallsPass();
  passManager.addJumpThreadingPass();
  passManager.addCorrelatedValuePropagationPass();
  passManager.addCFGSimplificationPass();
  passManager.addInstructionCombiningPass();
  passManager.addCFGSimplificationPass();
  passManager.addReassociatePass();
  passManager.addCFGSimplificationPass();
  passManager.addReassociatePass();
  passManager.addLoopRotatePass();
  passManager.addLICMPass();
  passManager.addLoopUnswitchPass();
  passManager.addInstructionCombiningPass();
  passManager.addIndVarSimplifyPass();
  passManager.addLoopIdiomPass();
  passManager.addLoopDeletionPass();
  passManager.addLoopVectorizePass();
  passManager.addLoopUnrollPass();
  passManager.addGVNPass();
  passManager.addMemCpyOptPass();
  passManager.addSCCPPass();
  passManager.addInstructionCombiningPass();
  passManager.addJumpThreadingPass();
  passManager.addCorrelatedValuePropagationPass();
  passManager.addDeadStoreEliminationPass();
  passManager.addSLPVectorizePass();
  passManager.addAggressiveDCEPass();
  passManager.addCFGSimplificationPass();
  passManager.addInstructionCombiningPass();
  passManager.addStripDeadPrototypesPass();
  passManager.addGlobalDCEPass();
  passManager.addConstantMergePass();
  return passManager;
}
