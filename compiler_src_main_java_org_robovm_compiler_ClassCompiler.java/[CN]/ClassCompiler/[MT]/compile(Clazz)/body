{
  reset();
  File oFile=config.getOFile(clazz);
  oFile.getParentFile().mkdirs();
  Arch arch=config.getArch();
  OS os=config.getOs();
  try {
    config.getLogger().debug("Compiling %s (%s %s)",clazz,os,arch);
    output.reset();
    compile(clazz,output);
  }
 catch (  Throwable t) {
    if (t instanceof IOException) {
      throw (IOException)t;
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
    throw new RuntimeException(t);
  }
  Context context=new Context();
  Module module=Module.parseIR(context,output.toByteArray(),clazz.getClassName());
  PassManager passManager=createPassManager();
  passManager.run(module);
  passManager.dispose();
  String triple=config.getTriple();
  Target target=Target.lookupTarget(triple);
  TargetMachine targetMachine=target.createTargetMachine(triple);
  targetMachine.setAsmVerbosityDefault(true);
  targetMachine.setFunctionSections(true);
  targetMachine.setDataSections(true);
  targetMachine.getOptions().setNoFramePointerElim(true);
  output.reset();
  targetMachine.emit(module,output,CodeGenFileType.AssemblyFile);
  module.dispose();
  context.dispose();
  byte[] asm=output.toByteArray();
  output.reset();
  patchAsmWithFunctionSizes(clazz,new ByteArrayInputStream(asm),output);
  asm=output.toByteArray();
  BufferedOutputStream oOut=new BufferedOutputStream(new FileOutputStream(oFile));
  targetMachine.assemble(asm,clazz.getClassName(),oOut);
  oOut.close();
  targetMachine.dispose();
}
