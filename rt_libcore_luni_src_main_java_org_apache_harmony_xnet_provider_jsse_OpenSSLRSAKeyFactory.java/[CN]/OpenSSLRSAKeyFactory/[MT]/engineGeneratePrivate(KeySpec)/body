{
  if (keySpec instanceof RSAPrivateCrtKeySpec) {
    RSAPrivateCrtKeySpec rsaKeySpec=(RSAPrivateCrtKeySpec)keySpec;
    return new OpenSSLRSAPrivateCrtKey(rsaKeySpec);
  }
 else   if (keySpec instanceof RSAPrivateKeySpec) {
    RSAPrivateKeySpec rsaKeySpec=(RSAPrivateKeySpec)keySpec;
    return new OpenSSLRSAPrivateKey(rsaKeySpec);
  }
 else   if (keySpec instanceof PKCS8EncodedKeySpec) {
    PKCS8EncodedKeySpec pkcs8KeySpec=(PKCS8EncodedKeySpec)keySpec;
    try {
      final OpenSSLKey key=new OpenSSLKey(NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(pkcs8KeySpec.getEncoded()));
      return OpenSSLRSAPrivateKey.getInstance(key);
    }
 catch (    Exception e) {
      throw new InvalidKeySpecException(e);
    }
  }
  throw new InvalidKeySpecException("Must use RSAPublicKeySpec or PKCS8EncodedKeySpec; was " + keySpec.getClass().getName());
}
