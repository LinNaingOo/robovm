{
  if (key == null) {
    throw new InvalidKeyException("key == null");
  }
  if (key instanceof RSAPublicKey) {
    RSAPublicKey rsaKey=(RSAPublicKey)key;
    try {
      return engineGeneratePublic(new RSAPublicKeySpec(rsaKey.getModulus(),rsaKey.getPublicExponent()));
    }
 catch (    InvalidKeySpecException e) {
      throw new InvalidKeyException(e);
    }
  }
 else   if (key instanceof RSAPrivateCrtKey) {
    RSAPrivateCrtKey rsaKey=(RSAPrivateCrtKey)key;
    BigInteger modulus=rsaKey.getModulus();
    BigInteger publicExponent=rsaKey.getPublicExponent();
    BigInteger privateExponent=rsaKey.getPrivateExponent();
    BigInteger primeP=rsaKey.getPrimeP();
    BigInteger primeQ=rsaKey.getPrimeQ();
    BigInteger primeExponentP=rsaKey.getPrimeExponentP();
    BigInteger primeExponentQ=rsaKey.getPrimeExponentQ();
    BigInteger crtCoefficient=rsaKey.getCrtCoefficient();
    try {
      return engineGeneratePrivate(new RSAPrivateCrtKeySpec(modulus,publicExponent,privateExponent,primeP,primeQ,primeExponentP,primeExponentQ,crtCoefficient));
    }
 catch (    InvalidKeySpecException e) {
      throw new InvalidKeyException(e);
    }
  }
 else   if (key instanceof RSAPrivateKey) {
    RSAPrivateKey rsaKey=(RSAPrivateKey)key;
    BigInteger modulus=rsaKey.getModulus();
    BigInteger privateExponent=rsaKey.getPrivateExponent();
    try {
      return engineGeneratePrivate(new RSAPrivateKeySpec(modulus,privateExponent));
    }
 catch (    InvalidKeySpecException e) {
      throw new InvalidKeyException(e);
    }
  }
 else {
    throw new InvalidKeyException("Key must be RSAPublicKey or RSAPrivateCrtKey or RSAPrivateKey");
  }
}
