{
  if (declaredType instanceof ArrayType)   declaredType=RefType.v("java.lang.Object");
  if (sigType instanceof ArrayType)   sigType=RefType.v("java.lang.Object");
  if (t instanceof ArrayType)   t=RefType.v("java.lang.Object");
  if (declaredType != null && !Scene.v().getOrMakeFastHierarchy().canStoreType(t,declaredType)) {
    return;
  }
  if (sigType != null && !Scene.v().getOrMakeFastHierarchy().canStoreType(t,sigType)) {
    return;
  }
  if (t instanceof RefType) {
    SootMethod target=resolveNonSpecial((RefType)t,subSig);
    if (target != null)     targets.add(target);
  }
 else   if (t instanceof AnySubType) {
    RefType base=((AnySubType)t).getBase();
    List subTypes=baseToSubTypes.get(base);
    if (subTypes != null) {
      for (Iterator stIt=subTypes.iterator(); stIt.hasNext(); ) {
        final Type st=(Type)stIt.next();
        resolve(st,declaredType,sigType,subSig,container,targets);
      }
      return;
    }
    baseToSubTypes.put(base,subTypes=new ArrayList());
    subTypes.add(base);
    LinkedList<SootClass> worklist=new LinkedList<SootClass>();
    HashSet<SootClass> workset=new HashSet<SootClass>();
    FastHierarchy fh=Scene.v().getOrMakeFastHierarchy();
    SootClass cl=base.getSootClass();
    if (workset.add(cl))     worklist.add(cl);
    while (!worklist.isEmpty()) {
      cl=worklist.removeFirst();
      if (cl.isInterface()) {
        for (Iterator cIt=fh.getAllImplementersOfInterface(cl).iterator(); cIt.hasNext(); ) {
          final SootClass c=(SootClass)cIt.next();
          if (workset.add(c))           worklist.add(c);
        }
      }
 else {
        if (cl.isConcrete()) {
          resolve(cl.getType(),declaredType,sigType,subSig,container,targets);
          subTypes.add(cl.getType());
        }
        for (Iterator cIt=fh.getSubclassesOf(cl).iterator(); cIt.hasNext(); ) {
          final SootClass c=(SootClass)cIt.next();
          if (workset.add(c))           worklist.add(c);
        }
      }
    }
  }
 else   if (t instanceof NullType) {
  }
 else {
    throw new RuntimeException("oops " + t);
  }
}
