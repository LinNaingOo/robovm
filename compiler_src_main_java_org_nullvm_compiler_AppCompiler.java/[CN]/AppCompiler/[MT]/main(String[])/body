{
  AppCompiler main=null;
  boolean verbose=false;
  try {
    Config.Builder builder=new Config.Builder();
    int i=0;
    while (i < args.length) {
      if ("-cp".equals(args[i]) || "-classpath".equals(args[i])) {
        for (        String p : args[++i].split(File.pathSeparator)) {
          builder.addClasspathEntry(new File(p));
        }
      }
 else       if ("-bcp".equals(args[i]) || "-bootcp".equals(args[i]) || "-bootclasspath".equals(args[i])) {
        for (        String p : args[++i].split(File.pathSeparator)) {
          builder.addBootClasspathEntry(new File(p));
        }
      }
 else       if ("-jar".equals(args[i])) {
        builder.mainJar(new File(args[++i]));
      }
 else       if ("-o".equals(args[i])) {
        builder.target(args[++i]);
      }
 else       if ("-d".equals(args[i])) {
        builder.targetDir(new File(args[++i]));
      }
 else       if ("-cache".equals(args[i])) {
        builder.cacheDir(new File(args[++i]));
      }
 else       if ("-home".equals(args[i])) {
        builder.nullVMHomeDir(new File(args[++i]));
      }
 else       if ("-run".equals(args[i])) {
        builder.run();
      }
 else       if ("-verbose".equals(args[i])) {
        verbose=true;
      }
 else       if ("-debug".equals(args[i])) {
        builder.debug();
      }
 else       if ("-skiprt".equals(args[i])) {
        builder.skipRuntimeLib();
      }
 else       if ("-skiplink".equals(args[i])) {
        builder.skipLinking();
      }
 else       if ("-clean".equals(args[i])) {
        builder.clean();
      }
 else       if ("-help".equals(args[i]) || "-?".equals(args[i])) {
        printUsageAndExit(null);
      }
 else       if ("-gcc-bin".equals(args[i])) {
        builder.gccBinPath(new File(args[++i]));
      }
 else       if ("-ar-bin".equals(args[i])) {
        builder.arBinPath(new File(args[++i]));
      }
 else       if ("-llvm-home".equals(args[i])) {
        builder.llvmHomeDir(new File(args[++i]));
      }
 else       if ("-os".equals(args[i])) {
        String s=args[++i];
        if (!"auto".equals(s)) {
          builder.os(OS.valueOf(s));
        }
      }
 else       if ("-arch".equals(args[i])) {
        String s=args[++i];
        if (!"auto".equals(s)) {
          builder.arch(Arch.valueOf(s));
        }
      }
 else       if ("-cpu".equals(args[i])) {
        builder.cpu(args[++i]);
      }
 else       if (args[i].startsWith("-D")) {
      }
 else       if (args[i].startsWith("-X")) {
      }
 else       if (args[i].startsWith("-")) {
        throw new IllegalArgumentException("Unrecognized option: " + args[i]);
      }
 else {
        builder.mainClass(args[i++]);
        break;
      }
      i++;
    }
    while (i < args.length) {
      builder.addRunArg(args[i++]);
    }
    if (verbose) {
      builder.logger(new Logger(){
        public void warn(        String format,        Object... args){
          System.err.format(format,args);
          System.err.println();
        }
        public void info(        String format,        Object... args){
          System.out.format(format,args);
          System.out.println();
        }
        public void error(        String format,        Object... args){
          System.err.format(format,args);
          System.err.println();
        }
        public void debug(        String format,        Object... args){
          System.out.format(format,args);
          System.out.println();
        }
      }
);
    }
    main=new AppCompiler(builder.build());
  }
 catch (  Throwable t) {
    String message=t.getMessage();
    if (t instanceof StringIndexOutOfBoundsException) {
      message="Missing argument";
    }
    if (verbose && !(t instanceof StringIndexOutOfBoundsException) && !(t instanceof IllegalArgumentException)) {
      t.printStackTrace();
    }
    printUsageAndExit(message);
  }
  try {
    main.run();
  }
 catch (  Throwable t) {
    String message=t.getMessage();
    if (verbose && !(t instanceof ExecuteException)) {
      t.printStackTrace();
    }
    printUsageAndExit(message);
  }
}
