{
  File outFile=new File(config.getTmpDir(),config.getTarget());
  config.getLogger().debug("Building executable %s",outFile);
  Module module=new Module();
  List<Value> bootClasspathValues=new ArrayList<Value>();
  List<Value> classpathValues=new ArrayList<Value>();
  for (  Path path : paths) {
    String entryName=null;
    if (config.isSkipInstall() && config.getApp().canLaunchInPlace()) {
      entryName=path.getFile().getAbsolutePath();
    }
 else {
      entryName=config.getApp().getInstallRelativeArchivePath(path);
    }
    byte[] modUtf8=ClassCompiler.stringToModifiedUtf8(entryName);
    Global var=new Global(ClassCompiler.getStringVarName(modUtf8),Linkage.linker_private_weak,new StringConstant(modUtf8),true);
    module.addGlobal(var);
    if (path.isInBootClasspath()) {
      bootClasspathValues.add(new ConstantGetelementptr(var.ref(),0,0));
    }
 else {
      classpathValues.add(new ConstantGetelementptr(var.ref(),0,0));
    }
  }
  bootClasspathValues.add(new NullConstant(Type.I8_PTR));
  classpathValues.add(new NullConstant(Type.I8_PTR));
  Global gBootClasspathValues=module.newGlobal(new ArrayConstant(new ArrayType(bootClasspathValues.size(),Type.I8_PTR),bootClasspathValues.toArray(new Value[0])),true);
  module.addGlobal(new Global("_nvmBcBootclasspath",new ConstantGetelementptr(gBootClasspathValues.ref(),0,0)));
  Global gClasspathValues=module.newGlobal(new ArrayConstant(new ArrayType(classpathValues.size(),Type.I8_PTR),classpathValues.toArray(new Value[0])),true);
  module.addGlobal(new Global("_nvmBcClasspath",new ConstantGetelementptr(gClasspathValues.ref(),0,0)));
  List<Value> bootClassesValues=new ArrayList<Value>();
  List<Value> classesValues=new ArrayList<Value>();
  Set<String> seenClasses=new HashSet<String>();
  for (  Path path : paths) {
    for (    Clazz c : path.list()) {
      if (seenClasses.contains(c.getInternalName())) {
        continue;
      }
      seenClasses.add(c.getInternalName());
      byte[] modUtf8=ClassCompiler.stringToModifiedUtf8(c.getInternalName());
      Global var=new Global(ClassCompiler.getStringVarName(modUtf8),Linkage.linker_private_weak,new StringConstant(modUtf8),true);
      module.addGlobal(var);
      String funcName="NullVM_" + ClassCompiler.mangleString(c.getInternalName());
      FunctionDeclaration func=new FunctionDeclaration(funcName,new FunctionType(Type.I8_PTR,Type.I8_PTR,Type.I8_PTR,Type.I8_PTR));
      module.addFunctionDeclaration(func);
      Value value=new StructureConstant(new StructureType(Type.I8_PTR,Type.I8_PTR),new ConstantGetelementptr(var.ref(),0,0),new ConstantBitcast(func.ref(),Type.I8_PTR));
      if (path.isInBootClasspath()) {
        bootClassesValues.add(value);
      }
 else {
        classesValues.add(value);
      }
    }
  }
  bootClassesValues.add(new StructureConstant(new StructureType(Type.I8_PTR,Type.I8_PTR),new NullConstant(Type.I8_PTR),new NullConstant(Type.I8_PTR)));
  classesValues.add(new StructureConstant(new StructureType(Type.I8_PTR,Type.I8_PTR),new NullConstant(Type.I8_PTR),new NullConstant(Type.I8_PTR)));
  Global gBootClassesValues=module.newGlobal(new ArrayConstant(new ArrayType(bootClassesValues.size(),new StructureType(Type.I8_PTR,Type.I8_PTR)),bootClassesValues.toArray(new Value[0])),true);
  module.addGlobal(new Global("_nvmBcBootClasses",new ConstantGetelementptr(gBootClassesValues.ref(),0,0)));
  Global gClassesValues=module.newGlobal(new ArrayConstant(new ArrayType(classesValues.size(),new StructureType(Type.I8_PTR,Type.I8_PTR)),classesValues.toArray(new Value[0])),true);
  module.addGlobal(new Global("_nvmBcClasses",new ConstantGetelementptr(gClassesValues.ref(),0,0)));
  if (config.getMainClass() != null) {
    Global g=module.newGlobal(new StringConstant(ClassCompiler.stringToModifiedUtf8(config.getMainClass())),true);
    module.addGlobal(new Global("_nvmBcMainClass",new ConstantGetelementptr(g.ref(),0,0)));
  }
  File configLl=new File(config.getTmpDir(),"config.ll");
  FileUtils.writeStringToFile(configLl,module.toString(),"UTF-8");
  File configS=new File(config.getTmpDir(),"config.s");
  CompilerUtil.llc(config,configLl,configS);
  String gccPath="gcc";
  if (config.getGccBinPath() != null) {
    gccPath=config.getGccBinPath().getAbsolutePath();
  }
  List<String> gccArgs=new ArrayList<String>();
  List<String> libArgs=new ArrayList<String>();
  libArgs.addAll(Arrays.asList("-lnullvm-bc","-lm","-lnullvm-core","-lnullvm-hyprt"));
  gccArgs.add("-L");
  gccArgs.add(config.getOsArchDepLibDir().getAbsolutePath());
  if (config.getOs() == OS.linux) {
    libArgs.add("-l:libgc.so.1");
    gccArgs.add("-Xlinker");
    gccArgs.add("-rpath=$ORIGIN");
  }
 else   if (config.getOs() == OS.darwin) {
    libArgs.add("-lgc");
    File unexportedSymbolsFile=new File(config.getTmpDir(),"unexported_symbols");
    FileUtils.writeStringToFile(unexportedSymbolsFile,"*\n","ASCII");
    gccArgs.add("-unexported_symbols_list");
    gccArgs.add(unexportedSymbolsFile.getAbsolutePath());
    gccArgs.add("-Xlinker");
    gccArgs.add("-no_compact_unwind");
    gccArgs.add("-arch");
    gccArgs.add(config.getArch().toString());
  }
  CompilerUtil.exec(config,gccPath,"-o",outFile,"-g",gccArgs,configS,libFiles,libArgs);
}
