{
  int j;
  Code_attribute ca;
  ByteCode bc;
  Instruction inst, head, tail;
  exception_table_entry e;
  head=null;
  tail=null;
  bc=new ByteCode();
  ca=m.locate_code_attribute();
  if (ca == null)   return null;
  j=0;
  while (j < ca.code_length) {
    inst=bc.disassemble_bytecode(ca.code,j);
    inst.originalIndex=j;
    if (inst instanceof Instruction_Unknown) {
      G.v().out.println("Unknown instruction in \"" + m.toName(constant_pool) + "\" at offset "+ j);
      G.v().out.println(" bytecode = " + (((int)(inst.code)) & 0xff));
    }
    j=inst.nextOffset(j);
    if (head == null)     head=inst;
 else {
      tail.next=inst;
      inst.prev=tail;
    }
    tail=inst;
  }
  bc.build(head);
  for (j=0; j < ca.exception_table_length; j++) {
    e=ca.exception_table[j];
    e.start_inst=bc.locateInst(e.start_pc);
    if (e.end_pc == ca.code_length)     e.end_inst=null;
 else     e.end_inst=bc.locateInst(e.end_pc);
    e.handler_inst=bc.locateInst(e.handler_pc);
    if (e.handler_inst != null)     e.handler_inst.labelled=true;
  }
  m.instructions=head;
  for (  attribute_info element : ca.attributes) {
    if (element instanceof LineNumberTable_attribute) {
      LineNumberTable_attribute lntattr=(LineNumberTable_attribute)element;
      for (      line_number_table_entry element0 : lntattr.line_number_table) {
        element0.start_inst=bc.locateInst(element0.start_pc);
      }
    }
  }
  return head;
}
