{
  byte tag;
  cp_info cp;
  int i;
  boolean skipone=false;
  for (i=1; i < constant_pool_count; i++) {
    if (skipone) {
      skipone=false;
      continue;
    }
    cp=constant_pool[i];
    dd.writeByte(cp.tag);
switch (cp.tag) {
case cp_info.CONSTANT_Class:
      dd.writeShort(((CONSTANT_Class_info)cp).name_index);
    break;
case cp_info.CONSTANT_Fieldref:
  dd.writeShort(((CONSTANT_Fieldref_info)cp).class_index);
dd.writeShort(((CONSTANT_Fieldref_info)cp).name_and_type_index);
break;
case cp_info.CONSTANT_Methodref:
dd.writeShort(((CONSTANT_Methodref_info)cp).class_index);
dd.writeShort(((CONSTANT_Methodref_info)cp).name_and_type_index);
break;
case cp_info.CONSTANT_InterfaceMethodref:
dd.writeShort(((CONSTANT_InterfaceMethodref_info)cp).class_index);
dd.writeShort(((CONSTANT_InterfaceMethodref_info)cp).name_and_type_index);
break;
case cp_info.CONSTANT_String:
dd.writeShort(((CONSTANT_String_info)cp).string_index);
break;
case cp_info.CONSTANT_Integer:
dd.writeInt((int)((CONSTANT_Integer_info)cp).bytes);
break;
case cp_info.CONSTANT_Float:
dd.writeInt((int)((CONSTANT_Float_info)cp).bytes);
break;
case cp_info.CONSTANT_Long:
dd.writeInt((int)((CONSTANT_Long_info)cp).high);
dd.writeInt((int)((CONSTANT_Long_info)cp).low);
skipone=true;
break;
case cp_info.CONSTANT_Double:
dd.writeInt((int)((CONSTANT_Double_info)cp).high);
dd.writeInt((int)((CONSTANT_Double_info)cp).low);
skipone=true;
break;
case cp_info.CONSTANT_NameAndType:
dd.writeShort(((CONSTANT_NameAndType_info)cp).name_index);
dd.writeShort(((CONSTANT_NameAndType_info)cp).descriptor_index);
break;
case cp_info.CONSTANT_Utf8:
((CONSTANT_Utf8_info)cp).writeBytes(dd);
break;
default :
G.v().out.println("Unknown tag in constant pool: " + cp.tag);
return false;
}
}
return true;
}
