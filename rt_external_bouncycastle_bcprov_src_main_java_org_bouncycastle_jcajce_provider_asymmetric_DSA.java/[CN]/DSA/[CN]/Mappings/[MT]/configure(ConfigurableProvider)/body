{
  provider.addAlgorithm("AlgorithmParameters.DSA",PREFIX + "AlgorithmParametersSpi");
  provider.addAlgorithm("AlgorithmParameterGenerator.DSA",PREFIX + "AlgorithmParameterGeneratorSpi");
  provider.addAlgorithm("KeyPairGenerator.DSA",PREFIX + "KeyPairGeneratorSpi");
  provider.addAlgorithm("KeyFactory.DSA",PREFIX + "KeyFactorySpi");
  provider.addAlgorithm("Signature.SHA1withDSA",PREFIX + "DSASigner$stdDSA");
  provider.addAlgorithm("Signature.NONEWITHDSA",PREFIX + "DSASigner$noneDSA");
  provider.addAlgorithm("Alg.Alias.Signature.RAWDSA","NONEWITHDSA");
  provider.addAlgorithm("Alg.Alias.Signature.DSA","SHA1withDSA");
  provider.addAlgorithm("Alg.Alias.Signature.SHA/DSA","SHA1withDSA");
  provider.addAlgorithm("Alg.Alias.Signature.SHA1WITHDSA","SHA1withDSA");
  provider.addAlgorithm("Alg.Alias.Signature.1.3.14.3.2.26with1.2.840.10040.4.1","SHA1withDSA");
  provider.addAlgorithm("Alg.Alias.Signature.1.3.14.3.2.26with1.2.840.10040.4.3","SHA1withDSA");
  provider.addAlgorithm("Alg.Alias.Signature.DSAwithSHA1","SHA1withDSA");
  provider.addAlgorithm("Alg.Alias.Signature.DSAWITHSHA1","SHA1withDSA");
  provider.addAlgorithm("Alg.Alias.Signature.SHA1WithDSA","SHA1withDSA");
  provider.addAlgorithm("Alg.Alias.Signature.DSAWithSHA1","SHA1withDSA");
  provider.addAlgorithm("Alg.Alias.Signature.1.2.840.10040.4.3","SHA1withDSA");
  AsymmetricKeyInfoConverter keyFact=new KeyFactorySpi();
  for (int i=0; i != DSAUtil.dsaOids.length; i++) {
    provider.addAlgorithm("Alg.Alias.Signature." + DSAUtil.dsaOids[i],"SHA1withDSA");
    registerOid(provider,DSAUtil.dsaOids[i],"DSA",keyFact);
    registerOidAlgorithmParameters(provider,DSAUtil.dsaOids[i],"DSA");
  }
}
