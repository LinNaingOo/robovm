{
  initOis(FILENAME);
  Support_GetPutFields object=(Support_GetPutFields)ois.readObject();
  ObjectInputStream.GetField fields=object.getField;
  try {
    fields.get("noValue",false);
    fail("IllegalArgumentException expected for not existing name " + "argument in get(String, boolean).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("noValue",(byte)0);
    fail("IllegalArgumentException expected for not existing name " + "argument in get(String, byte).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("noValue",(char)0);
    fail("IllegalArgumentException expected for not existing name " + "argument in get(String, char).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("noValue",0.0);
    fail("IllegalArgumentException expected for not existing name " + "argument in get(String, double).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("noValue",0.0f);
    fail("IllegalArgumentException expected for not existing name " + "argument in get(String, float).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("noValue",(long)0);
    fail("IllegalArgumentException expected for not existing name " + "argument in get(String, long).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("noValue",0);
    fail("IllegalArgumentException expected for not existing name " + "argument in get(String, int).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("noValue",new Object());
    fail("IllegalArgumentException expected for not existing name " + "argument in get(String, Object).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("noValue",(short)0);
    fail("IllegalArgumentException expected for not existing name " + "argument in get(String, short).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("byteValue",false);
    fail("IllegalArgumentException expected for non-matching name " + "and type arguments in get(String, boolean).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("booleanValue",(byte)0);
    fail("IllegalArgumentException expected for non-matching name " + "and type arguments in get(String, byte).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("intValue",(char)0);
    fail("IllegalArgumentException expected for non-matching name " + "and type arguments in get(String, char).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("floatValue",0.0);
    fail("IllegalArgumentException expected for non-matching name " + "and type arguments in get(String, double).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("doubleValue",0.0f);
    fail("IllegalArgumentException expected for non-matching name " + "and type arguments in get(String, float).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("intValue",(long)0);
    fail("IllegalArgumentException expected for non-matching name " + "and type arguments in get(String, long).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("shortValue",0);
    fail("IllegalArgumentException expected for non-matching name " + "and type arguments in get(String, int).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("booleanValue",new Object());
    fail("IllegalArgumentException expected for non-matching name " + "and type arguments in get(String, Object).");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    fields.get("longValue",(short)0);
    fail("IllegalArgumentException expected for non-matching name " + "and type arguments in get(String, short).");
  }
 catch (  IllegalArgumentException e) {
  }
}
