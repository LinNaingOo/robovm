{
  String baseName=clazz.getInternalName().replace('/',File.separatorChar);
  File llFile=new File(config.getLlvmCacheDir(clazz.getPath()),baseName + ".class.ll");
  File bcFile=new File(config.getLlvmCacheDir(clazz.getPath()),baseName + ".class.bc");
  File sFile=new File(config.getObjectCacheDir(clazz.getPath()),baseName + ".class.s");
  File oFile=new File(config.getObjectCacheDir(clazz.getPath()),baseName + ".class.o");
  llFile.getParentFile().mkdirs();
  bcFile.getParentFile().mkdirs();
  sFile.getParentFile().mkdirs();
  oFile.getParentFile().mkdirs();
  if (config.isClean() || !llFile.exists() || llFile.lastModified() < clazz.lastModified()) {
    OutputStream out=null;
    try {
      out=new FileOutputStream(llFile);
      compile(clazz,out);
    }
 catch (    Throwable t) {
      FileUtils.deleteQuietly(llFile);
      if (t instanceof IOException) {
        throw (IOException)t;
      }
      if (t instanceof RuntimeException) {
        throw (RuntimeException)t;
      }
      throw new RuntimeException(t);
    }
 finally {
      IOUtils.closeQuietly(out);
    }
  }
  if (config.isClean() || !bcFile.exists() || bcFile.lastModified() < llFile.lastModified()) {
    CompilerUtil.opt(config,llFile,bcFile,"-mem2reg","-always-inline");
  }
  if (config.isDebug()) {
    if (config.isClean() || !sFile.exists() || sFile.lastModified() < bcFile.lastModified()) {
      CompilerUtil.llc(config,bcFile,sFile);
    }
    if (config.isClean() || !oFile.exists() || oFile.lastModified() < sFile.lastModified()) {
      CompilerUtil.assemble(config,sFile,oFile);
    }
    return oFile;
  }
 else {
    return bcFile;
  }
}
