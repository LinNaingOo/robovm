{
  sootClass=clazz.getSootClass();
  module=new Module();
  trampolines=new HashSet<Trampoline>();
  strings=new HashMap<String,Global>();
  classFields=getClassFields(sootClass);
  instanceFields=getInstanceFields(sootClass);
  classFieldsType=getStructureType(classFields);
  instanceFieldsType=getStructureType(instanceFields);
  attributesEncoder.encode(module,sootClass);
  strings.putAll(attributesEncoder.getStrings());
  if (!sootClass.declaresMethodByName("<clinit>") && hasConstantValueTags(classFields)) {
    SootMethod clinit=new SootMethod("<clinit>",Collections.EMPTY_LIST,VoidType.v(),Modifier.STATIC);
    JimpleBody body=Jimple.v().newBody(clinit);
    clinit.setActiveBody(body);
    body.getUnits().add(new JReturnVoidStmt());
    this.sootClass.addMethod(clinit);
  }
  classInfoStruct=new Global(mangleClass(sootClass) + "_info",linker_private_weak,createClassInfoStruct());
  if (isStruct(this.sootClass)) {
    enhanceStructClass(this.sootClass);
  }
  module.addInclude(getClass().getClassLoader().getResource("header.ll"));
  Function allocator=createAllocator();
  module.addFunction(allocator);
  module.addFunction(createClassInitWrapperFunction(allocator.ref()));
  Function instanceof_=createInstanceof();
  module.addFunction(instanceof_);
  module.addFunction(createClassInitWrapperFunction(instanceof_.ref()));
  Function checkcast=createCheckcast();
  module.addFunction(checkcast);
  module.addFunction(createClassInitWrapperFunction(checkcast.ref()));
  Function ldcClass=createLdcClass();
  module.addFunction(ldcClass);
  module.addFunction(createClassInitWrapperFunction(ldcClass.ref()));
  for (  SootField f : sootClass.getFields()) {
    Function getter=createFieldGetter(f);
    Function setter=createFieldSetter(f);
    module.addFunction(getter);
    module.addFunction(setter);
    if (f.isStatic() && !f.isPrivate()) {
      module.addFunction(createClassInitWrapperFunction(getter.ref()));
      if (!f.isFinal()) {
        module.addFunction(createClassInitWrapperFunction(setter.ref()));
      }
    }
  }
  for (  SootMethod method : sootClass.getMethods()) {
    if (isBridge(method)) {
      nativeBridgeMethod(method);
    }
 else     if (method.isNative()) {
      if (isStruct(this.sootClass)) {
        if ("_sizeOf".equals(method.getName()) || "sizeOf".equals(method.getName())) {
          structSizeOf(method);
        }
 else         if (isStructMember(method)) {
          structMember(method);
        }
 else {
          nativeMethod(method);
        }
      }
 else {
        nativeMethod(method);
      }
    }
 else     if (!method.isAbstract()) {
      method(method);
      if (isCallback(method)) {
        nativeCallbackMethod(method);
      }
    }
    if (!method.getName().equals("<clinit>") && !method.getName().equals("<init>") && !method.isPrivate()&& !method.isStatic()&& !Modifier.isFinal(method.getModifiers())&& !Modifier.isFinal(sootClass.getModifiers())) {
      createLookupFunction(method);
    }
    if (method.isStatic()) {
      String fnName=mangleMethod(method);
      if (method.isSynchronized()) {
        fnName+="_synchronized";
      }
      FunctionRef fn=new FunctionRef(fnName,getFunctionType(method));
      module.addFunction(createClassInitWrapperFunction(fn));
    }
  }
  for (  Trampoline trampoline : trampolines) {
    createTrampoline(module,trampoline);
  }
  module.addGlobal(new Global(mangleClass(sootClass) + "_offset",Linkage.external,I32,false));
  module.addGlobal(classInfoStruct);
  for (  Global global : strings.values()) {
    module.addGlobal(global);
  }
  out.write(module.toString().getBytes("UTF-8"));
  ClazzInfo clazzInfo=clazz.resetClazzInfo();
  clazzInfo.setModifiers(sootClass.getModifiers());
  clazzInfo.setName(clazz.getInternalName());
  if (sootClass.hasSuperclass() && !sootClass.isInterface()) {
    clazzInfo.setSuperclass(sootClass.getSuperclass().getName().replace('.','/'));
  }
 else {
    clazzInfo.setSuperclass(null);
  }
  List<String> interfaces=new ArrayList<String>();
  for (  SootClass iface : sootClass.getInterfaces()) {
    interfaces.add(iface.getName().replace('.','/'));
  }
  clazzInfo.setInterfaces(interfaces);
  List<FieldInfo> fieldInfos=new ArrayList<FieldInfo>();
  for (  SootField f : sootClass.getFields()) {
    fieldInfos.add(new FieldInfo(f.getModifiers(),f.getName(),getDescriptor(f)));
  }
  clazzInfo.setFields(fieldInfos);
  List<MethodInfo> methodInfos=new ArrayList<MethodInfo>();
  for (  SootMethod m : sootClass.getMethods()) {
    methodInfos.add(new MethodInfo(m.getModifiers(),m.getName(),getDescriptor(m)));
  }
  clazzInfo.setMethods(methodInfos);
  clazzInfo.setStruct(isStruct(this.sootClass));
  clazzInfo.setAttributeDependencies(attributesEncoder.getDependencies());
  clazzInfo.setTrampolines(trampolines);
  clazz.commitClazzInfo();
}
