{
  final Iterator<K> keysIt=map.keySet().iterator();
  return new Iterator<Map.Entry<K,V>>(){
    Map.Entry<K,V> entry=null;
    @Override public boolean hasNext(){
      return keysIt.hasNext();
    }
    @SuppressWarnings("serial") @Override public Map.Entry<K,V> next(){
      K key=keysIt.next();
      entry=new SimpleEntry<K,V>(key,map.get(key)){
        public V setValue(        V v){
          Object value=map.get(entry.getKey());
          if (entry.getValue() != value) {
            throw new ConcurrentModificationException();
          }
          return super.setValue(v);
        }
      }
;
      return entry;
    }
    @Override public void remove(){
      if (entry == null) {
        throw new IllegalStateException();
      }
      Object value=map.get(entry.getKey());
      if (entry.getValue() != value) {
        throw new ConcurrentModificationException();
      }
      keysIt.remove();
      entry=null;
    }
  }
;
}
