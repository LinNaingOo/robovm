{
  if (!isValueConstantValued(op))   return null;
  if (op instanceof Constant)   return op;
 else   if (op instanceof UnopExpr) {
    Value c=getConstantValueOf(((UnopExpr)op).getOp());
    if (op instanceof NegExpr)     return ((NumericConstant)c).negate();
  }
 else   if (op instanceof BinopExpr) {
    Value c1=getConstantValueOf(((BinopExpr)op).getOp1());
    Value c2=getConstantValueOf(((BinopExpr)op).getOp2());
    if (op instanceof AddExpr)     return ((NumericConstant)c1).add((NumericConstant)c2);
 else     if (op instanceof SubExpr)     return ((NumericConstant)c1).subtract((NumericConstant)c2);
 else     if (op instanceof MulExpr)     return ((NumericConstant)c1).multiply((NumericConstant)c2);
 else     if (op instanceof DivExpr)     return ((NumericConstant)c1).divide((NumericConstant)c2);
 else     if (op instanceof RemExpr)     return ((NumericConstant)c1).remainder((NumericConstant)c2);
 else     if (op instanceof EqExpr || op instanceof NeExpr) {
      if (c1 instanceof NumericConstant) {
        if (op instanceof EqExpr)         return ((NumericConstant)c1).equalEqual((NumericConstant)c2);
 else         if (op instanceof NeExpr)         return ((NumericConstant)c1).notEqual((NumericConstant)c2);
      }
 else       if (c1 instanceof StringConstant) {
        boolean equality=((StringConstant)c1).equals(c2);
        boolean truth=(op instanceof EqExpr) ? equality : !equality;
        IntConstant beauty=IntConstant.v(truth ? 1 : 0);
        return beauty;
      }
 else       if (c1 instanceof NullConstant)       return IntConstant.v(((NullConstant)c1).equals(c2) ? 1 : 0);
      throw new RuntimeException("constant neither numeric nor string");
    }
 else     if (op instanceof GtExpr)     return ((NumericConstant)c1).greaterThan((NumericConstant)c2);
 else     if (op instanceof GeExpr)     return ((NumericConstant)c1).greaterThanOrEqual((NumericConstant)c2);
 else     if (op instanceof LtExpr)     return ((NumericConstant)c1).lessThan((NumericConstant)c2);
 else     if (op instanceof LeExpr)     return ((NumericConstant)c1).lessThanOrEqual((NumericConstant)c2);
 else     if (op instanceof AndExpr)     return ((ArithmeticConstant)c1).and((ArithmeticConstant)c2);
 else     if (op instanceof OrExpr)     return ((ArithmeticConstant)c1).or((ArithmeticConstant)c2);
 else     if (op instanceof XorExpr)     return ((ArithmeticConstant)c1).xor((ArithmeticConstant)c2);
 else     if (op instanceof ShlExpr)     return ((ArithmeticConstant)c1).shiftLeft((ArithmeticConstant)c2);
 else     if (op instanceof ShrExpr)     return ((ArithmeticConstant)c1).shiftRight((ArithmeticConstant)c2);
 else     if (op instanceof UshrExpr)     return ((ArithmeticConstant)c1).unsignedShiftRight((ArithmeticConstant)c2);
 else     if (op instanceof CmpExpr) {
      if ((c1 instanceof LongConstant) && (c2 instanceof LongConstant))       return ((LongConstant)c1).cmp((LongConstant)c2);
 else       throw new IllegalArgumentException("CmpExpr: LongConstant(s) expected");
    }
 else     if ((op instanceof CmpgExpr) || (op instanceof CmplExpr)) {
      if ((c1 instanceof RealConstant) && (c2 instanceof RealConstant)) {
        if (op instanceof CmpgExpr)         return ((RealConstant)c1).cmpg((RealConstant)c2);
 else         if (op instanceof CmplExpr)         return ((RealConstant)c1).cmpl((RealConstant)c2);
      }
 else       throw new IllegalArgumentException("CmpExpr: RealConstant(s) expected");
    }
 else     throw new RuntimeException("unknown binop: " + op);
  }
  throw new RuntimeException("couldn't getConstantValueOf of: " + op);
}
