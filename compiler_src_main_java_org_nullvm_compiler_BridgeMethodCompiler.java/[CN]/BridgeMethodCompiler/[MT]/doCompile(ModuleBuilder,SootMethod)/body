{
  validateBridgeMethod(method);
  Function outerFn=createFunction(method,external,noinline);
  moduleBuilder.addFunction(outerFn);
  Function innerFn=createFunction(mangleMethod(method) + "_inner",method,internal,noinline);
  moduleBuilder.addFunction(innerFn);
  Type[] parameterTypes=innerFn.getType().getParameterTypes();
  String[] parameterNames=innerFn.getParameterNames();
  ArrayList<Argument> args=new ArrayList<Argument>();
  for (int i=0; i < parameterTypes.length; i++) {
    args.add(new Argument(new VariableRef(parameterNames[i],parameterTypes[i])));
  }
  Value resultOuter=callWithArguments(outerFn,innerFn.ref(),args);
  outerFn.add(new Ret(resultOuter));
  FunctionType targetFnType=getBridgeFunctionType(method);
  args.remove(0);
  if (!method.isStatic()) {
    args.remove(0);
  }
  Type[] targetParameterTypes=targetFnType.getParameterTypes();
  for (int i=0; i < targetParameterTypes.length; i++) {
    if (targetParameterTypes[i] instanceof PointerType) {
      PointerType type=(PointerType)targetParameterTypes[i];
      if (type.getBase() instanceof StructureType) {
        Value tmp=call(innerFn,NVM_BC_BY_VALUE_GET_STRUCT_HANDLE,innerFn.getParameterRef(0),args.get(i).getValue());
        Variable arg=innerFn.newVariable(type);
        innerFn.add(new Bitcast(arg,tmp,arg.getType()));
        args.set(i,new Argument(arg.ref(),ParameterAttribute.byval));
      }
 else       if (type == I8_PTR) {
        Variable arg=innerFn.newVariable(I8_PTR);
        innerFn.add(new Inttoptr(arg,args.get(i).getValue(),I8_PTR));
        if (hasStructRetAnnotation(method,i)) {
          args.set(i,new Argument(arg.ref(),ParameterAttribute.sret));
        }
 else {
          args.set(i,new Argument(arg.ref()));
        }
      }
    }
  }
  Variable targetFn=innerFn.newVariable(targetFnType);
  Global targetFnPtr=new Global(getTargetFnPtrName(method),_private,new NullConstant(I8_PTR));
  moduleBuilder.addGlobal(targetFnPtr);
  innerFn.add(new Load(targetFn,new ConstantBitcast(targetFnPtr.ref(),new PointerType(targetFnType))));
  Label nullLabel=new Label();
  Label notNullLabel=new Label();
  Variable nullCheck=innerFn.newVariable(I1);
  innerFn.add(new Icmp(nullCheck,Condition.eq,targetFn.ref(),new NullConstant(targetFnType)));
  innerFn.add(new Br(nullCheck.ref(),innerFn.newBasicBlockRef(nullLabel),innerFn.newBasicBlockRef(notNullLabel)));
  innerFn.newBasicBlock(nullLabel);
  call(innerFn,NVM_BC_THROW_UNSATISIFED_LINK_ERROR,innerFn.getParameterRef(0));
  innerFn.add(new Unreachable());
  innerFn.newBasicBlock(notNullLabel);
  Value frameAddress=call(innerFn,LLVM_FRAMEADDRESS,new IntegerConstant(0));
  call(innerFn,NVM_BC_PUSH_NATIVE_FRAME,innerFn.getParameterRef(0),frameAddress);
  Value resultInner=callWithArguments(innerFn,targetFn.ref(),args);
  call(innerFn,NVM_BC_POP_NATIVE_FRAME,innerFn.getParameterRef(0));
  if (targetFnType.getReturnType() == I8_PTR) {
    Variable resultI64=innerFn.newVariable(I64);
    innerFn.add(new Ptrtoint(resultI64,resultInner,I64));
    resultInner=resultI64.ref();
  }
  innerFn.add(new Ret(resultInner));
}
