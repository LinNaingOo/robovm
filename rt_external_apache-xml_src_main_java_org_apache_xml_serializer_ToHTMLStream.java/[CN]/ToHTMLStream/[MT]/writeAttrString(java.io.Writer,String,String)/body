{
  final int end=string.length();
  if (end > m_attrBuff.length) {
    m_attrBuff=new char[end * 2 + 1];
  }
  string.getChars(0,end,m_attrBuff,0);
  final char[] chars=m_attrBuff;
  int cleanStart=0;
  int cleanLength=0;
  char ch=0;
  for (int i=0; i < end; i++) {
    ch=chars[i];
    if (escapingNotNeeded(ch) && (!m_charInfo.shouldMapAttrChar(ch))) {
      cleanLength++;
    }
 else     if ('<' == ch || '>' == ch) {
      cleanLength++;
    }
 else     if (('&' == ch) && ((i + 1) < end) && ('{' == chars[i + 1])) {
      cleanLength++;
    }
 else {
      if (cleanLength > 0) {
        writer.write(chars,cleanStart,cleanLength);
        cleanLength=0;
      }
      int pos=accumDefaultEntity(writer,ch,i,chars,end,false,true);
      if (i != pos) {
        i=pos - 1;
      }
 else {
        if (Encodings.isHighUTF16Surrogate(ch)) {
          writeUTF16Surrogate(ch,chars,i,end);
          i++;
        }
        String outputStringForChar=m_charInfo.getOutputStringForChar(ch);
        if (null != outputStringForChar) {
          writer.write(outputStringForChar);
        }
 else         if (escapingNotNeeded(ch)) {
          writer.write(ch);
        }
 else {
          writer.write("&#");
          writer.write(Integer.toString(ch));
          writer.write(';');
        }
      }
      cleanStart=i + 1;
    }
  }
  if (cleanLength > 1) {
    if (cleanStart == 0)     writer.write(string);
 else     writer.write(chars,cleanStart,cleanLength);
  }
 else   if (cleanLength == 1) {
    writer.write(ch);
  }
}
