{
  try {
    page2.performFinish(new NullProgressMonitor());
    IJavaProject javaProject=page2.getJavaProject();
    IProject project=javaProject.getProject();
    page1.storePreferences(project);
    IClasspathEntry[] oldClasspath=javaProject.getRawClasspath();
    List<IClasspathEntry> newClasspath=new ArrayList<IClasspathEntry>();
    for (    IClasspathEntry entry : oldClasspath) {
      if (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER && entry.getPath().toString().equals("org.eclipse.jdt.launching.JRE_CONTAINER")) {
        newClasspath.add(JavaCore.newContainerEntry(new Path(RoboVMClasspathContainer.ID)));
      }
 else {
        newClasspath.add(entry);
      }
    }
    newClasspath=customizeClasspath(newClasspath);
    javaProject.setRawClasspath(newClasspath.toArray(new IClasspathEntry[newClasspath.size()]),new NullProgressMonitor());
    RoboVMNature.configureNatures(project,new NullProgressMonitor());
    File projectRoot=project.getLocation().toFile();
    File propsFile=new File(projectRoot,"robovm.properties");
    File configFile=new File(projectRoot,"robovm.xml");
    if (!propsFile.exists() && !configFile.exists()) {
      Properties props=new Properties();
      Config.Builder configBuilder=new Config.Builder();
      customizeConfig(configBuilder,props);
      configBuilder.write(configFile);
      Writer writer=null;
      try {
        writer=new OutputStreamWriter(new FileOutputStream(propsFile));
        props.store(writer,"");
      }
  finally {
        IOUtils.closeQuietly(writer);
      }
      project.refreshLocal(IResource.DEPTH_ONE,null);
    }
  }
 catch (  Exception e) {
    RoboVMPlugin.log(e);
    return false;
  }
  OpenJavaPerspectiveAction action=new OpenJavaPerspectiveAction();
  action.run();
  return true;
}
