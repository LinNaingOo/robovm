{
  final Map<String,List<String>> cookieHandlerHeaders=new HashMap<String,List<String>>();
  CookieHandler.setDefault(new CookieManager(){
    @Override public Map<String,List<String>> get(    URI uri,    Map<String,List<String>> requestHeaders) throws IOException {
      cookieHandlerHeaders.putAll(requestHeaders);
      Map<String,List<String>> result=new HashMap<String,List<String>>();
      result.put("Cookie",Collections.singletonList("Bar=bar"));
      result.put("Cookie2",Collections.singletonList("Baz=baz"));
      result.put("Quux",Collections.singletonList("quux"));
      return result;
    }
  }
);
  MockWebServer server=new MockWebServer();
  try {
    server.enqueue(new MockResponse());
    server.play();
    HttpURLConnection connection=(HttpURLConnection)server.getUrl("/").openConnection();
    assertEquals(Collections.<String,List<String>>emptyMap(),connection.getRequestProperties());
    connection.setRequestProperty("Foo","foo");
    connection.setDoOutput(true);
    connection.getOutputStream().write(5);
    connection.getOutputStream().close();
    connection.getInputStream().close();
    RecordedRequest request=server.takeRequest();
    assertContainsAll(cookieHandlerHeaders.keySet(),"Foo");
    assertContainsAll(cookieHandlerHeaders.keySet(),"Content-Type","User-Agent","Connection","Host");
    assertFalse(cookieHandlerHeaders.containsKey("Cookie"));
    try {
      assertContainsAll(connection.getRequestProperties().keySet(),"Foo");
      assertContainsAll(connection.getRequestProperties().keySet(),"Content-Type","Content-Length","User-Agent","Connection","Host");
      assertContainsAll(connection.getRequestProperties().keySet(),"Cookie","Cookie2");
      assertFalse(connection.getRequestProperties().containsKey("Quux"));
    }
 catch (    IllegalStateException expected) {
    }
    assertContainsAll(request.getHeaders(),"Foo: foo","Cookie: Bar=bar","Cookie2: Baz=baz");
    assertFalse(request.getHeaders().contains("Quux: quux"));
  }
  finally {
    server.shutdown();
  }
}
