{
  try {
    primitiveType=Character.toUpperCase(primitiveType);
switch (primitiveType) {
case 'I':
      f.setInt(o,((Integer)value).intValue());
    break;
case 'J':
  f.setLong(o,((Long)value).longValue());
break;
case 'Z':
f.setBoolean(o,((Boolean)value).booleanValue());
break;
case 'S':
f.setShort(o,((Short)value).shortValue());
break;
case 'B':
f.setByte(o,((Byte)value).byteValue());
break;
case 'C':
f.setChar(o,((Character)value).charValue());
break;
case 'D':
f.setDouble(o,((Double)value).doubleValue());
break;
case 'F':
f.setFloat(o,((Float)value).floatValue());
break;
default :
f.set(o,value);
}
if (expectedException != null) {
fail("expected exception " + expectedException.getName() + " for field "+ f.getName()+ ", value "+ value);
}
}
 catch (Exception e) {
if (expectedException == null) {
fail("unexpected exception " + e + " for field "+ f.getName()+ ", value "+ value);
}
 else {
assertTrue("expected exception " + expectedException.getName() + " and got "+ e+ " for field "+ f.getName()+ ", value "+ value,e.getClass().equals(expectedException));
}
}
}
