{
  this.method=method;
  this.paramIdx=paramIdx;
  this.type=paramIdx == RETURN_TYPE ? method.getReturnType() : (paramIdx == RECEIVER ? method.getDeclaringClass().getType() : method.getParameterType(paramIdx));
  if (hasBridgeAnnotation(method)) {
    callType=Bro.MarshalerFlags.CALL_TYPE_BRIDGE;
    callTypeName="@Bridge";
    array=false;
  }
 else   if (hasCallbackAnnotation(method)) {
    callType=Bro.MarshalerFlags.CALL_TYPE_CALLBACK;
    callTypeName="@Callback";
    array=false;
  }
 else   if (hasStructMemberAnnotation(method)) {
    callType=Bro.MarshalerFlags.CALL_TYPE_STRUCT_MEMBER;
    callTypeName="@StructMember";
    array=paramIdx == RETURN_TYPE ? hasArrayAnnotation(method) : hasArrayAnnotation(method,paramIdx);
  }
 else   if (hasGlobalValueAnnotation(method)) {
    callType=Bro.MarshalerFlags.CALL_TYPE_GLOBAL_VALUE;
    callTypeName="@GlobalValue";
    array=paramIdx == RETURN_TYPE ? hasArrayAnnotation(method) : hasArrayAnnotation(method,paramIdx);
  }
 else {
    throw new IllegalArgumentException();
  }
}
