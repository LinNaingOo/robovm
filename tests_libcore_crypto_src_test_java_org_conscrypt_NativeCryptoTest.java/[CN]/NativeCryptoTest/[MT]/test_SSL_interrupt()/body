{
  NativeCrypto.SSL_interrupt(NULL);
{
    long c=NativeCrypto.SSL_CTX_new();
    long s=NativeCrypto.SSL_new(c);
    NativeCrypto.SSL_interrupt(s);
    NativeCrypto.SSL_free(s);
    NativeCrypto.SSL_CTX_free(c);
  }
  final ServerSocket listener=new ServerSocket(0);
  Hooks cHooks=new Hooks(){
    @Override public void afterHandshake(    long session,    long s,    long c,    Socket sock,    FileDescriptor fd,    SSLHandshakeCallbacks callback) throws Exception {
      NativeCrypto.SSL_read(s,fd,callback,new byte[1],0,1,0);
      super.afterHandshake(session,s,c,sock,fd,callback);
    }
  }
;
  Hooks sHooks=new ServerHooks(getServerPrivateKey(),getServerCertificates()){
    @Override public void afterHandshake(    long session,    final long s,    long c,    Socket sock,    FileDescriptor fd,    SSLHandshakeCallbacks callback) throws Exception {
      new Thread(){
        public void run(){
          try {
            Thread.sleep(1 * 1000);
            NativeCrypto.SSL_interrupt(s);
          }
 catch (          Exception e) {
          }
        }
      }
.start();
      assertEquals(-1,NativeCrypto.SSL_read(s,fd,callback,new byte[1],0,1,0));
      super.afterHandshake(session,s,c,sock,fd,callback);
    }
  }
;
  Future<TestSSLHandshakeCallbacks> client=handshake(listener,0,true,cHooks,null,null);
  Future<TestSSLHandshakeCallbacks> server=handshake(listener,0,false,sHooks,null,null);
  client.get(TIMEOUT_SECONDS,TimeUnit.SECONDS);
  server.get(TIMEOUT_SECONDS,TimeUnit.SECONDS);
}
