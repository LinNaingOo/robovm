{
  String[] testPatternsSingles={"a{5}","a{2,4}","a{3,}"};
  String[] testPatternsMultiple={"((a)|(b)){1,2}abb","((a)|(b)){2,4}","((a)|(b)){3,}"};
  String[][] stringSingles={{"aaaaa","aaa"},{"aa","a","aaa","aaaaaa","aaaa","aaaaa"},{"aaa","a","aaaa","aa"}};
  String[][] stringMultiples={{"ababb","aba"},{"ab","b","bab","ababa","abba","abababbb"},{"aba","b","abaa","ba"}};
  for (int i=0; i < testPatternsSingles.length; i++) {
    Pattern pat=Pattern.compile(testPatternsSingles[i]);
    for (int j=0; j < stringSingles.length / 2; j++) {
      assertTrue("Match expected, but failed: " + pat.pattern() + " : "+ stringSingles[i][j],pat.matcher(stringSingles[i][j * 2]).matches());
      assertFalse("Match failure expected, but match succeed: " + pat.pattern() + " : "+ stringSingles[i][j * 2 + 1],pat.matcher(stringSingles[i][j * 2 + 1]).matches());
    }
  }
  for (int i=0; i < testPatternsMultiple.length; i++) {
    Pattern pat=Pattern.compile(testPatternsMultiple[i]);
    for (int j=0; j < stringMultiples.length / 2; j++) {
      assertTrue("Match expected, but failed: " + pat.pattern() + " : "+ stringMultiples[i][j],pat.matcher(stringMultiples[i][j * 2]).matches());
      assertFalse("Match failure expected, but match succeed: " + pat.pattern() + " : "+ stringMultiples[i][j * 2 + 1],pat.matcher(stringMultiples[i][j * 2 + 1]).matches());
    }
  }
}
