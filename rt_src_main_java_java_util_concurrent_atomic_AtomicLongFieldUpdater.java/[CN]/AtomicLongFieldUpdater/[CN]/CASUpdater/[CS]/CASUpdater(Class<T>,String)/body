{
  Field field=null;
  Class caller=null;
  int modifiers=0;
  try {
    field=tclass.getDeclaredField(fieldName);
    caller=VM.getStackClass(2);
    modifiers=field.getModifiers();
    SecurityManager smgr=System.getSecurityManager();
    if (smgr != null) {
      int type=Modifier.isPublic(modifiers) ? Member.PUBLIC : Member.DECLARED;
      smgr.checkMemberAccess(tclass,type);
      smgr.checkPackageAccess(tclass.getPackage().getName());
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  Class fieldt=field.getType();
  if (fieldt != long.class)   throw new IllegalArgumentException("Must be long type");
  if (!Modifier.isVolatile(modifiers))   throw new IllegalArgumentException("Must be volatile type");
  this.cclass=(Modifier.isProtected(modifiers) && caller != tclass) ? caller : null;
  this.tclass=tclass;
  offset=unsafe.objectFieldOffset(field);
}
