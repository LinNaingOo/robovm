{
class MySocketImpl extends SocketImpl {
    public int option;
    public Object value;
    public boolean createCalled;
    public boolean createStream;
    public MySocketImpl(){
      super();
    }
    @Override protected void accept(    SocketImpl arg0) throws IOException {
    }
    @Override protected int available() throws IOException {
      return 0;
    }
    @Override protected void bind(    InetAddress arg0,    int arg1) throws IOException {
    }
    @Override protected void close() throws IOException {
    }
    @Override protected void connect(    String arg0,    int arg1) throws IOException {
    }
    @Override protected void connect(    InetAddress arg0,    int arg1) throws IOException {
    }
    @Override protected void connect(    SocketAddress arg0,    int arg1) throws IOException {
    }
    @Override protected InputStream getInputStream() throws IOException {
      return null;
    }
    @Override protected OutputStream getOutputStream() throws IOException {
      return null;
    }
    @Override protected void listen(    int arg0) throws IOException {
    }
    @Override protected void sendUrgentData(    int arg0) throws IOException {
    }
    public Object getOption(    int arg0) throws SocketException {
      return null;
    }
    @Override protected void create(    boolean isStream) throws IOException {
      this.createCalled=true;
      this.createStream=isStream;
    }
    public void setOption(    int option,    Object value) throws SocketException {
      this.option=option;
      this.value=value;
    }
  }
class MySocket extends Socket {
    public MySocket(    SocketImpl impl) throws SocketException {
      super(impl);
    }
  }
  MySocketImpl impl=new MySocketImpl();
  Socket s=new MySocket(impl);
  s.setSoLinger(false,-1);
  assertEquals(Boolean.FALSE,(Boolean)impl.value);
  assertEquals(true,impl.createCalled);
  s.setSoLinger(false,0);
  assertEquals(Boolean.FALSE,(Boolean)impl.value);
  s.setSoLinger(false,1);
  assertEquals(Boolean.FALSE,(Boolean)impl.value);
  s.setSoLinger(true,0);
  assertEquals(Integer.valueOf(0),(Integer)impl.value);
  s.setSoLinger(true,1);
  assertEquals(Integer.valueOf(1),(Integer)impl.value);
}
