{
  InetAddress host=InetAddress.getLocalHost();
  ServerSocketChannel ssc=ServerSocketChannel.open();
  InetSocketAddress listenAddr=new InetSocketAddress(host,0);
  ssc.socket().bind(listenAddr,0);
  ServerSocket ss=ssc.socket();
  SocketChannel out=SocketChannel.open();
  out.configureBlocking(false);
  if (setOptions) {
    out.socket().setTcpNoDelay(false);
  }
  InetSocketAddress addr=new InetSocketAddress(host,ssc.socket().getLocalPort());
  out.connect(addr);
  while (!out.finishConnect()) {
    Thread.sleep(1);
  }
  SocketChannel in=ssc.accept();
  if (setOptions) {
    in.socket().setTcpNoDelay(false);
  }
  InetSocketAddress outRemoteAddress=(InetSocketAddress)out.socket().getRemoteSocketAddress();
  InetSocketAddress outLocalAddress=(InetSocketAddress)out.socket().getLocalSocketAddress();
  InetSocketAddress inLocalAddress=(InetSocketAddress)in.socket().getLocalSocketAddress();
  InetSocketAddress inRemoteAddress=(InetSocketAddress)in.socket().getRemoteSocketAddress();
  System.err.println("inLocalAddress: " + inLocalAddress);
  System.err.println("inRemoteAddress: " + inRemoteAddress);
  System.err.println("outLocalAddress: " + outLocalAddress);
  System.err.println("outRemoteAddress: " + outRemoteAddress);
  assertEquals(outRemoteAddress.getPort(),ss.getLocalPort());
  assertEquals(inLocalAddress.getPort(),ss.getLocalPort());
  assertEquals(inRemoteAddress.getPort(),outLocalAddress.getPort());
  assertEquals(inLocalAddress.getAddress(),ss.getInetAddress());
  assertEquals(inRemoteAddress.getAddress(),ss.getInetAddress());
  assertEquals(outLocalAddress.getAddress(),ss.getInetAddress());
  assertEquals(outRemoteAddress.getAddress(),ss.getInetAddress());
  in.close();
  out.close();
  ssc.close();
  assertNull(in.socket().getRemoteSocketAddress());
  assertNull(out.socket().getRemoteSocketAddress());
  assertEquals(in.socket().getLocalSocketAddress(),ss.getLocalSocketAddress());
}
