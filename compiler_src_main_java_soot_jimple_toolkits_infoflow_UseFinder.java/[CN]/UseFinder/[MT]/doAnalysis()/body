{
  Chain appClasses=Scene.v().getApplicationClasses();
  Iterator appClassesIt=appClasses.iterator();
  while (appClassesIt.hasNext()) {
    SootClass appClass=(SootClass)appClassesIt.next();
    classToIntFieldAccesses.put(appClass,new ArrayList());
    classToExtFieldAccesses.put(appClass,new ArrayList());
    classToIntCalls.put(appClass,new ArrayList());
    classToExtCalls.put(appClass,new ArrayList());
  }
  appClassesIt=appClasses.iterator();
  while (appClassesIt.hasNext()) {
    SootClass appClass=(SootClass)appClassesIt.next();
    Iterator methodsIt=appClass.getMethods().iterator();
    while (methodsIt.hasNext()) {
      SootMethod method=(SootMethod)methodsIt.next();
      if (method.isConcrete() && rm.contains(method)) {
        Body b=method.retrieveActiveBody();
        Iterator unitsIt=b.getUnits().iterator();
        while (unitsIt.hasNext()) {
          Stmt s=(Stmt)unitsIt.next();
          if (s.containsFieldRef()) {
            FieldRef fr=s.getFieldRef();
            if (fr.getFieldRef().resolve().getDeclaringClass() == appClass) {
              if (fr instanceof StaticFieldRef) {
                classToIntFieldAccesses.get(appClass).add(new Pair(method,s));
              }
 else               if (fr instanceof InstanceFieldRef) {
                InstanceFieldRef ifr=(InstanceFieldRef)fr;
                if (!method.isStatic() && ifr.getBase().equivTo(b.getThisLocal())) {
                  classToIntFieldAccesses.get(appClass).add(new Pair(method,s));
                }
 else {
                  classToExtFieldAccesses.get(appClass).add(new Pair(method,s));
                }
              }
            }
 else {
              List<Pair> otherClassList=classToExtFieldAccesses.get(fr.getFieldRef().resolve().getDeclaringClass());
              if (otherClassList == null) {
                otherClassList=new ArrayList<Pair>();
                classToExtFieldAccesses.put(fr.getFieldRef().resolve().getDeclaringClass(),otherClassList);
              }
              otherClassList.add(new Pair(method,s));
            }
          }
          if (s.containsInvokeExpr()) {
            InvokeExpr ie=s.getInvokeExpr();
            if (ie.getMethodRef().resolve().getDeclaringClass() == appClass) {
              if (ie instanceof StaticInvokeExpr) {
                classToIntCalls.get(appClass).add(new Pair(method,s));
              }
 else               if (ie instanceof InstanceInvokeExpr) {
                InstanceInvokeExpr iie=(InstanceInvokeExpr)ie;
                if (!method.isStatic() && iie.getBase().equivTo(b.getThisLocal())) {
                  classToIntCalls.get(appClass).add(new Pair(method,s));
                }
 else {
                  classToExtCalls.get(appClass).add(new Pair(method,s));
                }
              }
            }
 else {
              List<Pair> otherClassList=classToExtCalls.get(ie.getMethodRef().resolve().getDeclaringClass());
              if (otherClassList == null) {
                otherClassList=new ArrayList<Pair>();
                classToExtCalls.put(ie.getMethodRef().resolve().getDeclaringClass(),otherClassList);
              }
              otherClassList.add(new Pair(method,s));
            }
          }
        }
      }
    }
  }
}
