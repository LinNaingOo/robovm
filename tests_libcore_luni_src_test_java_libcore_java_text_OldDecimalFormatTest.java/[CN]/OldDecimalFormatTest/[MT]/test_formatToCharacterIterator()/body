{
  AttributedCharacterIterator iterator;
  int[] runStarts;
  int[] runLimits;
  String result;
  char current;
  DecimalFormat df=new DecimalFormat();
  df.setMultiplier(10);
  iterator=df.formatToCharacterIterator(new BigDecimal("12345678901234567890"));
  result="123,456,789,012,345,678,900";
  current=iterator.current();
  for (int i=0; i < result.length(); i++) {
    assertEquals("wrong char @" + i,result.charAt(i),current);
    current=iterator.next();
  }
  df=new DecimalFormat();
  df.setMultiplier(-1);
  df.setMaximumFractionDigits(20);
  iterator=df.formatToCharacterIterator(new BigDecimal("1.23456789012345678901"));
  result="-1.23456789012345678901";
  current=iterator.current();
  for (int i=0; i < result.length(); i++) {
    assertEquals("wrong char @" + i,result.charAt(i),current);
    current=iterator.next();
  }
  iterator=new DecimalFormat().formatToCharacterIterator(new BigDecimal("1.23456789E1234"));
  runStarts=new int[]{0,0,2,3,3,3,6,7,7,7,10,11,11,11,14};
  runLimits=new int[]{2,2,3,6,6,6,7,10,10,10,11,14,14,14,15};
  result="12,345,678,900,";
  current=iterator.current();
  for (int i=0; i < runStarts.length; i++) {
    assertEquals("wrong start @" + i,runStarts[i],iterator.getRunStart());
    assertEquals("wrong limit @" + i,runLimits[i],iterator.getRunLimit());
    assertEquals("wrong char @" + i,result.charAt(i),current);
    current=iterator.next();
  }
  assertEquals(0,iterator.getBeginIndex());
  assertEquals(1646,iterator.getEndIndex());
  iterator=new DecimalFormat().formatToCharacterIterator(new BigDecimal("1.23456789E301"));
  runStarts=new int[]{0,0,2,3,3,3,6,7,7,7,10,11,11,11,14};
  runLimits=new int[]{2,2,3,6,6,6,7,10,10,10,11,14,14,14,15};
  result="12,345,678,900,";
  current=iterator.current();
  for (int i=0; i < runStarts.length; i++) {
    assertEquals("wrong start @" + i,runStarts[i],iterator.getRunStart());
    assertEquals("wrong limit @" + i,runLimits[i],iterator.getRunLimit());
    assertEquals("wrong char @" + i,result.charAt(i),current);
    current=iterator.next();
  }
  assertEquals(0,iterator.getBeginIndex());
  assertEquals(402,iterator.getEndIndex());
  iterator=new DecimalFormat().formatToCharacterIterator(new BigDecimal("1.2345678E4"));
  runStarts=new int[]{0,0,2,3,3,3,6,7,7,7};
  runLimits=new int[]{2,2,3,6,6,6,7,10,10,10};
  result="12,345.678";
  current=iterator.current();
  for (int i=0; i < runStarts.length; i++) {
    assertEquals("wrong start @" + i,runStarts[i],iterator.getRunStart());
    assertEquals("wrong limit @" + i,runLimits[i],iterator.getRunLimit());
    assertEquals("wrong char @" + i,result.charAt(i),current);
    current=iterator.next();
  }
  assertEquals(0,iterator.getBeginIndex());
  assertEquals(10,iterator.getEndIndex());
  iterator=new DecimalFormat().formatToCharacterIterator(new BigInteger("123456789"));
  runStarts=new int[]{0,0,0,3,4,4,4,7,8,8,8};
  runLimits=new int[]{3,3,3,4,7,7,7,8,11,11,11};
  result="123,456,789";
  current=iterator.current();
  for (int i=0; i < runStarts.length; i++) {
    assertEquals("wrong start @" + i,runStarts[i],iterator.getRunStart());
    assertEquals("wrong limit @" + i,runLimits[i],iterator.getRunLimit());
    assertEquals("wrong char @" + i,result.charAt(i),current);
    current=iterator.next();
  }
  assertEquals(0,iterator.getBeginIndex());
  assertEquals(11,iterator.getEndIndex());
}
