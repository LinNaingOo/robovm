{
  Object result=null;
  if (method.getDeclaringClass() == java.lang.Object.class) {
    if (method.getName().equals("toString"))     return super.toString();
 else     if (method.getName().equals("hashCode"))     return Integer.valueOf(super.hashCode());
 else     if (method.getName().equals("equals"))     return Boolean.valueOf(super.equals(args[0]));
 else     throw new RuntimeException("huh?");
  }
  System.out.println("Invoke " + method);
  if (args == null || args.length == 0) {
    System.out.println(" (no args)");
  }
 else {
    for (int i=0; i < args.length; i++)     System.out.println(" " + i + ": "+ args[i]);
  }
  try {
    if (method.getName().equals("throwFunky"))     throw new InterruptedException("fake");
    if (method.getName().equals("throwFunky2"))     throw new IOException("fake2");
    if (method.getName().equals("throwException"))     throw new Exception();
    if (method.getName().equals("throwBase"))     throw new BaseException();
    if (method.getName().equals("throwSub"))     throw new SubException();
    if (method.getName().equals("throwSubSub"))     throw new SubSubException();
    if (method.getName().equals("bothThrowBase"))     throw new BaseException();
    if (true)     result=method.invoke(mObj,args);
 else     result=-1;
    System.out.println("Success: method " + method.getName() + " res="+ result);
  }
 catch (  InvocationTargetException ite) {
    throw ite.getTargetException();
  }
catch (  IllegalAccessException iae) {
    throw new RuntimeException(iae);
  }
  return result;
}
